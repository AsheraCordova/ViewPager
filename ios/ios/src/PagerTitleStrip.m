//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\IOSViewPagerPlugin\src\main\java\androidx\viewpager\widget\PagerTitleStrip.java
//

#include "ConverterFactory.h"
#include "DataSetObserver.h"
#include "Drawable.h"
#include "Gravity.h"
#include "HasWidgets.h"
#include "IConverter.h"
#include "IFragment.h"
#include "IWidget.h"
#include "J2ObjC_source.h"
#include "PagerAdapter.h"
#include "PagerTitleStrip.h"
#include "TextView.h"
#include "View.h"
#include "ViewGroup.h"
#include "ViewPager.h"
#include "ViewParent.h"
#include "WidgetFactory.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/ref/WeakReference.h"

@class ASPagerTitleStrip_PageListener;
@class JavaLangRefWeakReference;


@interface ASPagerTitleStrip () {
 @public
  jint mLastKnownCurrentPage_;
  jint mScaledTextSpacing_;
  jint mGravity_;
  jboolean mUpdatingText_;
  jboolean mUpdatingPositions_;
  ASPagerTitleStrip_PageListener *mPageListener_;
  JavaLangRefWeakReference *mWatchingAdapter_;
  jint mNonPrimaryAlpha_;
}

@end

J2OBJC_FIELD_SETTER(ASPagerTitleStrip, mPageListener_, ASPagerTitleStrip_PageListener *)
J2OBJC_FIELD_SETTER(ASPagerTitleStrip, mWatchingAdapter_, JavaLangRefWeakReference *)

inline jfloat ASPagerTitleStrip_get_SIDE_ALPHA(void);
#define ASPagerTitleStrip_SIDE_ALPHA 0.6f
J2OBJC_STATIC_FIELD_CONSTANT(ASPagerTitleStrip, SIDE_ALPHA, jfloat)

inline jint ASPagerTitleStrip_get_TEXT_SPACING(void);
#define ASPagerTitleStrip_TEXT_SPACING 16
J2OBJC_STATIC_FIELD_CONSTANT(ASPagerTitleStrip, TEXT_SPACING, jint)

@interface ASPagerTitleStrip_PageListener : ADDataSetObserver < ASViewPager_OnPageChangeListener, ASViewPager_OnAdapterChangeListener > {
 @public
  ASPagerTitleStrip *this$0_;
  jint mScrollState_;
}

- (instancetype)initWithASPagerTitleStrip:(ASPagerTitleStrip *)outer$;

- (void)onPageScrolledWithInt:(jint)position
                    withFloat:(jfloat)positionOffset
                      withInt:(jint)positionOffsetPixels;

- (void)onPageSelectedWithInt:(jint)position;

- (void)onPageScrollStateChangedWithInt:(jint)state;

- (void)onAdapterChangedWithASViewPager:(ASViewPager *)viewPager
                     withASPagerAdapter:(ASPagerAdapter *)oldAdapter
                     withASPagerAdapter:(ASPagerAdapter *)newAdapter;

- (void)onChanged;

@end

J2OBJC_EMPTY_STATIC_INIT(ASPagerTitleStrip_PageListener)

__attribute__((unused)) static void ASPagerTitleStrip_PageListener_initWithASPagerTitleStrip_(ASPagerTitleStrip_PageListener *self, ASPagerTitleStrip *outer$);

__attribute__((unused)) static ASPagerTitleStrip_PageListener *new_ASPagerTitleStrip_PageListener_initWithASPagerTitleStrip_(ASPagerTitleStrip *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASPagerTitleStrip_PageListener *create_ASPagerTitleStrip_PageListener_initWithASPagerTitleStrip_(ASPagerTitleStrip *outer$);

J2OBJC_TYPE_LITERAL_HEADER(ASPagerTitleStrip_PageListener)

@implementation ASPagerTitleStrip

- (void)setTextSpacingWithInt:(jint)spacingPixels {
  mScaledTextSpacing_ = spacingPixels;
  [self requestLayout];
}

- (jint)getTextSpacing {
  return mScaledTextSpacing_;
}

- (void)setTextSizeWithInt:(jint)unit
                 withFloat:(jfloat)size {
  [((ADTextView *) nil_chk(mPrevText_)) setMyAttributeWithNSString:@"textSize" withId:JavaLangFloat_valueOfWithFloat_(size)];
  [((ADTextView *) nil_chk(mCurrText_)) setMyAttributeWithNSString:@"textSize" withId:JavaLangFloat_valueOfWithFloat_(size)];
  [((ADTextView *) nil_chk(mNextText_)) setMyAttributeWithNSString:@"textSize" withId:JavaLangFloat_valueOfWithFloat_(size)];
}

- (void)setGravityWithInt:(jint)gravity {
  mGravity_ = gravity;
  [self requestLayout];
}

- (void)onAttachedToWindow {
  [super onAttachedToWindow];
  id<ADViewParent> parent = [self getParent];
  if (!([parent isKindOfClass:[ASViewPager class]])) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"PagerTitleStrip must be a direct child of a ViewPager.");
  }
  ASViewPager *pager = (ASViewPager *) cast_chk(parent, [ASViewPager class]);
  ASPagerAdapter *adapter = [((ASViewPager *) nil_chk(pager)) getAdapter];
  (void) [pager setInternalPageChangeListenerWithASViewPager_OnPageChangeListener:mPageListener_];
  [pager addOnAdapterChangeListenerWithASViewPager_OnAdapterChangeListener:mPageListener_];
  mPager_ = pager;
  [self updateAdapterWithASPagerAdapter:mWatchingAdapter_ != nil ? [mWatchingAdapter_ get] : nil withASPagerAdapter:adapter];
}

- (void)onDetachedFromWindow {
  [super onDetachedFromWindow];
  if (mPager_ != nil) {
    [self updateAdapterWithASPagerAdapter:[mPager_ getAdapter] withASPagerAdapter:nil];
    (void) [((ASViewPager *) nil_chk(mPager_)) setInternalPageChangeListenerWithASViewPager_OnPageChangeListener:nil];
    [((ASViewPager *) nil_chk(mPager_)) removeOnAdapterChangeListenerWithASViewPager_OnAdapterChangeListener:mPageListener_];
    mPager_ = nil;
  }
}

- (void)updateTextWithInt:(jint)currentItem
       withASPagerAdapter:(ASPagerAdapter *)adapter {
  jint itemCount = adapter != nil ? [adapter getCount] : 0;
  mUpdatingText_ = true;
  NSString *text = @"";
  if (currentItem >= 1 && adapter != nil) {
    text = (NSString *) cast_chk([adapter getPageTitleWithInt:currentItem - 1], [NSString class]);
  }
  [((ADTextView *) nil_chk(mPrevText_)) setTextWithNSString:text];
  [((ADTextView *) nil_chk(mCurrText_)) setTextWithNSString:adapter != nil && currentItem < itemCount ? (NSString *) cast_chk([adapter getPageTitleWithInt:currentItem], [NSString class]) : nil];
  text = @"";
  if (currentItem + 1 < itemCount && adapter != nil) {
    text = (NSString *) cast_chk([adapter getPageTitleWithInt:currentItem + 1], [NSString class]);
  }
  [((ADTextView *) nil_chk(mNextText_)) setTextWithNSString:text];
  jint width = [self getWidth] - [self getPaddingLeft] - [self getPaddingRight];
  jint maxWidth = JavaLangMath_maxWithInt_withInt_(0, JreFpToInt((width * 0.8f)));
  jint childWidthSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(maxWidth, ADView_MeasureSpec_AT_MOST);
  jint childHeight = [self getHeight] - [self getPaddingTop] - [self getPaddingBottom];
  jint maxHeight = JavaLangMath_maxWithInt_withInt_(0, childHeight);
  jint childHeightSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(maxHeight, ADView_MeasureSpec_AT_MOST);
  [((ADTextView *) nil_chk(mPrevText_)) measureWithInt:childWidthSpec withInt:childHeightSpec];
  [((ADTextView *) nil_chk(mCurrText_)) measureWithInt:childWidthSpec withInt:childHeightSpec];
  [((ADTextView *) nil_chk(mNextText_)) measureWithInt:childWidthSpec withInt:childHeightSpec];
  mLastKnownCurrentPage_ = currentItem;
  if (!mUpdatingPositions_) {
    [self updateTextPositionsWithInt:currentItem withFloat:mLastKnownPositionOffset_ withBoolean:false];
  }
  mUpdatingText_ = false;
}

- (void)requestLayout {
  if (!mUpdatingText_) {
    [super requestLayout];
  }
}

- (void)updateAdapterWithASPagerAdapter:(ASPagerAdapter *)oldAdapter
                     withASPagerAdapter:(ASPagerAdapter *)newAdapter {
  if (oldAdapter != nil) {
    [oldAdapter unregisterDataSetObserverWithADDataSetObserver:mPageListener_];
    mWatchingAdapter_ = nil;
  }
  if (newAdapter != nil) {
    [newAdapter registerDataSetObserverWithADDataSetObserver:mPageListener_];
    mWatchingAdapter_ = new_JavaLangRefWeakReference_initWithId_(newAdapter);
  }
  if (mPager_ != nil) {
    mLastKnownCurrentPage_ = -1;
    mLastKnownPositionOffset_ = -1;
    [self updateTextWithInt:[mPager_ getCurrentItem] withASPagerAdapter:newAdapter];
    [self requestLayout];
  }
}

- (void)updateTextPositionsWithInt:(jint)position
                         withFloat:(jfloat)positionOffset
                       withBoolean:(jboolean)force {
  if (position != mLastKnownCurrentPage_) {
    [self updateTextWithInt:position withASPagerAdapter:[((ASViewPager *) nil_chk(mPager_)) getAdapter]];
  }
  else if (!force && positionOffset == mLastKnownPositionOffset_) {
    return;
  }
  mUpdatingPositions_ = true;
  jint prevWidth = [((ADTextView *) nil_chk(mPrevText_)) getMeasuredWidth];
  jint currWidth = [((ADTextView *) nil_chk(mCurrText_)) getMeasuredWidth];
  jint nextWidth = [((ADTextView *) nil_chk(mNextText_)) getMeasuredWidth];
  jint halfCurrWidth = JreIntDiv(currWidth, 2);
  jint stripWidth = [self getWidth];
  jint stripHeight = [self getHeight];
  jint paddingLeft = [self getPaddingLeft];
  jint paddingRight = [self getPaddingRight];
  jint paddingTop = [self getPaddingTop];
  jint paddingBottom = [self getPaddingBottom];
  jint textPaddedLeft = paddingLeft + halfCurrWidth;
  jint textPaddedRight = paddingRight + halfCurrWidth;
  jint contentWidth = stripWidth - textPaddedLeft - textPaddedRight;
  jfloat currOffset = positionOffset + 0.5f;
  if (currOffset > 1.f) {
    JreMinusAssignFloatF(&currOffset, 1.f);
  }
  jint currCenter = stripWidth - textPaddedRight - JreFpToInt((contentWidth * currOffset));
  jint currLeft = currCenter - JreIntDiv(currWidth, 2);
  jint currRight = currLeft + currWidth;
  jint prevBaseline = [((ADTextView *) nil_chk(mPrevText_)) getBaseline];
  jint currBaseline = [((ADTextView *) nil_chk(mCurrText_)) getBaseline];
  jint nextBaseline = [((ADTextView *) nil_chk(mNextText_)) getBaseline];
  jint maxBaseline = JavaLangMath_maxWithInt_withInt_(JavaLangMath_maxWithInt_withInt_(prevBaseline, currBaseline), nextBaseline);
  jint prevTopOffset = maxBaseline - prevBaseline;
  jint currTopOffset = maxBaseline - currBaseline;
  jint nextTopOffset = maxBaseline - nextBaseline;
  jint alignedPrevHeight = prevTopOffset + [((ADTextView *) nil_chk(mPrevText_)) getMeasuredHeight];
  jint alignedCurrHeight = currTopOffset + [((ADTextView *) nil_chk(mCurrText_)) getMeasuredHeight];
  jint alignedNextHeight = nextTopOffset + [((ADTextView *) nil_chk(mNextText_)) getMeasuredHeight];
  jint maxTextHeight = JavaLangMath_maxWithInt_withInt_(JavaLangMath_maxWithInt_withInt_(alignedPrevHeight, alignedCurrHeight), alignedNextHeight);
  jint vgrav = mGravity_ & ADGravity_VERTICAL_GRAVITY_MASK;
  jint prevTop;
  jint currTop;
  jint nextTop;
  {
    jint paddedHeight;
    jint centeredTop;
    jint bottomGravTop;
    switch (vgrav) {
      default:
      case ADGravity_TOP:
      prevTop = paddingTop + prevTopOffset;
      currTop = paddingTop + currTopOffset;
      nextTop = paddingTop + nextTopOffset;
      break;
      case ADGravity_CENTER_VERTICAL:
      paddedHeight = stripHeight - paddingTop - paddingBottom;
      centeredTop = JreIntDiv((paddedHeight - maxTextHeight), 2);
      prevTop = centeredTop + prevTopOffset;
      currTop = centeredTop + currTopOffset;
      nextTop = centeredTop + nextTopOffset;
      break;
      case ADGravity_BOTTOM:
      bottomGravTop = stripHeight - paddingBottom - maxTextHeight;
      prevTop = bottomGravTop + prevTopOffset;
      currTop = bottomGravTop + currTopOffset;
      nextTop = bottomGravTop + nextTopOffset;
      break;
    }
  }
  [((ADTextView *) nil_chk(mCurrText_)) layoutWithInt:currLeft withInt:currTop withInt:currRight withInt:currTop + [mCurrText_ getMeasuredHeight]];
  jint prevLeft = JavaLangMath_minWithInt_withInt_(paddingLeft, currLeft - mScaledTextSpacing_ - prevWidth);
  [((ADTextView *) nil_chk(mPrevText_)) layoutWithInt:prevLeft withInt:prevTop withInt:prevLeft + prevWidth withInt:prevTop + [mPrevText_ getMeasuredHeight]];
  jint nextLeft = JavaLangMath_maxWithInt_withInt_(stripWidth - paddingRight - nextWidth, currRight + mScaledTextSpacing_);
  [((ADTextView *) nil_chk(mNextText_)) layoutWithInt:nextLeft withInt:nextTop withInt:nextLeft + nextWidth withInt:nextTop + [mNextText_ getMeasuredHeight]];
  mLastKnownPositionOffset_ = positionOffset;
  mUpdatingPositions_ = false;
}

- (void)onMeasureWithInt:(jint)widthMeasureSpec
                 withInt:(jint)heightMeasureSpec {
  jint widthMode = ADView_MeasureSpec_getModeWithInt_(widthMeasureSpec);
  if (widthMode != ADView_MeasureSpec_EXACTLY) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Must measure with an exact width");
  }
  jint heightPadding = [self getPaddingTop] + [self getPaddingBottom];
  jint childHeightSpec = ADViewGroup_getChildMeasureSpecWithInt_withInt_withInt_(heightMeasureSpec, heightPadding, ADViewGroup_LayoutParams_WRAP_CONTENT);
  jint widthSize = ADView_MeasureSpec_getSizeWithInt_(widthMeasureSpec);
  jint widthPadding = JreFpToInt((widthSize * 0.2f));
  jint childWidthSpec = ADViewGroup_getChildMeasureSpecWithInt_withInt_withInt_(widthMeasureSpec, widthPadding, ADViewGroup_LayoutParams_WRAP_CONTENT);
  [((ADTextView *) nil_chk(mPrevText_)) measureWithInt:childWidthSpec withInt:childHeightSpec];
  [((ADTextView *) nil_chk(mCurrText_)) measureWithInt:childWidthSpec withInt:childHeightSpec];
  [((ADTextView *) nil_chk(mNextText_)) measureWithInt:childWidthSpec withInt:childHeightSpec];
  jint height;
  jint heightMode = ADView_MeasureSpec_getModeWithInt_(heightMeasureSpec);
  if (heightMode == ADView_MeasureSpec_EXACTLY) {
    height = ADView_MeasureSpec_getSizeWithInt_(heightMeasureSpec);
  }
  else {
    jint textHeight = [((ADTextView *) nil_chk(mCurrText_)) getMeasuredHeight];
    jint minHeight = [self getMinHeight];
    height = JavaLangMath_maxWithInt_withInt_(minHeight, textHeight + heightPadding);
  }
  jint childState = [((ADTextView *) nil_chk(mCurrText_)) getMeasuredState];
  jint measuredHeight = ADView_resolveSizeAndStateWithInt_withInt_withInt_(height, heightMeasureSpec, JreLShift32(childState, ADView_MEASURED_HEIGHT_STATE_SHIFT));
  [self setMeasuredDimensionWithInt:widthSize withInt:measuredHeight];
}

- (void)onLayoutWithBoolean:(jboolean)changed
                    withInt:(jint)l
                    withInt:(jint)t
                    withInt:(jint)r
                    withInt:(jint)b {
  if (mPager_ != nil) {
    jfloat offset = mLastKnownPositionOffset_ >= 0 ? mLastKnownPositionOffset_ : 0;
    [self updateTextPositionsWithInt:mLastKnownCurrentPage_ withFloat:offset withBoolean:true];
  }
}

- (jint)getMinHeight {
  jint minHeight = 0;
  ADDrawable *bg = [self getBackground];
  if (bg != nil) {
    minHeight = [bg getIntrinsicHeight];
  }
  return minHeight;
}

- (instancetype)initWithASHasWidgets:(id<ASHasWidgets>)widget {
  ASPagerTitleStrip_initWithASHasWidgets_(self, widget);
  return self;
}

- (void)init__WithASHasWidgets:(id<ASHasWidgets>)widget {
  mPrevText_ = (ADTextView *) cast_chk([((id<ASIWidget>) nil_chk(ASWidgetFactory_createWidgetWithNSString_withNSString_withASHasWidgets_withBoolean_(@"TextView", @"PagerTitleStrip_TextView", widget, false))) asWidget], [ADTextView class]);
  mCurrText_ = (ADTextView *) cast_chk([((id<ASIWidget>) nil_chk(ASWidgetFactory_createWidgetWithNSString_withNSString_withASHasWidgets_withBoolean_(@"TextView", @"PagerTitleStrip_TextView", widget, false))) asWidget], [ADTextView class]);
  mNextText_ = (ADTextView *) cast_chk([((id<ASIWidget>) nil_chk(ASWidgetFactory_createWidgetWithNSString_withNSString_withASHasWidgets_withBoolean_(@"TextView", @"PagerTitleStrip_TextView", widget, false))) asWidget], [ADTextView class]);
  [((ADTextView *) nil_chk(mNextText_)) setMyAttributeWithNSString:@"alpha" withId:JavaLangFloat_valueOfWithFloat_(ASPagerTitleStrip_SIDE_ALPHA)];
  [((ADTextView *) nil_chk(mPrevText_)) setMyAttributeWithNSString:@"alpha" withId:JavaLangFloat_valueOfWithFloat_(ASPagerTitleStrip_SIDE_ALPHA)];
}

- (void)setTextColorWithId:(id)objValue {
  [((ADTextView *) nil_chk(mCurrText_)) setMyAttributeWithNSString:@"textColor" withId:objValue];
  [((ADTextView *) nil_chk(mNextText_)) setMyAttributeWithNSString:@"textColor" withId:objValue];
  [((ADTextView *) nil_chk(mPrevText_)) setMyAttributeWithNSString:@"textColor" withId:objValue];
}

- (void)setNonPrimaryAlphaWithFloat:(jfloat)alpha {
  [((ADTextView *) nil_chk(mNextText_)) setMyAttributeWithNSString:@"alpha" withId:JavaLangFloat_valueOfWithFloat_(alpha)];
  [((ADTextView *) nil_chk(mPrevText_)) setMyAttributeWithNSString:@"alpha" withId:JavaLangFloat_valueOfWithFloat_(alpha)];
}

- (void)setTextAppearanceWithId:(id)objValue {
  [((ADTextView *) nil_chk(mCurrText_)) setMyAttributeWithNSString:@"textAppearance" withId:objValue];
  [((ADTextView *) nil_chk(mNextText_)) setMyAttributeWithNSString:@"textAppearance" withId:objValue];
  [((ADTextView *) nil_chk(mPrevText_)) setMyAttributeWithNSString:@"textAppearance" withId:objValue];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 13, 14, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 18, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(setTextSpacingWithInt:);
  methods[1].selector = @selector(getTextSpacing);
  methods[2].selector = @selector(setTextSizeWithInt:withFloat:);
  methods[3].selector = @selector(setGravityWithInt:);
  methods[4].selector = @selector(onAttachedToWindow);
  methods[5].selector = @selector(onDetachedFromWindow);
  methods[6].selector = @selector(updateTextWithInt:withASPagerAdapter:);
  methods[7].selector = @selector(requestLayout);
  methods[8].selector = @selector(updateAdapterWithASPagerAdapter:withASPagerAdapter:);
  methods[9].selector = @selector(updateTextPositionsWithInt:withFloat:withBoolean:);
  methods[10].selector = @selector(onMeasureWithInt:withInt:);
  methods[11].selector = @selector(onLayoutWithBoolean:withInt:withInt:withInt:withInt:);
  methods[12].selector = @selector(getMinHeight);
  methods[13].selector = @selector(initWithASHasWidgets:);
  methods[14].selector = @selector(init__WithASHasWidgets:);
  methods[15].selector = @selector(setTextColorWithId:);
  methods[16].selector = @selector(setNonPrimaryAlphaWithFloat:);
  methods[17].selector = @selector(setTextAppearanceWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mPager_", "LASViewPager;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mPrevText_", "LADTextView;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mCurrText_", "LADTextView;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mNextText_", "LADTextView;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mLastKnownCurrentPage_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mLastKnownPositionOffset_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mScaledTextSpacing_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mGravity_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mUpdatingText_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mUpdatingPositions_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mPageListener_", "LASPagerTitleStrip_PageListener;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mWatchingAdapter_", "LJavaLangRefWeakReference;", .constantValue.asLong = 0, 0x2, -1, -1, 22, -1 },
    { "SIDE_ALPHA", "F", .constantValue.asFloat = ASPagerTitleStrip_SIDE_ALPHA, 0x1a, -1, -1, -1, -1 },
    { "TEXT_SPACING", "I", .constantValue.asInt = ASPagerTitleStrip_TEXT_SPACING, 0x1a, -1, -1, -1, -1 },
    { "mNonPrimaryAlpha_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTextColor_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setTextSpacing", "I", "setTextSize", "IF", "setGravity", "updateText", "ILASPagerAdapter;", "updateAdapter", "LASPagerAdapter;LASPagerAdapter;", "updateTextPositions", "IFZ", "onMeasure", "II", "onLayout", "ZIIII", "LASHasWidgets;", "init", "setTextColor", "LNSObject;", "setNonPrimaryAlpha", "F", "setTextAppearance", "Ljava/lang/ref/WeakReference<Landroidx/viewpager/widget/PagerAdapter;>;", "LASPagerTitleStrip_PageListener;" };
  static const J2ObjcClassInfo _ASPagerTitleStrip = { "PagerTitleStrip", "androidx.viewpager.widget", ptrTable, methods, fields, 7, 0x1, 18, 16, -1, 23, -1, -1, -1 };
  return &_ASPagerTitleStrip;
}

@end

void ASPagerTitleStrip_initWithASHasWidgets_(ASPagerTitleStrip *self, id<ASHasWidgets> widget) {
  ADViewGroup_init(self);
  self->mLastKnownCurrentPage_ = -1;
  self->mLastKnownPositionOffset_ = -1;
  self->mPageListener_ = new_ASPagerTitleStrip_PageListener_initWithASPagerTitleStrip_(self);
  self->mGravity_ = ADGravity_BOTTOM;
  self->mScaledTextSpacing_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([((id<ASIConverter>) nil_chk(ASConverterFactory_getWithNSString_(@"dimension"))) convertFromWithId:@"16dp" withJavaUtilMap:nil withASIFragment:[((id<ASHasWidgets>) nil_chk(widget)) getFragment]], [JavaLangInteger class]))) intValue];
}

ASPagerTitleStrip *new_ASPagerTitleStrip_initWithASHasWidgets_(id<ASHasWidgets> widget) {
  J2OBJC_NEW_IMPL(ASPagerTitleStrip, initWithASHasWidgets_, widget)
}

ASPagerTitleStrip *create_ASPagerTitleStrip_initWithASHasWidgets_(id<ASHasWidgets> widget) {
  J2OBJC_CREATE_IMPL(ASPagerTitleStrip, initWithASHasWidgets_, widget)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASPagerTitleStrip)

@implementation ASPagerTitleStrip_PageListener

- (instancetype)initWithASPagerTitleStrip:(ASPagerTitleStrip *)outer$ {
  ASPagerTitleStrip_PageListener_initWithASPagerTitleStrip_(self, outer$);
  return self;
}

- (void)onPageScrolledWithInt:(jint)position
                    withFloat:(jfloat)positionOffset
                      withInt:(jint)positionOffsetPixels {
  if (positionOffset > 0.5f) {
    position++;
  }
  [this$0_ updateTextPositionsWithInt:position withFloat:positionOffset withBoolean:false];
}

- (void)onPageSelectedWithInt:(jint)position {
  if (mScrollState_ == ASViewPager_SCROLL_STATE_IDLE) {
    [this$0_ updateTextWithInt:[((ASViewPager *) nil_chk(this$0_->mPager_)) getCurrentItem] withASPagerAdapter:[((ASViewPager *) nil_chk(this$0_->mPager_)) getAdapter]];
    jfloat offset = this$0_->mLastKnownPositionOffset_ >= 0 ? this$0_->mLastKnownPositionOffset_ : 0;
    [this$0_ updateTextPositionsWithInt:[((ASViewPager *) nil_chk(this$0_->mPager_)) getCurrentItem] withFloat:offset withBoolean:true];
  }
}

- (void)onPageScrollStateChangedWithInt:(jint)state {
  mScrollState_ = state;
}

- (void)onAdapterChangedWithASViewPager:(ASViewPager *)viewPager
                     withASPagerAdapter:(ASPagerAdapter *)oldAdapter
                     withASPagerAdapter:(ASPagerAdapter *)newAdapter {
  [this$0_ updateAdapterWithASPagerAdapter:oldAdapter withASPagerAdapter:newAdapter];
}

- (void)onChanged {
  [this$0_ updateTextWithInt:[((ASViewPager *) nil_chk(this$0_->mPager_)) getCurrentItem] withASPagerAdapter:[((ASViewPager *) nil_chk(this$0_->mPager_)) getAdapter]];
  jfloat offset = this$0_->mLastKnownPositionOffset_ >= 0 ? this$0_->mLastKnownPositionOffset_ : 0;
  [this$0_ updateTextPositionsWithInt:[((ASViewPager *) nil_chk(this$0_->mPager_)) getCurrentItem] withFloat:offset withBoolean:true];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASPagerTitleStrip:);
  methods[1].selector = @selector(onPageScrolledWithInt:withFloat:withInt:);
  methods[2].selector = @selector(onPageSelectedWithInt:);
  methods[3].selector = @selector(onPageScrollStateChangedWithInt:);
  methods[4].selector = @selector(onAdapterChangedWithASViewPager:withASPagerAdapter:withASPagerAdapter:);
  methods[5].selector = @selector(onChanged);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASPagerTitleStrip;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "mScrollState_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASPagerTitleStrip;", "onPageScrolled", "IFI", "onPageSelected", "I", "onPageScrollStateChanged", "onAdapterChanged", "LASViewPager;LASPagerAdapter;LASPagerAdapter;" };
  static const J2ObjcClassInfo _ASPagerTitleStrip_PageListener = { "PageListener", "androidx.viewpager.widget", ptrTable, methods, fields, 7, 0x2, 6, 2, 0, -1, -1, -1, -1 };
  return &_ASPagerTitleStrip_PageListener;
}

@end

void ASPagerTitleStrip_PageListener_initWithASPagerTitleStrip_(ASPagerTitleStrip_PageListener *self, ASPagerTitleStrip *outer$) {
  self->this$0_ = outer$;
  ADDataSetObserver_init(self);
}

ASPagerTitleStrip_PageListener *new_ASPagerTitleStrip_PageListener_initWithASPagerTitleStrip_(ASPagerTitleStrip *outer$) {
  J2OBJC_NEW_IMPL(ASPagerTitleStrip_PageListener, initWithASPagerTitleStrip_, outer$)
}

ASPagerTitleStrip_PageListener *create_ASPagerTitleStrip_PageListener_initWithASPagerTitleStrip_(ASPagerTitleStrip *outer$) {
  J2OBJC_CREATE_IMPL(ASPagerTitleStrip_PageListener, initWithASPagerTitleStrip_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASPagerTitleStrip_PageListener)
