//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\IOSViewPagerPlugin\src\main\java\com\ashera\viewpager\ViewPagerImpl.java
//

#include "BaseHasWidgets.h"
#include "Canvas.h"
#include "Drawable.h"
#include "EventCommand.h"
#include "EventCommandFactory.h"
#include "EventExpressionParser.h"
#include "HasWidgets.h"
#include "IActivity.h"
#include "IAttributable.h"
#include "IFragment.h"
#include "ILifeCycleDecorator.h"
#include "IListener.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "IWidget.h"
#include "IWidgetLifeCycleListener.h"
#include "J2ObjC_source.h"
#include "KeyEvent.h"
#include "LayoutTransition.h"
#include "LoopParam.h"
#include "MeasureEvent.h"
#include "OnLayoutEvent.h"
#include "PagerAdapter.h"
#include "PluginInvoker.h"
#include "Rect.h"
#include "View.h"
#include "ViewGroup.h"
#include "ViewGroupImpl.h"
#include "ViewImpl.h"
#include "ViewPager.h"
#include "ViewPagerImpl.h"
#include "WidgetAttribute.h"
#include "WidgetFactory.h"
#include "java/lang/Boolean.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Runnable.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"

#include <UIKit/UIKit.h>
#include "ASUIView.h"
#include "HasLifeCycleDecorators.h"

#include "ASUIImageView.h"

@protocol JavaUtilList;
@protocol JavaUtilMap;


#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface ASViewPagerImpl () {
 @public
  id uiView_;
  id<ADCanvas> canvas_;
  ADXViewPager *viewPager_;
  jfloat pageWidth_;
  id<JavaUtilList> pageTitles_;
  jint animationDurationInMs_;
  jint currentX_;
  jint lastValue_;
  jint startX_;
  jint prevWidth_;
  jint prevHeight_;
  ASViewPagerImpl_ViewPagerCommandBuilder *builder_;
  ASViewPagerImpl_ViewPagerBean *bean_;
  ASViewPagerImpl_ViewPagerCommandParamsBuilder *paramsBuilder_;
  ASViewPagerImpl_ViewPagerParamsBean *paramsBean_;
}

- (void)setWidgetOnNativeClass;

- (void)nativeRemoveViewWithASIWidget:(id<ASIWidget>)widget;

- (void)createLayoutParamsWithADView:(ADView *)view;

- (ADXViewPager_LayoutParams *)getLayoutParamsWithADView:(ADView *)view;

- (void)setPageTitlesWithId:(id)objValue;

- (void)setPageWidthWithId:(id)objValue;

- (void)addListeners;

- (void)addOnKeyListener;

- (void)smoothScrollToWithInt:(jint)x
                      withInt:(jint)y
                      withInt:(jint)velocity;

- (void)scrollToWithInt:(jint)x
                withInt:(jint)y;

- (jint)getScrollX;

- (void)handlePanStartWithInt:(jint)eventX;

- (void)handlePanEndWithInt:(jint)eventX;

- (void)handlePanDragWithInt:(jint)eventX;

- (void)updateBoundsWithInt:(jint)l
                    withInt:(jint)t
                    withInt:(jint)r
                    withInt:(jint)b;

- (void)setCurrentItemWithInt:(jint)currentItem;

- (jint)getAdjustedRightWithInt:(jint)r
                        withInt:(jint)l;

- (void)createCanvas;

- (void)nativeCreateWithJavaUtilMap:(id<JavaUtilMap>)params;

- (id)createViewWithJavaUtilMap:(id<JavaUtilMap>)params;

- (jboolean)isRightPressedWithInt:(jint)keyCode;

- (jboolean)isLeftPressedWithInt:(jint)keyCode;

- (jint)getAbsXWithId:(id)eventWidget
              withInt:(jint)x
              withInt:(jint)y;

@end

J2OBJC_FIELD_SETTER(ASViewPagerImpl, uiView_, id)
J2OBJC_FIELD_SETTER(ASViewPagerImpl, canvas_, id<ADCanvas>)
J2OBJC_FIELD_SETTER(ASViewPagerImpl, viewPager_, ADXViewPager *)
J2OBJC_FIELD_SETTER(ASViewPagerImpl, pageTitles_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ASViewPagerImpl, builder_, ASViewPagerImpl_ViewPagerCommandBuilder *)
J2OBJC_FIELD_SETTER(ASViewPagerImpl, bean_, ASViewPagerImpl_ViewPagerBean *)
J2OBJC_FIELD_SETTER(ASViewPagerImpl, paramsBuilder_, ASViewPagerImpl_ViewPagerCommandParamsBuilder *)
J2OBJC_FIELD_SETTER(ASViewPagerImpl, paramsBean_, ASViewPagerImpl_ViewPagerParamsBean *)

__attribute__((unused)) static void ASViewPagerImpl_setWidgetOnNativeClass(ASViewPagerImpl *self);

__attribute__((unused)) static void ASViewPagerImpl_nativeRemoveViewWithASIWidget_(ASViewPagerImpl *self, id<ASIWidget> widget);

__attribute__((unused)) static void ASViewPagerImpl_createLayoutParamsWithADView_(ASViewPagerImpl *self, ADView *view);

__attribute__((unused)) static ADXViewPager_LayoutParams *ASViewPagerImpl_getLayoutParamsWithADView_(ASViewPagerImpl *self, ADView *view);

__attribute__((unused)) static void ASViewPagerImpl_setPageTitlesWithId_(ASViewPagerImpl *self, id objValue);

__attribute__((unused)) static void ASViewPagerImpl_setPageWidthWithId_(ASViewPagerImpl *self, id objValue);

__attribute__((unused)) static void ASViewPagerImpl_addListeners(ASViewPagerImpl *self);

__attribute__((unused)) static void ASViewPagerImpl_addOnKeyListener(ASViewPagerImpl *self);

__attribute__((unused)) static void ASViewPagerImpl_smoothScrollToWithInt_withInt_withInt_(ASViewPagerImpl *self, jint x, jint y, jint velocity);

__attribute__((unused)) static void ASViewPagerImpl_scrollToWithInt_withInt_(ASViewPagerImpl *self, jint x, jint y);

__attribute__((unused)) static jint ASViewPagerImpl_getScrollX(ASViewPagerImpl *self);

__attribute__((unused)) static void ASViewPagerImpl_handlePanStartWithInt_(ASViewPagerImpl *self, jint eventX);

__attribute__((unused)) static void ASViewPagerImpl_handlePanEndWithInt_(ASViewPagerImpl *self, jint eventX);

__attribute__((unused)) static void ASViewPagerImpl_handlePanDragWithInt_(ASViewPagerImpl *self, jint eventX);

__attribute__((unused)) static void ASViewPagerImpl_updateBoundsWithInt_withInt_withInt_withInt_(ASViewPagerImpl *self, jint l, jint t, jint r, jint b);

__attribute__((unused)) static void ASViewPagerImpl_setCurrentItemWithInt_(ASViewPagerImpl *self, jint currentItem);

__attribute__((unused)) static jint ASViewPagerImpl_getAdjustedRightWithInt_withInt_(ASViewPagerImpl *self, jint r, jint l);

__attribute__((unused)) static void ASViewPagerImpl_createCanvas(ASViewPagerImpl *self);

__attribute__((unused)) static void ASViewPagerImpl_nativeCreateWithJavaUtilMap_(ASViewPagerImpl *self, id<JavaUtilMap> params);

__attribute__((unused)) static id ASViewPagerImpl_createViewWithJavaUtilMap_(ASViewPagerImpl *self, id<JavaUtilMap> params);

__attribute__((unused)) static jboolean ASViewPagerImpl_isRightPressedWithInt_(ASViewPagerImpl *self, jint keyCode);

__attribute__((unused)) static jboolean ASViewPagerImpl_isLeftPressedWithInt_(ASViewPagerImpl *self, jint keyCode);

__attribute__((unused)) static jint ASViewPagerImpl_getAbsXWithId_withInt_withInt_(ASViewPagerImpl *self, id eventWidget, jint x, jint y);

@interface ASViewPagerImpl_ViewPagerExt () {
 @public
  __unsafe_unretained ASViewPagerImpl *this$0_;
  ASMeasureEvent *measureFinished_;
  ASOnLayoutEvent *onLayoutEvent_;
  id<JavaUtilList> overlays_;
  jint mMaxWidth_;
  jint mMaxHeight_;
  id<JavaUtilMap> templates_;
}

@end

J2OBJC_FIELD_SETTER(ASViewPagerImpl_ViewPagerExt, measureFinished_, ASMeasureEvent *)
J2OBJC_FIELD_SETTER(ASViewPagerImpl_ViewPagerExt, onLayoutEvent_, ASOnLayoutEvent *)
J2OBJC_FIELD_SETTER(ASViewPagerImpl_ViewPagerExt, overlays_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ASViewPagerImpl_ViewPagerExt, templates_, id<JavaUtilMap>)

@interface ASViewPagerImpl_CustomPagerAdapter () {
 @public
  ASViewPagerImpl *this$0_;
}

@end

@interface ASViewPagerImpl_1 : NSObject < ADView_OnKeyListener > {
 @public
  ASViewPagerImpl *this$0_;
}

- (instancetype)initWithASViewPagerImpl:(ASViewPagerImpl *)outer$;

- (jboolean)onKeyWithADView:(ADView *)v
                    withInt:(jint)keyCode
             withADKeyEvent:(ADKeyEvent *)event;

@end

J2OBJC_EMPTY_STATIC_INIT(ASViewPagerImpl_1)

__attribute__((unused)) static void ASViewPagerImpl_1_initWithASViewPagerImpl_(ASViewPagerImpl_1 *self, ASViewPagerImpl *outer$);

__attribute__((unused)) static ASViewPagerImpl_1 *new_ASViewPagerImpl_1_initWithASViewPagerImpl_(ASViewPagerImpl *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASViewPagerImpl_1 *create_ASViewPagerImpl_1_initWithASViewPagerImpl_(ASViewPagerImpl *outer$);

@interface ASViewPagerImpl_ViewPagerPanListener : NSObject < ASViewImpl_PanCallBack > {
 @public
  ASViewPagerImpl *this$0_;
}

- (instancetype)initWithASViewPagerImpl:(ASViewPagerImpl *)outer$;

- (void)handlePanStartWithASIWidget:(id<ASIWidget>)widget
                             withId:(id)eventWidget
                            withInt:(jint)x
                            withInt:(jint)y;

- (void)handlePanDragWithASIWidget:(id<ASIWidget>)widget
                            withId:(id)eventWidget
                           withInt:(jint)x
                           withInt:(jint)y;

- (void)handlePanEndWithASIWidget:(id<ASIWidget>)widget
                           withId:(id)eventWidget
                          withInt:(jint)x
                          withInt:(jint)y;

@end

J2OBJC_EMPTY_STATIC_INIT(ASViewPagerImpl_ViewPagerPanListener)

__attribute__((unused)) static void ASViewPagerImpl_ViewPagerPanListener_initWithASViewPagerImpl_(ASViewPagerImpl_ViewPagerPanListener *self, ASViewPagerImpl *outer$);

__attribute__((unused)) static ASViewPagerImpl_ViewPagerPanListener *new_ASViewPagerImpl_ViewPagerPanListener_initWithASViewPagerImpl_(ASViewPagerImpl *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASViewPagerImpl_ViewPagerPanListener *create_ASViewPagerImpl_ViewPagerPanListener_initWithASViewPagerImpl_(ASViewPagerImpl *outer$);

J2OBJC_TYPE_LITERAL_HEADER(ASViewPagerImpl_ViewPagerPanListener)

@interface ASViewPagerImpl_CanvasImpl : NSObject < ADCanvas > {
 @public
  jboolean canvasReset_;
  jboolean requiresAttrChangeListener_;
  id<JavaUtilList> imageViews_;
  __unsafe_unretained id<ASIWidget> widget_;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)widget;

- (void)drawWithADDrawable:(ADDrawable *)mDivider;

- (void)reset;

- (id)nativeCreateImageViewWithId:(id)image;

@end

J2OBJC_EMPTY_STATIC_INIT(ASViewPagerImpl_CanvasImpl)

J2OBJC_FIELD_SETTER(ASViewPagerImpl_CanvasImpl, imageViews_, id<JavaUtilList>)

__attribute__((unused)) static void ASViewPagerImpl_CanvasImpl_initWithASIWidget_(ASViewPagerImpl_CanvasImpl *self, id<ASIWidget> widget);

__attribute__((unused)) static ASViewPagerImpl_CanvasImpl *new_ASViewPagerImpl_CanvasImpl_initWithASIWidget_(id<ASIWidget> widget) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASViewPagerImpl_CanvasImpl *create_ASViewPagerImpl_CanvasImpl_initWithASIWidget_(id<ASIWidget> widget);

J2OBJC_TYPE_LITERAL_HEADER(ASViewPagerImpl_CanvasImpl)

@interface ASViewPagerImpl_CanvasImpl_$Lambda$1 : NSObject < ADDrawable_AttributeChangeListener > {
 @public
  id val$imageView_;
}

- (void)onAttributeChangeWithNSString:(NSString *)name
                               withId:(id)value;

@end

J2OBJC_EMPTY_STATIC_INIT(ASViewPagerImpl_CanvasImpl_$Lambda$1)

__attribute__((unused)) static void ASViewPagerImpl_CanvasImpl_$Lambda$1_initWithId_(ASViewPagerImpl_CanvasImpl_$Lambda$1 *self, id capture$0);

__attribute__((unused)) static ASViewPagerImpl_CanvasImpl_$Lambda$1 *new_ASViewPagerImpl_CanvasImpl_$Lambda$1_initWithId_(id capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASViewPagerImpl_CanvasImpl_$Lambda$1 *create_ASViewPagerImpl_CanvasImpl_$Lambda$1_initWithId_(id capture$0);

@interface ASViewPagerImpl_OnPageChangeListener : NSObject < ADXViewPager_OnPageChangeListener, ASIListener > {
 @public
  id<ASIWidget> w_;
  ADView *view_;
  NSString *strValue_;
  NSString *action_;
}

- (NSString *)getAction;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action;

- (void)onPageScrolledWithInt:(jint)position
                    withFloat:(jfloat)positionOffset
                      withInt:(jint)positionOffsetPixels;

- (id<JavaUtilMap>)getOnPageScrolledEventObjWithInt:(jint)position
                                          withFloat:(jfloat)positionOffset
                                            withInt:(jint)positionOffsetPixels;

- (void)onPageSelectedWithInt:(jint)position;

- (id<JavaUtilMap>)getOnPageSelectedEventObjWithInt:(jint)position;

- (void)onPageScrollStateChangedWithInt:(jint)state;

- (id<JavaUtilMap>)getOnPageScrollStateChangedEventObjWithInt:(jint)state;

@end

J2OBJC_EMPTY_STATIC_INIT(ASViewPagerImpl_OnPageChangeListener)

J2OBJC_FIELD_SETTER(ASViewPagerImpl_OnPageChangeListener, w_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASViewPagerImpl_OnPageChangeListener, view_, ADView *)
J2OBJC_FIELD_SETTER(ASViewPagerImpl_OnPageChangeListener, strValue_, NSString *)
J2OBJC_FIELD_SETTER(ASViewPagerImpl_OnPageChangeListener, action_, NSString *)

__attribute__((unused)) static void ASViewPagerImpl_OnPageChangeListener_initWithASIWidget_withNSString_(ASViewPagerImpl_OnPageChangeListener *self, id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static ASViewPagerImpl_OnPageChangeListener *new_ASViewPagerImpl_OnPageChangeListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASViewPagerImpl_OnPageChangeListener *create_ASViewPagerImpl_OnPageChangeListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static void ASViewPagerImpl_OnPageChangeListener_initWithASIWidget_withNSString_withNSString_(ASViewPagerImpl_OnPageChangeListener *self, id<ASIWidget> w, NSString *strValue, NSString *action);

__attribute__((unused)) static ASViewPagerImpl_OnPageChangeListener *new_ASViewPagerImpl_OnPageChangeListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASViewPagerImpl_OnPageChangeListener *create_ASViewPagerImpl_OnPageChangeListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action);

J2OBJC_TYPE_LITERAL_HEADER(ASViewPagerImpl_OnPageChangeListener)

@interface ASViewPagerImpl_ViewPagerCommandBuilder () {
 @public
  ASViewPagerImpl *this$0_;
}

@end

@interface ASViewPagerImpl_ViewPagerBean () {
 @public
  ASViewPagerImpl *this$0_;
}

@end

@interface ASViewPagerImpl_ViewPagerParamsBean () {
 @public
  ASViewPagerImpl *this$0_;
}

@end

@interface ASViewPagerImpl_$Lambda$1 : NSObject < JavaLangRunnable > {
 @public
  id<ASIWidget> val$widget_;
}

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(ASViewPagerImpl_$Lambda$1)

__attribute__((unused)) static void ASViewPagerImpl_$Lambda$1_initWithASIWidget_(ASViewPagerImpl_$Lambda$1 *self, id<ASIWidget> capture$0);

__attribute__((unused)) static ASViewPagerImpl_$Lambda$1 *new_ASViewPagerImpl_$Lambda$1_initWithASIWidget_(id<ASIWidget> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASViewPagerImpl_$Lambda$1 *create_ASViewPagerImpl_$Lambda$1_initWithASIWidget_(id<ASIWidget> capture$0);

@interface ASViewPagerImpl_$Lambda$2 : NSObject < ASViewImpl_AnimationCallBack > {
 @public
  ASViewPagerImpl *this$0_;
}

- (void)animatingWithInt:(jint)tX
                 withInt:(jint)tY;

@end

J2OBJC_EMPTY_STATIC_INIT(ASViewPagerImpl_$Lambda$2)

__attribute__((unused)) static void ASViewPagerImpl_$Lambda$2_initWithASViewPagerImpl_(ASViewPagerImpl_$Lambda$2 *self, ASViewPagerImpl *outer$);

__attribute__((unused)) static ASViewPagerImpl_$Lambda$2 *new_ASViewPagerImpl_$Lambda$2_initWithASViewPagerImpl_(ASViewPagerImpl *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASViewPagerImpl_$Lambda$2 *create_ASViewPagerImpl_$Lambda$2_initWithASViewPagerImpl_(ASViewPagerImpl *outer$);

@interface ASViewPagerImpl_$Lambda$3 : NSObject < JavaLangRunnable > {
 @public
  ASViewPagerImpl *this$0_;
  jint val$currentItem_;
}

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(ASViewPagerImpl_$Lambda$3)

__attribute__((unused)) static void ASViewPagerImpl_$Lambda$3_initWithASViewPagerImpl_withInt_(ASViewPagerImpl_$Lambda$3 *self, ASViewPagerImpl *outer$, jint capture$0);

__attribute__((unused)) static ASViewPagerImpl_$Lambda$3 *new_ASViewPagerImpl_$Lambda$3_initWithASViewPagerImpl_withInt_(ASViewPagerImpl *outer$, jint capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASViewPagerImpl_$Lambda$3 *create_ASViewPagerImpl_$Lambda$3_initWithASViewPagerImpl_withInt_(ASViewPagerImpl *outer$, jint capture$0);

NSString *ASViewPagerImpl_LOCAL_NAME = @"androidx.viewpager.widget.ViewPager";
NSString *ASViewPagerImpl_GROUP_NAME = @"androidx.viewpager.widget.ViewPager";

@implementation ASViewPagerImpl

@synthesize uiView = uiView_;

- (void)loadAttributesWithNSString:(NSString *)localName {
  ASViewGroupImpl_register__WithNSString_(localName);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"currentItem"])) withTypeWithNSString:@"int"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"offscreenPageLimit"])) withTypeWithNSString:@"int"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"pageMargin"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"pageMarginDrawable"])) withTypeWithNSString:@"drawable"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"onPageScrolled"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"onPageSelected"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"onPageScrollStateChange"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"pageWidth"])) withTypeWithNSString:@"float"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"pageTitles"])) withTypeWithNSString:@"array"])) withArrayTypeWithNSString:@"resourcestring"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_gravity"])) withTypeWithNSString:@"gravity"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_isdecor"])) withTypeWithNSString:@"boolean"])) forChild]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASViewPagerImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSString:(NSString *)localname {
  ASViewPagerImpl_initWithNSString_(self, localname);
  return self;
}

- (instancetype)initWithNSString:(NSString *)groupName
                    withNSString:(NSString *)localname {
  ASViewPagerImpl_initWithNSString_withNSString_(self, groupName, localname);
  return self;
}

- (id<ASIWidget>)newInstance {
  return new_ASViewPagerImpl_initWithNSString_withNSString_(groupName_, localName_);
}

- (void)createWithASIFragment:(id<ASIFragment>)fragment
              withJavaUtilMap:(id<JavaUtilMap>)params {
  [super createWithASIFragment:fragment withJavaUtilMap:params];
  viewPager_ = new_ASViewPagerImpl_ViewPagerExt_initWithASViewPagerImpl_(self);
  ASViewPagerImpl_nativeCreateWithJavaUtilMap_(self, params);
  ASViewPagerImpl_createCanvas(self);
  ASViewGroupImpl_registerCommandConveterWithASIWidget_(self);
  ASViewPagerImpl_setWidgetOnNativeClass(self);
}

- (void)setWidgetOnNativeClass {
  ASViewPagerImpl_setWidgetOnNativeClass(self);
}

- (id)asWidget {
  return viewPager_;
}

- (jboolean)removeWithASIWidget:(id<ASIWidget>)w {
  jboolean remove = [super removeWithASIWidget:w];
  [((ADXViewPager *) nil_chk(viewPager_)) removeViewWithADView:(ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class])];
  ASViewPagerImpl_nativeRemoveViewWithASIWidget_(self, w);
  return remove;
}

- (jboolean)removeWithInt:(jint)index {
  id<ASIWidget> widget = [((id<JavaUtilList>) nil_chk(widgets_)) getWithInt:index];
  jboolean remove = [super removeWithInt:index];
  if (index + 1 <= [((ADXViewPager *) nil_chk(viewPager_)) getChildCount]) {
    [((ADXViewPager *) nil_chk(viewPager_)) removeViewAtWithInt:index];
    ASViewPagerImpl_nativeRemoveViewWithASIWidget_(self, widget);
  }
  return remove;
}

- (void)nativeRemoveViewWithASIWidget:(id<ASIWidget>)widget {
  ASViewPagerImpl_nativeRemoveViewWithASIWidget_(self, widget);
}

- (void)addWithASIWidget:(id<ASIWidget>)w
                 withInt:(jint)index {
  if (index != -2) {
    ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
    ASViewPagerImpl_createLayoutParamsWithADView_(self, view);
    if (index == -1) {
      [((ADXViewPager *) nil_chk(viewPager_)) addViewWithADView:view];
    }
    else {
      [((ADXViewPager *) nil_chk(viewPager_)) addViewWithADView:view withInt:index];
    }
  }
  ASViewGroupImpl_nativeAddViewWithId_withId_([self asNativeWidget], [((id<ASIWidget>) nil_chk(w)) asNativeWidget]);
  [super addWithASIWidget:w withInt:index];
}

- (void)createLayoutParamsWithADView:(ADView *)view {
  ASViewPagerImpl_createLayoutParamsWithADView_(self, view);
}

- (ADXViewPager_LayoutParams *)getLayoutParamsWithADView:(ADView *)view {
  return ASViewPagerImpl_getLayoutParamsWithADView_(self, view);
}

- (void)setChildAttributeWithASIWidget:(id<ASIWidget>)w
                 withASWidgetAttribute:(ASWidgetAttribute *)key
                          withNSString:(NSString *)strValue
                                withId:(id)objValue {
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  ADXViewPager_LayoutParams *layoutParams = ASViewPagerImpl_getLayoutParamsWithADView_(self, view);
  ASViewGroupImpl_setChildAttributeWithASIWidget_withASWidgetAttribute_withId_withId_(w, key, objValue, layoutParams);
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"layout_width", @"layout_height", @"layout_gravity", @"layout_isdecor" }, 4)) {
    case 0:
    ((ADXViewPager_LayoutParams *) nil_chk(layoutParams))->width_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
    break;
    case 1:
    ((ADXViewPager_LayoutParams *) nil_chk(layoutParams))->height_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
    break;
    case 2:
    {
      ((ADXViewPager_LayoutParams *) nil_chk(layoutParams))->gravity_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
    }
    break;
    case 3:
    {
      ((ADXViewPager_LayoutParams *) nil_chk(layoutParams))->isDecor_ = [((JavaLangBoolean *) nil_chk(((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class])))) booleanValue];
    }
    break;
    default:
    break;
  }
  [((ADView *) nil_chk(view)) setLayoutParamsWithADViewGroup_LayoutParams:layoutParams];
}

- (id)getChildAttributeWithASIWidget:(id<ASIWidget>)w
               withASWidgetAttribute:(ASWidgetAttribute *)key {
  id attributeValue = ASViewGroupImpl_getChildAttributeWithASIWidget_withASWidgetAttribute_(w, key);
  if (attributeValue != nil) {
    return attributeValue;
  }
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  ADXViewPager_LayoutParams *layoutParams = ASViewPagerImpl_getLayoutParamsWithADView_(self, view);
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"layout_width", @"layout_height" }, 2)) {
    case 0:
    return JavaLangInteger_valueOfWithInt_(((ADXViewPager_LayoutParams *) nil_chk(layoutParams))->width_);
    case 1:
    return JavaLangInteger_valueOfWithInt_(((ADXViewPager_LayoutParams *) nil_chk(layoutParams))->height_);
  }
  return nil;
}

- (IOSClass *)getViewClass {
  return ASViewPagerImpl_ViewPagerExt_class_();
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue
                withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  ASViewGroupImpl_setAttributeWithASIWidget_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
  id nativeWidget = [self asNativeWidget];
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"currentItem", @"offscreenPageLimit", @"pageMargin", @"pageMarginDrawable", @"onPageScrolled", @"onPageSelected", @"onPageScrollStateChange", @"pageWidth", @"pageTitles" }, 9)) {
    case 0:
    {
      ASViewPagerImpl_setCurrentItemWithInt_(self, [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]);
    }
    break;
    case 1:
    {
      [((ADXViewPager *) nil_chk(viewPager_)) setOffscreenPageLimitWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 2:
    {
      [((ADXViewPager *) nil_chk(viewPager_)) setPageMarginWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 3:
    {
      [((ADXViewPager *) nil_chk(viewPager_)) setPageMarginDrawableWithADDrawable:(ADDrawable *) cast_chk(objValue, [ADDrawable class])];
    }
    break;
    case 4:
    {
      if ([objValue isKindOfClass:[NSString class]]) {
        [((ADXViewPager *) nil_chk(viewPager_)) setOnPageChangeListenerWithADXViewPager_OnPageChangeListener:new_ASViewPagerImpl_OnPageChangeListener_initWithASIWidget_withNSString_withNSString_(self, strValue, @"onPageScrolled")];
      }
      else {
        [((ADXViewPager *) nil_chk(viewPager_)) setOnPageChangeListenerWithADXViewPager_OnPageChangeListener:(id<ADXViewPager_OnPageChangeListener>) cast_check(objValue, ADXViewPager_OnPageChangeListener_class_())];
      }
    }
    break;
    case 5:
    {
      if ([objValue isKindOfClass:[NSString class]]) {
        [((ADXViewPager *) nil_chk(viewPager_)) setOnPageChangeListenerWithADXViewPager_OnPageChangeListener:new_ASViewPagerImpl_OnPageChangeListener_initWithASIWidget_withNSString_withNSString_(self, strValue, @"onPageSelected")];
      }
      else {
        [((ADXViewPager *) nil_chk(viewPager_)) setOnPageChangeListenerWithADXViewPager_OnPageChangeListener:(id<ADXViewPager_OnPageChangeListener>) cast_check(objValue, ADXViewPager_OnPageChangeListener_class_())];
      }
    }
    break;
    case 6:
    {
      if ([objValue isKindOfClass:[NSString class]]) {
        [((ADXViewPager *) nil_chk(viewPager_)) setOnPageChangeListenerWithADXViewPager_OnPageChangeListener:new_ASViewPagerImpl_OnPageChangeListener_initWithASIWidget_withNSString_withNSString_(self, strValue, @"onPageScrollStateChange")];
      }
      else {
        [((ADXViewPager *) nil_chk(viewPager_)) setOnPageChangeListenerWithADXViewPager_OnPageChangeListener:(id<ADXViewPager_OnPageChangeListener>) cast_check(objValue, ADXViewPager_OnPageChangeListener_class_())];
      }
    }
    break;
    case 7:
    {
      ASViewPagerImpl_setPageWidthWithId_(self, objValue);
    }
    break;
    case 8:
    {
      ASViewPagerImpl_setPageTitlesWithId_(self, objValue);
    }
    break;
    default:
    break;
  }
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
              withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  id attributeValue = ASViewGroupImpl_getAttributeWithASIWidget_withASWidgetAttribute_withASILifeCycleDecorator_(self, key, decorator);
  if (attributeValue != nil) {
    return attributeValue;
  }
  id nativeWidget = [self asNativeWidget];
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){  }, 0)) {
  }
  return nil;
}

- (id)asNativeWidget {
  return uiView_;
}

- (jboolean)checkIosVersionWithNSString:(NSString *)v {
  return ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedDescending);
}

- (void)requestLayout {
  if ([self isInitialised]) {
    ASViewImpl_requestLayoutWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (void)invalidate {
  if ([self isInitialised]) {
    ASViewImpl_invalidateWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (void)initialized {
  [super initialized];
  [((ADXPagerAdapter *) nil_chk([((ADXViewPager *) nil_chk(viewPager_)) getAdapter])) notifyDataSetChanged];
}

- (void)addItemToParentWithInt:(jint)index
                  withNSString:(NSString *)id_
               withASLoopParam:(ASLoopParam *)childModel {
}

- (void)setPageTitlesWithId:(id)objValue {
  ASViewPagerImpl_setPageTitlesWithId_(self, objValue);
}

- (void)setPageWidthWithId:(id)objValue {
  ASViewPagerImpl_setPageWidthWithId_(self, objValue);
}

- (void)addListeners {
  ASViewPagerImpl_addListeners(self);
}

- (void)addOnKeyListener {
  ASViewPagerImpl_addOnKeyListener(self);
}

- (void)smoothScrollToWithInt:(jint)x
                      withInt:(jint)y
                      withInt:(jint)velocity {
  ASViewPagerImpl_smoothScrollToWithInt_withInt_withInt_(self, x, y, velocity);
}

- (void)scrollToWithInt:(jint)x
                withInt:(jint)y {
  ASViewPagerImpl_scrollToWithInt_withInt_(self, x, y);
}

- (jint)getScrollX {
  return ASViewPagerImpl_getScrollX(self);
}

- (void)handlePanStartWithInt:(jint)eventX {
  ASViewPagerImpl_handlePanStartWithInt_(self, eventX);
}

- (void)handlePanEndWithInt:(jint)eventX {
  ASViewPagerImpl_handlePanEndWithInt_(self, eventX);
}

- (void)handlePanDragWithInt:(jint)eventX {
  ASViewPagerImpl_handlePanDragWithInt_(self, eventX);
}

- (void)updateBoundsWithInt:(jint)l
                    withInt:(jint)t
                    withInt:(jint)r
                    withInt:(jint)b {
  ASViewPagerImpl_updateBoundsWithInt_withInt_withInt_withInt_(self, l, t, r, b);
}

- (void)setCurrentItemWithInt:(jint)currentItem {
  ASViewPagerImpl_setCurrentItemWithInt_(self, currentItem);
}

- (jint)getAdjustedRightWithInt:(jint)r
                        withInt:(jint)l {
  return ASViewPagerImpl_getAdjustedRightWithInt_withInt_(self, r, l);
}

- (void)createCanvas {
  ASViewPagerImpl_createCanvas(self);
}

- (void)setIdWithNSString:(NSString *)id_ {
  if (id_ != nil && ![id_ isEqual:@""]) {
    [super setIdWithNSString:id_];
    [((ADXViewPager *) nil_chk(viewPager_)) setIdWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([self quickConvertWithId:id_ withNSString:@"id"], [JavaLangInteger class]))) intValue]];
  }
}

- (void)setVisibleWithBoolean:(jboolean)b {
  [((ADView *) nil_chk(((ADView *) cast_chk([self asWidget], [ADView class])))) setVisibilityWithInt:b ? ADView_VISIBLE : ADView_GONE];
}

- (id)getPluginWithNSString:(NSString *)plugin {
  return [((id<ASIAttributable>) nil_chk(ASWidgetFactory_getAttributableWithNSString_(plugin))) newInstanceWithASIWidget:self];
}

- (ASViewPagerImpl_ViewPagerBean *)getBean {
  if (bean_ == nil) {
    bean_ = new_ASViewPagerImpl_ViewPagerBean_initWithASViewPagerImpl_(self);
  }
  return bean_;
}

- (ASViewPagerImpl_ViewPagerCommandBuilder *)getBuilder {
  if (builder_ == nil) {
    builder_ = new_ASViewPagerImpl_ViewPagerCommandBuilder_initWithASViewPagerImpl_(self);
  }
  return builder_;
}

- (ASViewPagerImpl_ViewPagerParamsBean *)getParamsBean {
  if (paramsBean_ == nil) {
    paramsBean_ = new_ASViewPagerImpl_ViewPagerParamsBean_initWithASViewPagerImpl_(self);
  }
  return paramsBean_;
}

- (ASViewPagerImpl_ViewPagerCommandParamsBuilder *)getParamsBuilder {
  if (paramsBuilder_ == nil) {
    paramsBuilder_ = new_ASViewPagerImpl_ViewPagerCommandParamsBuilder_initWithASViewPagerImpl_(self);
  }
  return paramsBuilder_;
}

- (void)nativeCreateWithJavaUtilMap:(id<JavaUtilMap>)params {
  ASViewPagerImpl_nativeCreateWithJavaUtilMap_(self, params);
}

- (id)createViewWithJavaUtilMap:(id<JavaUtilMap>)params {
  return ASViewPagerImpl_createViewWithJavaUtilMap_(self, params);
}

- (jboolean)isRightPressedWithInt:(jint)keyCode {
  return ASViewPagerImpl_isRightPressedWithInt_(self, keyCode);
}

- (jboolean)isLeftPressedWithInt:(jint)keyCode {
  return ASViewPagerImpl_isLeftPressedWithInt_(self, keyCode);
}

- (jint)getAbsXWithId:(id)eventWidget
              withInt:(jint)x
              withInt:(jint)y {
  return ASViewPagerImpl_getAbsXWithId_withInt_withInt_(self, eventWidget, x, y);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 13, -1, -1, -1, -1 },
    { NULL, "LADXViewPager_LayoutParams;", 0x2, 14, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x101, 23, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 24, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 26, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 28, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 29, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 31, 32, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 33, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 34, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 35, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 36, 37, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 38, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 39, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 40, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 41, 42, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 43, 1, -1, -1, -1, -1 },
    { NULL, "LASViewPagerImpl_ViewPagerBean;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASViewPagerImpl_ViewPagerCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASViewPagerImpl_ViewPagerParamsBean;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASViewPagerImpl_ViewPagerCommandParamsBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 44, 45, -1, 46, -1, -1 },
    { NULL, "LNSObject;", 0x102, 47, 45, -1, 48, -1, -1 },
    { NULL, "Z", 0x2, 49, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 50, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x102, 51, 52, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(loadAttributesWithNSString:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(initWithNSString:);
  methods[3].selector = @selector(initWithNSString:withNSString:);
  methods[4].selector = @selector(newInstance);
  methods[5].selector = @selector(createWithASIFragment:withJavaUtilMap:);
  methods[6].selector = @selector(setWidgetOnNativeClass);
  methods[7].selector = @selector(asWidget);
  methods[8].selector = @selector(removeWithASIWidget:);
  methods[9].selector = @selector(removeWithInt:);
  methods[10].selector = @selector(nativeRemoveViewWithASIWidget:);
  methods[11].selector = @selector(addWithASIWidget:withInt:);
  methods[12].selector = @selector(createLayoutParamsWithADView:);
  methods[13].selector = @selector(getLayoutParamsWithADView:);
  methods[14].selector = @selector(setChildAttributeWithASIWidget:withASWidgetAttribute:withNSString:withId:);
  methods[15].selector = @selector(getChildAttributeWithASIWidget:withASWidgetAttribute:);
  methods[16].selector = @selector(getViewClass);
  methods[17].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[18].selector = @selector(getAttributeWithASWidgetAttribute:withASILifeCycleDecorator:);
  methods[19].selector = @selector(asNativeWidget);
  methods[20].selector = @selector(checkIosVersionWithNSString:);
  methods[21].selector = @selector(requestLayout);
  methods[22].selector = @selector(invalidate);
  methods[23].selector = @selector(initialized);
  methods[24].selector = @selector(addItemToParentWithInt:withNSString:withASLoopParam:);
  methods[25].selector = @selector(setPageTitlesWithId:);
  methods[26].selector = @selector(setPageWidthWithId:);
  methods[27].selector = @selector(addListeners);
  methods[28].selector = @selector(addOnKeyListener);
  methods[29].selector = @selector(smoothScrollToWithInt:withInt:withInt:);
  methods[30].selector = @selector(scrollToWithInt:withInt:);
  methods[31].selector = @selector(getScrollX);
  methods[32].selector = @selector(handlePanStartWithInt:);
  methods[33].selector = @selector(handlePanEndWithInt:);
  methods[34].selector = @selector(handlePanDragWithInt:);
  methods[35].selector = @selector(updateBoundsWithInt:withInt:withInt:withInt:);
  methods[36].selector = @selector(setCurrentItemWithInt:);
  methods[37].selector = @selector(getAdjustedRightWithInt:withInt:);
  methods[38].selector = @selector(createCanvas);
  methods[39].selector = @selector(setIdWithNSString:);
  methods[40].selector = @selector(setVisibleWithBoolean:);
  methods[41].selector = @selector(getPluginWithNSString:);
  methods[42].selector = @selector(getBean);
  methods[43].selector = @selector(getBuilder);
  methods[44].selector = @selector(getParamsBean);
  methods[45].selector = @selector(getParamsBuilder);
  methods[46].selector = @selector(nativeCreateWithJavaUtilMap:);
  methods[47].selector = @selector(createViewWithJavaUtilMap:);
  methods[48].selector = @selector(isRightPressedWithInt:);
  methods[49].selector = @selector(isLeftPressedWithInt:);
  methods[50].selector = @selector(getAbsXWithId:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "uiView_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "canvas_", "LADCanvas;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "LOCAL_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 53, -1, -1 },
    { "GROUP_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 54, -1, -1 },
    { "viewPager_", "LADXViewPager;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "pageWidth_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "pageTitles_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 55, -1 },
    { "animationDurationInMs_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "currentX_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lastValue_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "startX_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "prevWidth_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "prevHeight_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "builder_", "LASViewPagerImpl_ViewPagerCommandBuilder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bean_", "LASViewPagerImpl_ViewPagerBean;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "paramsBuilder_", "LASViewPagerImpl_ViewPagerCommandParamsBuilder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "paramsBean_", "LASViewPagerImpl_ViewPagerParamsBean;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "loadAttributes", "LNSString;", "LNSString;LNSString;", "create", "LASIFragment;LJavaUtilMap;", "(Lcom/ashera/core/IFragment;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "remove", "LASIWidget;", "I", "nativeRemoveView", "add", "LASIWidget;I", "createLayoutParams", "LADView;", "getLayoutParams", "setChildAttribute", "LASIWidget;LASWidgetAttribute;LNSString;LNSObject;", "getChildAttribute", "LASIWidget;LASWidgetAttribute;", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;LASILifeCycleDecorator;", "getAttribute", "LASWidgetAttribute;LASILifeCycleDecorator;", "checkIosVersion", "addItemToParent", "ILNSString;LASLoopParam;", "setPageTitles", "LNSObject;", "setPageWidth", "smoothScrollTo", "III", "scrollTo", "II", "handlePanStart", "handlePanEnd", "handlePanDrag", "updateBounds", "IIII", "setCurrentItem", "getAdjustedRight", "setId", "setVisible", "Z", "getPlugin", "nativeCreate", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "createView", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)Ljava/lang/Object;", "isRightPressed", "isLeftPressed", "getAbsX", "LNSObject;II", &ASViewPagerImpl_LOCAL_NAME, &ASViewPagerImpl_GROUP_NAME, "Ljava/util/List<Ljava/lang/String;>;", "LASViewPagerImpl_ViewPagerExt;LASViewPagerImpl_CustomPagerAdapter;LASViewPagerImpl_ViewPagerPanListener;LASViewPagerImpl_CanvasImpl;LASViewPagerImpl_OnPageChangeListener;LASViewPagerImpl_ViewPagerCommandBuilder;LASViewPagerImpl_ViewPagerBean;LASViewPagerImpl_ViewPagerParamsBean;LASViewPagerImpl_ViewPagerCommandParamsBuilder;" };
  static const J2ObjcClassInfo _ASViewPagerImpl = { "ViewPagerImpl", "com.ashera.viewpager", ptrTable, methods, fields, 7, 0x1, 51, 17, -1, 56, -1, -1, -1 };
  return &_ASViewPagerImpl;
}

@end

void ASViewPagerImpl_init(ASViewPagerImpl *self) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, ASViewPagerImpl_GROUP_NAME, ASViewPagerImpl_LOCAL_NAME);
  self->pageWidth_ = 1.0f;
  self->animationDurationInMs_ = 200;
  self->currentX_ = -1;
  self->startX_ = -1;
  self->prevWidth_ = -1;
  self->prevHeight_ = -1;
}

ASViewPagerImpl *new_ASViewPagerImpl_init() {
  J2OBJC_NEW_IMPL(ASViewPagerImpl, init)
}

ASViewPagerImpl *create_ASViewPagerImpl_init() {
  J2OBJC_CREATE_IMPL(ASViewPagerImpl, init)
}

void ASViewPagerImpl_initWithNSString_(ASViewPagerImpl *self, NSString *localname) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, ASViewPagerImpl_GROUP_NAME, localname);
  self->pageWidth_ = 1.0f;
  self->animationDurationInMs_ = 200;
  self->currentX_ = -1;
  self->startX_ = -1;
  self->prevWidth_ = -1;
  self->prevHeight_ = -1;
}

ASViewPagerImpl *new_ASViewPagerImpl_initWithNSString_(NSString *localname) {
  J2OBJC_NEW_IMPL(ASViewPagerImpl, initWithNSString_, localname)
}

ASViewPagerImpl *create_ASViewPagerImpl_initWithNSString_(NSString *localname) {
  J2OBJC_CREATE_IMPL(ASViewPagerImpl, initWithNSString_, localname)
}

void ASViewPagerImpl_initWithNSString_withNSString_(ASViewPagerImpl *self, NSString *groupName, NSString *localname) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, groupName, localname);
  self->pageWidth_ = 1.0f;
  self->animationDurationInMs_ = 200;
  self->currentX_ = -1;
  self->startX_ = -1;
  self->prevWidth_ = -1;
  self->prevHeight_ = -1;
}

ASViewPagerImpl *new_ASViewPagerImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname) {
  J2OBJC_NEW_IMPL(ASViewPagerImpl, initWithNSString_withNSString_, groupName, localname)
}

ASViewPagerImpl *create_ASViewPagerImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname) {
  J2OBJC_CREATE_IMPL(ASViewPagerImpl, initWithNSString_withNSString_, groupName, localname)
}

void ASViewPagerImpl_setWidgetOnNativeClass(ASViewPagerImpl *self) {
  ((ASUIView*) [self asNativeWidget]).widget = self;
}

void ASViewPagerImpl_nativeRemoveViewWithASIWidget_(ASViewPagerImpl *self, id<ASIWidget> widget) {
  ADLayoutTransition *layoutTransition = [((ADXViewPager *) nil_chk(self->viewPager_)) getLayoutTransition];
  if (layoutTransition != nil && ([layoutTransition isTransitionTypeEnabledWithInt:ADLayoutTransition_CHANGE_DISAPPEARING] || [layoutTransition isTransitionTypeEnabledWithInt:ADLayoutTransition_DISAPPEARING])) {
    [self addToBufferedRunnablesWithJavaLangRunnable:new_ASViewPagerImpl_$Lambda$1_initWithASIWidget_(widget)];
  }
  else {
    ASViewGroupImpl_nativeRemoveViewWithASIWidget_(widget);
  }
}

void ASViewPagerImpl_createLayoutParamsWithADView_(ASViewPagerImpl *self, ADView *view) {
  ADXViewPager_LayoutParams *layoutParams = (ADXViewPager_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADXViewPager_LayoutParams class]);
  layoutParams = (ADXViewPager_LayoutParams *) cast_chk([view getLayoutParams], [ADXViewPager_LayoutParams class]);
  if (layoutParams == nil) {
    layoutParams = new_ADXViewPager_LayoutParams_init();
    [view setLayoutParamsWithADViewGroup_LayoutParams:layoutParams];
  }
  else {
    layoutParams->height_ = -1;
    layoutParams->width_ = -1;
  }
}

ADXViewPager_LayoutParams *ASViewPagerImpl_getLayoutParamsWithADView_(ASViewPagerImpl *self, ADView *view) {
  return (ADXViewPager_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADXViewPager_LayoutParams class]);
}

void ASViewPagerImpl_setPageTitlesWithId_(ASViewPagerImpl *self, id objValue) {
  self->pageTitles_ = (id<JavaUtilList>) cast_check(objValue, JavaUtilList_class_());
}

void ASViewPagerImpl_setPageWidthWithId_(ASViewPagerImpl *self, id objValue) {
  self->pageWidth_ = [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class]))) floatValue];
}

void ASViewPagerImpl_addListeners(ASViewPagerImpl *self) {
  ASViewPagerImpl_addOnKeyListener(self);
  ASViewPagerImpl_ViewPagerPanListener *listener = new_ASViewPagerImpl_ViewPagerPanListener_initWithASViewPagerImpl_(self);
  ASViewImpl_addPanListenerWithASIWidget_withId_withASViewImpl_PanCallBack_(self, [self asNativeWidget], listener);
}

void ASViewPagerImpl_addOnKeyListener(ASViewPagerImpl *self) {
  [self setAttributeWithNSString:@"onKey" withId:new_ASViewPagerImpl_1_initWithASViewPagerImpl_(self) withBoolean:true];
}

void ASViewPagerImpl_smoothScrollToWithInt_withInt_withInt_(ASViewPagerImpl *self, jint x, jint y, jint velocity) {
  jint currentX = ASViewImpl_getXWithId_([self asNativeWidget]);
  if (-currentX == x) {
    return;
  }
  self->currentX_ = currentX;
  [((id<ASIFragment>) nil_chk([self getFragment])) remeasure];
  ASViewImpl_updateBoundsXWithId_withInt_([self asNativeWidget], currentX);
  self->currentX_ = -1;
  ASViewImpl_translateWithAnimationWithId_withInt_withInt_withInt_withASViewImpl_AnimationCallBack_([self asNativeWidget], -x, ASViewImpl_getYWithId_([self asNativeWidget]), self->animationDurationInMs_, new_ASViewPagerImpl_$Lambda$2_initWithASViewPagerImpl_(self));
}

void ASViewPagerImpl_scrollToWithInt_withInt_(ASViewPagerImpl *self, jint x, jint y) {
  ASViewImpl_updateBoundsXWithId_withInt_([self asNativeWidget], -x);
}

jint ASViewPagerImpl_getScrollX(ASViewPagerImpl *self) {
  if (self->currentX_ != -1) {
    return -self->currentX_;
  }
  jint currentX = ASViewImpl_getXWithId_([self asNativeWidget]);
  return -currentX;
}

void ASViewPagerImpl_handlePanStartWithInt_(ASViewPagerImpl *self, jint eventX) {
  self->lastValue_ = eventX;
  self->startX_ = eventX;
  if (![((ADXViewPager *) nil_chk(self->viewPager_)) isEmpty]) {
    [((ADXViewPager *) nil_chk(self->viewPager_)) beginFakeDrag];
  }
}

void ASViewPagerImpl_handlePanEndWithInt_(ASViewPagerImpl *self, jint eventX) {
  self->startX_ = -1;
  if (![((ADXViewPager *) nil_chk(self->viewPager_)) isEmpty]) {
    [((ADXViewPager *) nil_chk(self->viewPager_)) endFakeDrag];
  }
}

void ASViewPagerImpl_handlePanDragWithInt_(ASViewPagerImpl *self, jint eventX) {
  if (self->startX_ != -1) {
    jint delta = eventX - self->lastValue_;
    if (![((ADXViewPager *) nil_chk(self->viewPager_)) isEmpty]) {
      [((ADXViewPager *) nil_chk(self->viewPager_)) fakeDragByWithFloat:delta];
    }
    self->lastValue_ = eventX;
  }
}

void ASViewPagerImpl_updateBoundsWithInt_withInt_withInt_withInt_(ASViewPagerImpl *self, jint l, jint t, jint r, jint b) {
  if ([((ADXViewPager *) nil_chk(self->viewPager_)) getCurrentItem] != 0 && self->currentX_ == -1) {
    [((ADXViewPager *) nil_chk(self->viewPager_)) scrollToItemWithInt:[self->viewPager_ getCurrentItem] withBoolean:false withInt:0 withBoolean:false];
  }
  if ([self isInitialised] && ((self->prevWidth_ != -1 && self->prevWidth_ != (r - l)) || (self->prevHeight_ != -1 && self->prevHeight_ != (b - t)))) {
    ((ASViewPagerImpl_CanvasImpl *) nil_chk(((ASViewPagerImpl_CanvasImpl *) cast_chk(self->canvas_, [ASViewPagerImpl_CanvasImpl class]))))->canvasReset_ = true;
    [((id<ADCanvas>) nil_chk(self->canvas_)) reset];
    ((ASViewPagerImpl_CanvasImpl *) nil_chk(((ASViewPagerImpl_CanvasImpl *) cast_chk(self->canvas_, [ASViewPagerImpl_CanvasImpl class]))))->canvasReset_ = false;
  }
  self->prevWidth_ = r - l;
  self->prevHeight_ = b - t;
}

void ASViewPagerImpl_setCurrentItemWithInt_(ASViewPagerImpl *self, jint currentItem) {
  if ([self isInitialised]) {
    [((ADXViewPager *) nil_chk(self->viewPager_)) setCurrentItemWithInt:currentItem];
  }
  else {
    [((ADXViewPager *) nil_chk(self->viewPager_)) setVisibilityWithInt:ADView_INVISIBLE];
    [((ADXViewPager *) nil_chk(self->viewPager_)) postWithJavaLangRunnable:new_ASViewPagerImpl_$Lambda$3_initWithASViewPagerImpl_withInt_(self, currentItem)];
  }
}

jint ASViewPagerImpl_getAdjustedRightWithInt_withInt_(ASViewPagerImpl *self, jint r, jint l) {
  return ([((id<JavaUtilList>) nil_chk(self->dataList_)) size] * (r - l)) + ([((ADXViewPager *) nil_chk(self->viewPager_)) getPageMargin] * 2 * [((ADXViewPager *) nil_chk(self->viewPager_)) getChildCount]);
}

void ASViewPagerImpl_createCanvas(ASViewPagerImpl *self) {
  self->canvas_ = new_ASViewPagerImpl_CanvasImpl_initWithASIWidget_(self);
}

void ASViewPagerImpl_nativeCreateWithJavaUtilMap_(ASViewPagerImpl *self, id<JavaUtilMap> params) {
  [((ADXViewPager *) nil_chk(self->viewPager_)) setAdapterWithADXPagerAdapter:new_ASViewPagerImpl_CustomPagerAdapter_initWithASViewPagerImpl_(self)];
  self->uiView_ = ASViewPagerImpl_createViewWithJavaUtilMap_(self, params);
  ASViewPagerImpl_addListeners(self);
}

id ASViewPagerImpl_createViewWithJavaUtilMap_(ASViewPagerImpl *self, id<JavaUtilMap> params) {
  ASUIView* uiView = [ASUIView new];
  uiView.backgroundColor = [UIColor clearColor];
  return uiView;
}

jboolean ASViewPagerImpl_isRightPressedWithInt_(ASViewPagerImpl *self, jint keyCode) {
  return false;
}

jboolean ASViewPagerImpl_isLeftPressedWithInt_(ASViewPagerImpl *self, jint keyCode) {
  return false;
}

jint ASViewPagerImpl_getAbsXWithId_withInt_withInt_(ASViewPagerImpl *self, id eventWidget, jint x, jint y) {
  return [self->uiView_ convertRect:CGRectMake(x, y, ((UIView*)self->uiView_).frame.size.width, ((UIView*)self->uiView_).frame.size.height) toView:nil].origin.x;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewPagerImpl)

@implementation ASViewPagerImpl_ViewPagerExt

- (id<ASIWidget>)getWidget {
  return this$0_;
}

- (void)setMaxWidthWithInt:(jint)width {
  mMaxWidth_ = width;
}

- (void)setMaxHeightWithInt:(jint)height {
  mMaxHeight_ = height;
}

- (jint)getMaxWidth {
  return mMaxWidth_;
}

- (jint)getMaxHeight {
  return mMaxHeight_;
}

- (instancetype)initWithASViewPagerImpl:(ASViewPagerImpl *)outer$ {
  ASViewPagerImpl_ViewPagerExt_initWithASViewPagerImpl_(self, outer$);
  return self;
}

- (void)onMeasureWithInt:(jint)widthMeasureSpec
                 withInt:(jint)heightMeasureSpec {
  if (mMaxWidth_ > 0) {
    widthMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(mMaxWidth_, ADView_MeasureSpec_AT_MOST);
  }
  if (mMaxHeight_ > 0) {
    heightMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(mMaxHeight_, ADView_MeasureSpec_AT_MOST);
  }
  [super onMeasureWithInt:widthMeasureSpec withInt:heightMeasureSpec];
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setWidthWithInt:[self getMeasuredWidth]];
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setHeightWithInt:[self getMeasuredHeight]];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, measureFinished) withASWidgetEvent:measureFinished_];
  }
}

- (void)onLayoutWithBoolean:(jboolean)changed
                    withInt:(jint)l
                    withInt:(jint)t
                    withInt:(jint)r
                    withInt:(jint)b {
  [super onLayoutWithBoolean:changed withInt:l withInt:t withInt:r withInt:b];
  ASViewImpl_setDrawableBoundsWithASIWidget_withInt_withInt_withInt_withInt_(this$0_, l, t, r, b);
  if (![self isOverlay]) {
    ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], l, t, ASViewPagerImpl_getAdjustedRightWithInt_withInt_(this$0_, r, l), b);
    ASViewPagerImpl_updateBoundsWithInt_withInt_withInt_withInt_(this$0_, l, t, r, b);
  }
  [this$0_ replayBufferedEvents];
  [((id<ADCanvas>) nil_chk(this$0_->canvas_)) reset];
  [self onDrawWithADCanvas:this$0_->canvas_];
  ASViewImpl_redrawDrawablesWithASIWidget_(this$0_);
  overlays_ = ASViewImpl_drawOverlayWithASIWidget_withJavaUtilList_(this$0_, overlays_);
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setBWithInt:b];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setLWithInt:l];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setRWithInt:r];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setTWithInt:t];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setChangedWithBoolean:changed];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, onLayout) withASWidgetEvent:onLayoutEvent_];
  }
  if ([this$0_ isInvalidateOnFrameChange] && [this$0_ isInitialised]) {
    [this$0_ invalidate];
  }
}

- (void)executeWithNSString:(NSString *)method
          withNSObjectArray:(IOSObjectArray *)canvas {
}

- (void)updateMeasuredDimensionWithInt:(jint)width
                               withInt:(jint)height {
  [self setMeasuredDimensionWithInt:width withInt:height];
}

- (id<ASILifeCycleDecorator>)newInstanceWithASIWidget:(id<ASIWidget>)widget {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id<JavaUtilList>)getMethods {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)initialized {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)drawableStateChanged {
  [super drawableStateChanged];
  if (![this$0_ isWidgetDisposed]) {
    ASViewImpl_drawableStateChangedWithASIWidget_(this$0_);
  }
}

- (ADView *)inflateViewWithNSString:(NSString *)layout {
  if (templates_ == nil) {
    templates_ = new_JavaUtilHashMap_init();
  }
  id<ASIWidget> template_ = [templates_ getWithId:layout];
  if (template_ == nil) {
    template_ = (id<ASIWidget>) cast_check([this$0_ quickConvertWithId:layout withNSString:@"template"], ASIWidget_class_());
    (void) [((id<JavaUtilMap>) nil_chk(templates_)) putWithId:layout withId:template_];
  }
  id<ASIWidget> widget = [((id<ASIWidget>) nil_chk(template_)) loadLazyWidgetsWithASHasWidgets:this$0_];
  return (ADView *) cast_chk([((id<ASIWidget>) nil_chk(widget)) asWidget], [ADView class]);
}

- (void)remeasure {
  if ([this$0_ getFragment] != nil) {
    [((id<ASIFragment>) nil_chk([this$0_ getFragment])) remeasure];
  }
}

- (void)removeFromParent {
  [((id<ASHasWidgets>) nil_chk([this$0_ getParent])) removeWithASIWidget:this$0_];
}

- (void)getLocationOnScreenWithIntArray:(IOSIntArray *)appScreenLocation {
  *IOSIntArray_GetRef(nil_chk(appScreenLocation), 0) = ASViewImpl_getLocationXOnScreenWithId_([this$0_ asNativeWidget]);
  *IOSIntArray_GetRef(appScreenLocation, 1) = ASViewImpl_getLocationYOnScreenWithId_([this$0_ asNativeWidget]);
}

- (void)getWindowVisibleDisplayFrameWithADRect:(ADRect *)displayFrame {
  ((ADRect *) nil_chk(displayFrame))->left_ = ASViewImpl_getLocationXOnScreenWithId_([this$0_ asNativeWidget]);
  displayFrame->top_ = ASViewImpl_getLocationYOnScreenWithId_([this$0_ asNativeWidget]);
  displayFrame->right_ = displayFrame->left_ + [self getWidth];
  displayFrame->bottom_ = displayFrame->top_ + [self getHeight];
}

- (void)offsetTopAndBottomWithInt:(jint)offset {
  [super offsetTopAndBottomWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)offsetLeftAndRightWithInt:(jint)offset {
  [super offsetLeftAndRightWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)setMyAttributeWithNSString:(NSString *)name
                            withId:(id)value {
  if ([((NSString *) nil_chk(name)) isEqual:@"state0"]) {
    [self setState0WithId:value];
    return;
  }
  if ([name isEqual:@"state1"]) {
    [self setState1WithId:value];
    return;
  }
  if ([name isEqual:@"state2"]) {
    [self setState2WithId:value];
    return;
  }
  if ([name isEqual:@"state3"]) {
    [self setState3WithId:value];
    return;
  }
  if ([name isEqual:@"state4"]) {
    [self setState4WithId:value];
    return;
  }
  [this$0_ setAttributeWithNSString:name withId:value withBoolean:!([value isKindOfClass:[NSString class]])];
}

- (void)setVisibilityWithInt:(jint)visibility {
  [super setVisibilityWithInt:visibility];
  ASViewImpl_nativeSetVisibilityWithId_withBoolean_([this$0_ asNativeWidget], visibility != ADView_VISIBLE);
}

- (void)smoothScrollToWithInt:(jint)x
                      withInt:(jint)y
                      withInt:(jint)velocity {
  ASViewPagerImpl_smoothScrollToWithInt_withInt_withInt_(this$0_, x, y, velocity);
}

- (jint)getScrollX {
  return ASViewPagerImpl_getScrollX(this$0_);
}

- (void)scrollToWithInt:(jint)x
                withInt:(jint)y {
  ASViewPagerImpl_scrollToWithInt_withInt_(this$0_, x, y);
}

- (void)setState0WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 0, value);
}

- (void)setState1WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 1, value);
}

- (void)setState2WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 2, value);
}

- (void)setState3WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 3, value);
}

- (void)setState4WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 4, value);
}

- (void)state0 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 0);
}

- (void)state1 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 1);
}

- (void)state2 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 2);
}

- (void)state3 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 3);
}

- (void)state4 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 4);
}

- (void)stateYes {
  ASViewImpl_stateYesWithASIWidget_(this$0_);
}

- (void)stateNo {
  ASViewImpl_stateNoWithASIWidget_(this$0_);
}

- (void)endViewTransitionWithADView:(ADView *)view {
  [super endViewTransitionWithADView:view];
  [this$0_ runBufferedRunnables];
}

- (void)__javaClone:(ASViewPagerImpl_ViewPagerExt *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 5, -1, -1, -1, -1 },
    { NULL, "LASILifeCycleDecorator;", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 15, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 23, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 29, 30, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 31, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 35, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 36, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 37, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 38, 39, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getWidget);
  methods[1].selector = @selector(setMaxWidthWithInt:);
  methods[2].selector = @selector(setMaxHeightWithInt:);
  methods[3].selector = @selector(getMaxWidth);
  methods[4].selector = @selector(getMaxHeight);
  methods[5].selector = @selector(initWithASViewPagerImpl:);
  methods[6].selector = @selector(onMeasureWithInt:withInt:);
  methods[7].selector = @selector(onLayoutWithBoolean:withInt:withInt:withInt:withInt:);
  methods[8].selector = @selector(executeWithNSString:withNSObjectArray:);
  methods[9].selector = @selector(updateMeasuredDimensionWithInt:withInt:);
  methods[10].selector = @selector(newInstanceWithASIWidget:);
  methods[11].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:);
  methods[12].selector = @selector(getMethods);
  methods[13].selector = @selector(initialized);
  methods[14].selector = @selector(getAttributeWithASWidgetAttribute:);
  methods[15].selector = @selector(drawableStateChanged);
  methods[16].selector = @selector(inflateViewWithNSString:);
  methods[17].selector = @selector(remeasure);
  methods[18].selector = @selector(removeFromParent);
  methods[19].selector = @selector(getLocationOnScreenWithIntArray:);
  methods[20].selector = @selector(getWindowVisibleDisplayFrameWithADRect:);
  methods[21].selector = @selector(offsetTopAndBottomWithInt:);
  methods[22].selector = @selector(offsetLeftAndRightWithInt:);
  methods[23].selector = @selector(setMyAttributeWithNSString:withId:);
  methods[24].selector = @selector(setVisibilityWithInt:);
  methods[25].selector = @selector(smoothScrollToWithInt:withInt:withInt:);
  methods[26].selector = @selector(getScrollX);
  methods[27].selector = @selector(scrollToWithInt:withInt:);
  methods[28].selector = @selector(setState0WithId:);
  methods[29].selector = @selector(setState1WithId:);
  methods[30].selector = @selector(setState2WithId:);
  methods[31].selector = @selector(setState3WithId:);
  methods[32].selector = @selector(setState4WithId:);
  methods[33].selector = @selector(state0);
  methods[34].selector = @selector(state1);
  methods[35].selector = @selector(state2);
  methods[36].selector = @selector(state3);
  methods[37].selector = @selector(state4);
  methods[38].selector = @selector(stateYes);
  methods[39].selector = @selector(stateNo);
  methods[40].selector = @selector(endViewTransitionWithADView:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASViewPagerImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "measureFinished_", "LASMeasureEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "onLayoutEvent_", "LASOnLayoutEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "overlays_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 40, -1 },
    { "mMaxWidth_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMaxHeight_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "templates_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 41, -1 },
  };
  static const void *ptrTable[] = { "setMaxWidth", "I", "setMaxHeight", "LASViewPagerImpl;", "onMeasure", "II", "onLayout", "ZIIII", "execute", "LNSString;[LNSObject;", "updateMeasuredDimension", "newInstance", "LASIWidget;", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;", "()Ljava/util/List<Ljava/lang/String;>;", "getAttribute", "LASWidgetAttribute;", "inflateView", "LNSString;", "getLocationOnScreen", "[I", "getWindowVisibleDisplayFrame", "LADRect;", "offsetTopAndBottom", "offsetLeftAndRight", "setMyAttribute", "LNSString;LNSObject;", "setVisibility", "smoothScrollTo", "III", "scrollTo", "setState0", "LNSObject;", "setState1", "setState2", "setState3", "setState4", "endViewTransition", "LADView;", "Ljava/util/List<Lcom/ashera/widget/IWidget;>;", "Ljava/util/Map<Ljava/lang/String;Lcom/ashera/widget/IWidget;>;" };
  static const J2ObjcClassInfo _ASViewPagerImpl_ViewPagerExt = { "ViewPagerExt", "com.ashera.viewpager", ptrTable, methods, fields, 7, 0x1, 41, 7, 3, -1, -1, -1, -1 };
  return &_ASViewPagerImpl_ViewPagerExt;
}

@end

void ASViewPagerImpl_ViewPagerExt_initWithASViewPagerImpl_(ASViewPagerImpl_ViewPagerExt *self, ASViewPagerImpl *outer$) {
  self->this$0_ = outer$;
  ADXViewPager_init(self);
  self->measureFinished_ = new_ASMeasureEvent_init();
  self->onLayoutEvent_ = new_ASOnLayoutEvent_init();
  self->mMaxWidth_ = -1;
  self->mMaxHeight_ = -1;
}

ASViewPagerImpl_ViewPagerExt *new_ASViewPagerImpl_ViewPagerExt_initWithASViewPagerImpl_(ASViewPagerImpl *outer$) {
  J2OBJC_NEW_IMPL(ASViewPagerImpl_ViewPagerExt, initWithASViewPagerImpl_, outer$)
}

ASViewPagerImpl_ViewPagerExt *create_ASViewPagerImpl_ViewPagerExt_initWithASViewPagerImpl_(ASViewPagerImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASViewPagerImpl_ViewPagerExt, initWithASViewPagerImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewPagerImpl_ViewPagerExt)

@implementation ASViewPagerImpl_CustomPagerAdapter

- (instancetype)initWithASViewPagerImpl:(ASViewPagerImpl *)outer$ {
  ASViewPagerImpl_CustomPagerAdapter_initWithASViewPagerImpl_(self, outer$);
  return self;
}

- (id)instantiateItemWithADViewGroup:(ADViewGroup *)collection
                             withInt:(jint)position {
  ASLoopParam *model = [((id<JavaUtilList>) nil_chk(this$0_->dataList_)) getWithInt:position];
  id<ASIWidget> myWidget = [((id<ASIWidget>) nil_chk([this$0_ getListItem])) loadLazyWidgetsWithASHasWidgets:this$0_ withInt:-1 withNSString:@"" withASLoopParam:model];
  [this$0_ updateModelRecurseWithASIWidget:myWidget withASLoopParam:model];
  ADView *layout = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(myWidget)) asWidget], [ADView class]);
  [((ADView *) nil_chk(layout)) setTagWithId:JavaLangInteger_valueOfWithInt_(position)];
  return layout;
}

- (void)destroyItemWithADViewGroup:(ADViewGroup *)collection
                           withInt:(jint)position
                            withId:(id)view {
  for (id<ASIWidget> __strong w in nil_chk(this$0_->widgets_)) {
    ADView *myview = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
    if (myview == view) {
      ASViewGroupImpl_nativeRemoveViewWithASIWidget_(w);
      break;
    }
  }
  [((ADXViewPager *) nil_chk(this$0_->viewPager_)) removeViewWithADView:(ADView *) cast_chk(view, [ADView class])];
}

- (jint)getCount {
  return [((id<JavaUtilList>) nil_chk(this$0_->dataList_)) size];
}

- (jboolean)isViewFromObjectWithADView:(ADView *)view
                                withId:(id)object {
  return view == object;
}

- (id<JavaLangCharSequence>)getPageTitleWithInt:(jint)position {
  if (this$0_->pageTitles_ != nil && position < [this$0_->pageTitles_ size]) {
    return [this$0_->pageTitles_ getWithInt:position];
  }
  return @"";
}

- (jfloat)getPageWidthWithInt:(jint)position {
  return this$0_->pageWidth_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LJavaLangCharSequence;", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 9, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASViewPagerImpl:);
  methods[1].selector = @selector(instantiateItemWithADViewGroup:withInt:);
  methods[2].selector = @selector(destroyItemWithADViewGroup:withInt:withId:);
  methods[3].selector = @selector(getCount);
  methods[4].selector = @selector(isViewFromObjectWithADView:withId:);
  methods[5].selector = @selector(getPageTitleWithInt:);
  methods[6].selector = @selector(getPageWidthWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASViewPagerImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASViewPagerImpl;", "instantiateItem", "LADViewGroup;I", "destroyItem", "LADViewGroup;ILNSObject;", "isViewFromObject", "LADView;LNSObject;", "getPageTitle", "I", "getPageWidth" };
  static const J2ObjcClassInfo _ASViewPagerImpl_CustomPagerAdapter = { "CustomPagerAdapter", "com.ashera.viewpager", ptrTable, methods, fields, 7, 0x1, 7, 1, 0, -1, -1, -1, -1 };
  return &_ASViewPagerImpl_CustomPagerAdapter;
}

@end

void ASViewPagerImpl_CustomPagerAdapter_initWithASViewPagerImpl_(ASViewPagerImpl_CustomPagerAdapter *self, ASViewPagerImpl *outer$) {
  self->this$0_ = outer$;
  ADXPagerAdapter_init(self);
}

ASViewPagerImpl_CustomPagerAdapter *new_ASViewPagerImpl_CustomPagerAdapter_initWithASViewPagerImpl_(ASViewPagerImpl *outer$) {
  J2OBJC_NEW_IMPL(ASViewPagerImpl_CustomPagerAdapter, initWithASViewPagerImpl_, outer$)
}

ASViewPagerImpl_CustomPagerAdapter *create_ASViewPagerImpl_CustomPagerAdapter_initWithASViewPagerImpl_(ASViewPagerImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASViewPagerImpl_CustomPagerAdapter, initWithASViewPagerImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewPagerImpl_CustomPagerAdapter)

@implementation ASViewPagerImpl_1

- (instancetype)initWithASViewPagerImpl:(ASViewPagerImpl *)outer$ {
  ASViewPagerImpl_1_initWithASViewPagerImpl_(self, outer$);
  return self;
}

- (jboolean)onKeyWithADView:(ADView *)v
                    withInt:(jint)keyCode
             withADKeyEvent:(ADKeyEvent *)event {
  if (ASViewPagerImpl_isLeftPressedWithInt_(this$0_, keyCode)) {
    [((ADXViewPager *) nil_chk(this$0_->viewPager_)) arrowScrollWithInt:ADView_FOCUS_LEFT];
  }
  if (ASViewPagerImpl_isRightPressedWithInt_(this$0_, keyCode)) {
    [((ADXViewPager *) nil_chk(this$0_->viewPager_)) arrowScrollWithInt:ADView_FOCUS_RIGHT];
  }
  return false;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASViewPagerImpl:);
  methods[1].selector = @selector(onKeyWithADView:withInt:withADKeyEvent:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASViewPagerImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASViewPagerImpl;", "onKey", "LADView;ILADKeyEvent;", "addOnKeyListener" };
  static const J2ObjcClassInfo _ASViewPagerImpl_1 = { "", "com.ashera.viewpager", ptrTable, methods, fields, 7, 0x8010, 2, 1, 0, -1, 3, -1, -1 };
  return &_ASViewPagerImpl_1;
}

@end

void ASViewPagerImpl_1_initWithASViewPagerImpl_(ASViewPagerImpl_1 *self, ASViewPagerImpl *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

ASViewPagerImpl_1 *new_ASViewPagerImpl_1_initWithASViewPagerImpl_(ASViewPagerImpl *outer$) {
  J2OBJC_NEW_IMPL(ASViewPagerImpl_1, initWithASViewPagerImpl_, outer$)
}

ASViewPagerImpl_1 *create_ASViewPagerImpl_1_initWithASViewPagerImpl_(ASViewPagerImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASViewPagerImpl_1, initWithASViewPagerImpl_, outer$)
}

@implementation ASViewPagerImpl_ViewPagerPanListener

- (instancetype)initWithASViewPagerImpl:(ASViewPagerImpl *)outer$ {
  ASViewPagerImpl_ViewPagerPanListener_initWithASViewPagerImpl_(self, outer$);
  return self;
}

- (void)handlePanStartWithASIWidget:(id<ASIWidget>)widget
                             withId:(id)eventWidget
                            withInt:(jint)x
                            withInt:(jint)y {
  jint eventX = ASViewPagerImpl_getAbsXWithId_withInt_withInt_(this$0_, eventWidget, x, y);
  ASViewPagerImpl_handlePanStartWithInt_(this$0_, eventX);
}

- (void)handlePanDragWithASIWidget:(id<ASIWidget>)widget
                            withId:(id)eventWidget
                           withInt:(jint)x
                           withInt:(jint)y {
  jint eventX = ASViewPagerImpl_getAbsXWithId_withInt_withInt_(this$0_, eventWidget, x, y);
  ASViewPagerImpl_handlePanDragWithInt_(this$0_, eventX);
}

- (void)handlePanEndWithASIWidget:(id<ASIWidget>)widget
                           withId:(id)eventWidget
                          withInt:(jint)x
                          withInt:(jint)y {
  jint eventX = ASViewPagerImpl_getAbsXWithId_withInt_withInt_(this$0_, eventWidget, x, y);
  ASViewPagerImpl_handlePanEndWithInt_(this$0_, eventX);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASViewPagerImpl:);
  methods[1].selector = @selector(handlePanStartWithASIWidget:withId:withInt:withInt:);
  methods[2].selector = @selector(handlePanDragWithASIWidget:withId:withInt:withInt:);
  methods[3].selector = @selector(handlePanEndWithASIWidget:withId:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASViewPagerImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASViewPagerImpl;", "handlePanStart", "LASIWidget;LNSObject;II", "handlePanDrag", "handlePanEnd" };
  static const J2ObjcClassInfo _ASViewPagerImpl_ViewPagerPanListener = { "ViewPagerPanListener", "com.ashera.viewpager", ptrTable, methods, fields, 7, 0x2, 4, 1, 0, -1, -1, -1, -1 };
  return &_ASViewPagerImpl_ViewPagerPanListener;
}

@end

void ASViewPagerImpl_ViewPagerPanListener_initWithASViewPagerImpl_(ASViewPagerImpl_ViewPagerPanListener *self, ASViewPagerImpl *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

ASViewPagerImpl_ViewPagerPanListener *new_ASViewPagerImpl_ViewPagerPanListener_initWithASViewPagerImpl_(ASViewPagerImpl *outer$) {
  J2OBJC_NEW_IMPL(ASViewPagerImpl_ViewPagerPanListener, initWithASViewPagerImpl_, outer$)
}

ASViewPagerImpl_ViewPagerPanListener *create_ASViewPagerImpl_ViewPagerPanListener_initWithASViewPagerImpl_(ASViewPagerImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASViewPagerImpl_ViewPagerPanListener, initWithASViewPagerImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewPagerImpl_ViewPagerPanListener)

@implementation ASViewPagerImpl_CanvasImpl

- (instancetype)initWithASIWidget:(id<ASIWidget>)widget {
  ASViewPagerImpl_CanvasImpl_initWithASIWidget_(self, widget);
  return self;
}

- (void)drawWithADDrawable:(ADDrawable *)mDivider {
  for (id __strong divider in nil_chk(imageViews_)) {
    if (ASViewImpl_getXWithId_(divider) == [((ADDrawable *) nil_chk(mDivider)) getLeft] && ASViewImpl_getYWithId_(divider) == [mDivider getTop]) {
      return;
    }
  }
  id image = [((ADDrawable *) nil_chk(mDivider)) getDrawable];
  if (image != nil) {
    if ([image isKindOfClass:[JavaLangInteger class]]) {
      image = ASViewImpl_getColorWithId_(image);
    }
    id imageView = [self nativeCreateImageViewWithId:image];
    if (requiresAttrChangeListener_) {
      [mDivider setAttributeChangeListenerWithADDrawable_AttributeChangeListener:new_ASViewPagerImpl_CanvasImpl_$Lambda$1_initWithId_(imageView)];
    }
    ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_(imageView, [mDivider getLeft], [mDivider getTop], [mDivider getRight], [mDivider getBottom]);
    [((id<JavaUtilList>) nil_chk(imageViews_)) addWithId:imageView];
    ASViewGroupImpl_nativeAddViewWithId_withId_([((id<ASIWidget>) nil_chk(widget_)) asNativeWidget], imageView);
  }
}

- (void)reset {
  if (canvasReset_) {
    for (id __strong imageView in nil_chk(imageViews_)) {
      ASViewGroupImpl_removeViewWithId_(imageView);
    }
    [imageViews_ clear];
  }
}

- (id)nativeCreateImageViewWithId:(id)image {
  ASUIImageView* imageView = [ASUIImageView new];
  if ([image isKindOfClass:[UIImage class]]) {
    imageView.image = image;
    imageView.backgroundColor = nil;
  }else if ([image isKindOfClass:[UIColor class]]) {
    imageView.backgroundColor = image;
    imageView.image = nil;
  }
  return imageView;
}

- (void)translateWithInt:(jint)arg0
                 withInt:(jint)arg1 {
  ADCanvas_translateWithInt_withInt_(self, arg0, arg1);
}

- (void)__javaClone:(ASViewPagerImpl_CanvasImpl *)original {
  [super __javaClone:original];
  JreRelease(widget_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASIWidget:);
  methods[1].selector = @selector(drawWithADDrawable:);
  methods[2].selector = @selector(reset);
  methods[3].selector = @selector(nativeCreateImageViewWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "canvasReset_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "requiresAttrChangeListener_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "imageViews_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 5, -1 },
    { "widget_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;", "draw", "LADDrawable;", "nativeCreateImageView", "LNSObject;", "Ljava/util/List<Ljava/lang/Object;>;", "LASViewPagerImpl;" };
  static const J2ObjcClassInfo _ASViewPagerImpl_CanvasImpl = { "CanvasImpl", "com.ashera.viewpager", ptrTable, methods, fields, 7, 0x1a, 4, 4, 6, -1, -1, -1, -1 };
  return &_ASViewPagerImpl_CanvasImpl;
}

@end

void ASViewPagerImpl_CanvasImpl_initWithASIWidget_(ASViewPagerImpl_CanvasImpl *self, id<ASIWidget> widget) {
  NSObject_init(self);
  self->canvasReset_ = false;
  self->requiresAttrChangeListener_ = false;
  self->imageViews_ = new_JavaUtilArrayList_init();
  self->widget_ = widget;
}

ASViewPagerImpl_CanvasImpl *new_ASViewPagerImpl_CanvasImpl_initWithASIWidget_(id<ASIWidget> widget) {
  J2OBJC_NEW_IMPL(ASViewPagerImpl_CanvasImpl, initWithASIWidget_, widget)
}

ASViewPagerImpl_CanvasImpl *create_ASViewPagerImpl_CanvasImpl_initWithASIWidget_(id<ASIWidget> widget) {
  J2OBJC_CREATE_IMPL(ASViewPagerImpl_CanvasImpl, initWithASIWidget_, widget)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewPagerImpl_CanvasImpl)

@implementation ASViewPagerImpl_CanvasImpl_$Lambda$1

- (void)onAttributeChangeWithNSString:(NSString *)name
                               withId:(id)value {
  {
    ADRect *rect;
    jint alpha;
    switch (JreIndexOfStr(name, (id[]){ @"bounds", @"alpha" }, 2)) {
      case 0:
      rect = (ADRect *) cast_chk(value, [ADRect class]);
      ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_(val$imageView_, ((ADRect *) nil_chk(rect))->left_, rect->top_, rect->right_, rect->bottom_);
      break;
      case 1:
      alpha = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(value, [JavaLangInteger class]))) intValue];
      ASViewImpl_setAlphaWithId_withId_(val$imageView_, JavaLangFloat_valueOfWithFloat_(alpha / 255.0f));
      break;
      default:
      break;
    }
  }
}

@end

void ASViewPagerImpl_CanvasImpl_$Lambda$1_initWithId_(ASViewPagerImpl_CanvasImpl_$Lambda$1 *self, id capture$0) {
  self->val$imageView_ = capture$0;
  NSObject_init(self);
}

ASViewPagerImpl_CanvasImpl_$Lambda$1 *new_ASViewPagerImpl_CanvasImpl_$Lambda$1_initWithId_(id capture$0) {
  J2OBJC_NEW_IMPL(ASViewPagerImpl_CanvasImpl_$Lambda$1, initWithId_, capture$0)
}

ASViewPagerImpl_CanvasImpl_$Lambda$1 *create_ASViewPagerImpl_CanvasImpl_$Lambda$1_initWithId_(id capture$0) {
  J2OBJC_CREATE_IMPL(ASViewPagerImpl_CanvasImpl_$Lambda$1, initWithId_, capture$0)
}

@implementation ASViewPagerImpl_OnPageChangeListener

- (NSString *)getAction {
  return action_;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue {
  ASViewPagerImpl_OnPageChangeListener_initWithASIWidget_withNSString_(self, w, strValue);
  return self;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action {
  ASViewPagerImpl_OnPageChangeListener_initWithASIWidget_withNSString_withNSString_(self, w, strValue, action);
  return self;
}

- (void)onPageScrolledWithInt:(jint)position
                    withFloat:(jfloat)positionOffset
                      withInt:(jint)positionOffsetPixels {
  if (action_ == nil || [action_ isEqual:@"onPageScrolled"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onPageScrolled"];
    id<JavaUtilMap> obj = [self getOnPageScrolledEventObjWithInt:position withFloat:positionOffset withInt:positionOffsetPixels];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+" }, 1)) {
      case 0:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        (void) [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(position), JavaLangFloat_valueOfWithFloat_(positionOffset), JavaLangInteger_valueOfWithInt_(positionOffsetPixels) } count:3 type:NSObject_class_()]];
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ java_isEmpty] && ![((NSString *) nil_chk([((NSString *) nil_chk(strValue_)) java_trim])) java_hasPrefix:@"+"]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      [((id<ASIActivity>) nil_chk(activity)) sendEventMessageWithJavaUtilMap:obj];
    }
  }
  return;
}

- (id<JavaUtilMap>)getOnPageScrolledEventObjWithInt:(jint)position
                                          withFloat:(jfloat)positionOffset
                                            withInt:(jint)positionOffsetPixels {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"pagescrolled"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  if ([((id<ASIWidget>) nil_chk(w_)) getComponentId] != nil) {
    (void) [obj putWithId:@"componentId" withId:[((id<ASIWidget>) nil_chk(w_)) getComponentId]];
  }
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"position", JavaLangInteger_valueOfWithInt_(position));
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"positionOffset", JavaLangFloat_valueOfWithFloat_(positionOffset));
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"positionOffsetPixels", JavaLangInteger_valueOfWithInt_(positionOffsetPixels));
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onPageScrolled" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

- (void)onPageSelectedWithInt:(jint)position {
  if (action_ == nil || [action_ isEqual:@"onPageSelected"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onPageSelected"];
    id<JavaUtilMap> obj = [self getOnPageSelectedEventObjWithInt:position];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+" }, 1)) {
      case 0:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        (void) [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(position) } count:1 type:NSObject_class_()]];
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ java_isEmpty] && ![((NSString *) nil_chk([((NSString *) nil_chk(strValue_)) java_trim])) java_hasPrefix:@"+"]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      [((id<ASIActivity>) nil_chk(activity)) sendEventMessageWithJavaUtilMap:obj];
    }
  }
  return;
}

- (id<JavaUtilMap>)getOnPageSelectedEventObjWithInt:(jint)position {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"pageselected"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  if ([((id<ASIWidget>) nil_chk(w_)) getComponentId] != nil) {
    (void) [obj putWithId:@"componentId" withId:[((id<ASIWidget>) nil_chk(w_)) getComponentId]];
  }
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"position", JavaLangInteger_valueOfWithInt_(position));
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onPageSelected" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

- (void)onPageScrollStateChangedWithInt:(jint)state {
  if (action_ == nil || [action_ isEqual:@"onPageScrollStateChanged"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onPageScrollStateChanged"];
    id<JavaUtilMap> obj = [self getOnPageScrollStateChangedEventObjWithInt:state];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+" }, 1)) {
      case 0:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        (void) [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(state) } count:1 type:NSObject_class_()]];
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ java_isEmpty] && ![((NSString *) nil_chk([((NSString *) nil_chk(strValue_)) java_trim])) java_hasPrefix:@"+"]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      [((id<ASIActivity>) nil_chk(activity)) sendEventMessageWithJavaUtilMap:obj];
    }
  }
  return;
}

- (id<JavaUtilMap>)getOnPageScrollStateChangedEventObjWithInt:(jint)state {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"pagescrollstatechanged"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  if ([((id<ASIWidget>) nil_chk(w_)) getComponentId] != nil) {
    (void) [obj putWithId:@"componentId" withId:[((id<ASIWidget>) nil_chk(w_)) getComponentId]];
  }
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"state", JavaLangInteger_valueOfWithInt_(state));
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onPageScrollStateChanged" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 4, 3, -1, 5, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 8, 7, -1, 9, -1, -1 },
    { NULL, "V", 0x1, 10, 7, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 11, 7, -1, 9, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getAction);
  methods[1].selector = @selector(initWithASIWidget:withNSString:);
  methods[2].selector = @selector(initWithASIWidget:withNSString:withNSString:);
  methods[3].selector = @selector(onPageScrolledWithInt:withFloat:withInt:);
  methods[4].selector = @selector(getOnPageScrolledEventObjWithInt:withFloat:withInt:);
  methods[5].selector = @selector(onPageSelectedWithInt:);
  methods[6].selector = @selector(getOnPageSelectedEventObjWithInt:);
  methods[7].selector = @selector(onPageScrollStateChangedWithInt:);
  methods[8].selector = @selector(getOnPageScrollStateChangedEventObjWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "w_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "view_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "strValue_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "action_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;LNSString;", "LASIWidget;LNSString;LNSString;", "onPageScrolled", "IFI", "getOnPageScrolledEventObj", "(IFI)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "onPageSelected", "I", "getOnPageSelectedEventObj", "(I)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "onPageScrollStateChanged", "getOnPageScrollStateChangedEventObj", "LASViewPagerImpl;" };
  static const J2ObjcClassInfo _ASViewPagerImpl_OnPageChangeListener = { "OnPageChangeListener", "com.ashera.viewpager", ptrTable, methods, fields, 7, 0xa, 9, 4, 12, -1, -1, -1, -1 };
  return &_ASViewPagerImpl_OnPageChangeListener;
}

@end

void ASViewPagerImpl_OnPageChangeListener_initWithASIWidget_withNSString_(ASViewPagerImpl_OnPageChangeListener *self, id<ASIWidget> w, NSString *strValue) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
}

ASViewPagerImpl_OnPageChangeListener *new_ASViewPagerImpl_OnPageChangeListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_NEW_IMPL(ASViewPagerImpl_OnPageChangeListener, initWithASIWidget_withNSString_, w, strValue)
}

ASViewPagerImpl_OnPageChangeListener *create_ASViewPagerImpl_OnPageChangeListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_CREATE_IMPL(ASViewPagerImpl_OnPageChangeListener, initWithASIWidget_withNSString_, w, strValue)
}

void ASViewPagerImpl_OnPageChangeListener_initWithASIWidget_withNSString_withNSString_(ASViewPagerImpl_OnPageChangeListener *self, id<ASIWidget> w, NSString *strValue, NSString *action) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
  self->action_ = action;
}

ASViewPagerImpl_OnPageChangeListener *new_ASViewPagerImpl_OnPageChangeListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_NEW_IMPL(ASViewPagerImpl_OnPageChangeListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

ASViewPagerImpl_OnPageChangeListener *create_ASViewPagerImpl_OnPageChangeListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_CREATE_IMPL(ASViewPagerImpl_OnPageChangeListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewPagerImpl_OnPageChangeListener)

@implementation ASViewPagerImpl_ViewPagerCommandBuilder

- (instancetype)initWithASViewPagerImpl:(ASViewPagerImpl *)outer$ {
  ASViewPagerImpl_ViewPagerCommandBuilder_initWithASViewPagerImpl_(self, outer$);
  return self;
}

- (ASViewPagerImpl_ViewPagerCommandBuilder *)executeWithBoolean:(jboolean)setter {
  if (setter) {
    [this$0_ executeCommandWithJavaUtilMap:command_ withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
    [((id<ASIFragment>) nil_chk([this$0_ getFragment])) remeasure];
  }
  [this$0_ executeCommandWithJavaUtilMap:command_ withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_GETTER_METHOD];
  return self;
}

- (ASViewPagerImpl_ViewPagerCommandBuilder *)setCurrentItemWithInt:(jint)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"currentItem"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangInteger_valueOfWithInt_(value)];
  return self;
}

- (ASViewPagerImpl_ViewPagerCommandBuilder *)setOffscreenPageLimitWithInt:(jint)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"offscreenPageLimit"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangInteger_valueOfWithInt_(value)];
  return self;
}

- (ASViewPagerImpl_ViewPagerCommandBuilder *)setPageMarginWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"pageMargin"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASViewPagerImpl_ViewPagerCommandBuilder *)setPageMarginDrawableWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"pageMarginDrawable"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASViewPagerImpl_ViewPagerCommandBuilder *)setOnPageScrolledWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"onPageScrolled"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASViewPagerImpl_ViewPagerCommandBuilder *)setOnPageSelectedWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"onPageSelected"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASViewPagerImpl_ViewPagerCommandBuilder *)setOnPageScrollStateChangeWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"onPageScrollStateChange"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASViewPagerImpl_ViewPagerCommandBuilder *)setPageWidthWithFloat:(jfloat)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"pageWidth"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangFloat_valueOfWithFloat_(value)];
  return self;
}

- (ASViewPagerImpl_ViewPagerCommandBuilder *)setPageTitlesWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"pageTitles"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LASViewPagerImpl_ViewPagerCommandBuilder;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LASViewPagerImpl_ViewPagerCommandBuilder;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LASViewPagerImpl_ViewPagerCommandBuilder;", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "LASViewPagerImpl_ViewPagerCommandBuilder;", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LASViewPagerImpl_ViewPagerCommandBuilder;", 0x1, 8, 7, -1, -1, -1, -1 },
    { NULL, "LASViewPagerImpl_ViewPagerCommandBuilder;", 0x1, 9, 7, -1, -1, -1, -1 },
    { NULL, "LASViewPagerImpl_ViewPagerCommandBuilder;", 0x1, 10, 7, -1, -1, -1, -1 },
    { NULL, "LASViewPagerImpl_ViewPagerCommandBuilder;", 0x1, 11, 7, -1, -1, -1, -1 },
    { NULL, "LASViewPagerImpl_ViewPagerCommandBuilder;", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "LASViewPagerImpl_ViewPagerCommandBuilder;", 0x1, 14, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASViewPagerImpl:);
  methods[1].selector = @selector(executeWithBoolean:);
  methods[2].selector = @selector(setCurrentItemWithInt:);
  methods[3].selector = @selector(setOffscreenPageLimitWithInt:);
  methods[4].selector = @selector(setPageMarginWithNSString:);
  methods[5].selector = @selector(setPageMarginDrawableWithNSString:);
  methods[6].selector = @selector(setOnPageScrolledWithNSString:);
  methods[7].selector = @selector(setOnPageSelectedWithNSString:);
  methods[8].selector = @selector(setOnPageScrollStateChangeWithNSString:);
  methods[9].selector = @selector(setPageWidthWithFloat:);
  methods[10].selector = @selector(setPageTitlesWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASViewPagerImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASViewPagerImpl;", "execute", "Z", "setCurrentItem", "I", "setOffscreenPageLimit", "setPageMargin", "LNSString;", "setPageMarginDrawable", "setOnPageScrolled", "setOnPageSelected", "setOnPageScrollStateChange", "setPageWidth", "F", "setPageTitles", "Lcom/ashera/layout/ViewGroupImpl$ViewGroupCommandBuilder<Lcom/ashera/viewpager/ViewPagerImpl$ViewPagerCommandBuilder;>;" };
  static const J2ObjcClassInfo _ASViewPagerImpl_ViewPagerCommandBuilder = { "ViewPagerCommandBuilder", "com.ashera.viewpager", ptrTable, methods, fields, 7, 0x1, 11, 1, 0, -1, -1, 15, -1 };
  return &_ASViewPagerImpl_ViewPagerCommandBuilder;
}

@end

void ASViewPagerImpl_ViewPagerCommandBuilder_initWithASViewPagerImpl_(ASViewPagerImpl_ViewPagerCommandBuilder *self, ASViewPagerImpl *outer$) {
  self->this$0_ = outer$;
  ASViewGroupImpl_ViewGroupCommandBuilder_init(self);
}

ASViewPagerImpl_ViewPagerCommandBuilder *new_ASViewPagerImpl_ViewPagerCommandBuilder_initWithASViewPagerImpl_(ASViewPagerImpl *outer$) {
  J2OBJC_NEW_IMPL(ASViewPagerImpl_ViewPagerCommandBuilder, initWithASViewPagerImpl_, outer$)
}

ASViewPagerImpl_ViewPagerCommandBuilder *create_ASViewPagerImpl_ViewPagerCommandBuilder_initWithASViewPagerImpl_(ASViewPagerImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASViewPagerImpl_ViewPagerCommandBuilder, initWithASViewPagerImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewPagerImpl_ViewPagerCommandBuilder)

@implementation ASViewPagerImpl_ViewPagerBean

- (instancetype)initWithASViewPagerImpl:(ASViewPagerImpl *)outer$ {
  ASViewPagerImpl_ViewPagerBean_initWithASViewPagerImpl_(self, outer$);
  return self;
}

- (void)setCurrentItemWithInt:(jint)value {
  (void) [((ASViewPagerImpl_ViewPagerCommandBuilder *) nil_chk([((ASViewPagerImpl_ViewPagerCommandBuilder *) nil_chk([((ASViewPagerImpl_ViewPagerCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setCurrentItemWithInt:value])) executeWithBoolean:true];
}

- (void)setOffscreenPageLimitWithInt:(jint)value {
  (void) [((ASViewPagerImpl_ViewPagerCommandBuilder *) nil_chk([((ASViewPagerImpl_ViewPagerCommandBuilder *) nil_chk([((ASViewPagerImpl_ViewPagerCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setOffscreenPageLimitWithInt:value])) executeWithBoolean:true];
}

- (void)setPageMarginWithNSString:(NSString *)value {
  (void) [((ASViewPagerImpl_ViewPagerCommandBuilder *) nil_chk([((ASViewPagerImpl_ViewPagerCommandBuilder *) nil_chk([((ASViewPagerImpl_ViewPagerCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPageMarginWithNSString:value])) executeWithBoolean:true];
}

- (void)setPageMarginDrawableWithNSString:(NSString *)value {
  (void) [((ASViewPagerImpl_ViewPagerCommandBuilder *) nil_chk([((ASViewPagerImpl_ViewPagerCommandBuilder *) nil_chk([((ASViewPagerImpl_ViewPagerCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPageMarginDrawableWithNSString:value])) executeWithBoolean:true];
}

- (void)setOnPageScrolledWithNSString:(NSString *)value {
  (void) [((ASViewPagerImpl_ViewPagerCommandBuilder *) nil_chk([((ASViewPagerImpl_ViewPagerCommandBuilder *) nil_chk([((ASViewPagerImpl_ViewPagerCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setOnPageScrolledWithNSString:value])) executeWithBoolean:true];
}

- (void)setOnPageSelectedWithNSString:(NSString *)value {
  (void) [((ASViewPagerImpl_ViewPagerCommandBuilder *) nil_chk([((ASViewPagerImpl_ViewPagerCommandBuilder *) nil_chk([((ASViewPagerImpl_ViewPagerCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setOnPageSelectedWithNSString:value])) executeWithBoolean:true];
}

- (void)setOnPageScrollStateChangeWithNSString:(NSString *)value {
  (void) [((ASViewPagerImpl_ViewPagerCommandBuilder *) nil_chk([((ASViewPagerImpl_ViewPagerCommandBuilder *) nil_chk([((ASViewPagerImpl_ViewPagerCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setOnPageScrollStateChangeWithNSString:value])) executeWithBoolean:true];
}

- (void)setPageWidthWithFloat:(jfloat)value {
  (void) [((ASViewPagerImpl_ViewPagerCommandBuilder *) nil_chk([((ASViewPagerImpl_ViewPagerCommandBuilder *) nil_chk([((ASViewPagerImpl_ViewPagerCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPageWidthWithFloat:value])) executeWithBoolean:true];
}

- (void)setPageTitlesWithNSString:(NSString *)value {
  (void) [((ASViewPagerImpl_ViewPagerCommandBuilder *) nil_chk([((ASViewPagerImpl_ViewPagerCommandBuilder *) nil_chk([((ASViewPagerImpl_ViewPagerCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPageTitlesWithNSString:value])) executeWithBoolean:true];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASViewPagerImpl:);
  methods[1].selector = @selector(setCurrentItemWithInt:);
  methods[2].selector = @selector(setOffscreenPageLimitWithInt:);
  methods[3].selector = @selector(setPageMarginWithNSString:);
  methods[4].selector = @selector(setPageMarginDrawableWithNSString:);
  methods[5].selector = @selector(setOnPageScrolledWithNSString:);
  methods[6].selector = @selector(setOnPageSelectedWithNSString:);
  methods[7].selector = @selector(setOnPageScrollStateChangeWithNSString:);
  methods[8].selector = @selector(setPageWidthWithFloat:);
  methods[9].selector = @selector(setPageTitlesWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASViewPagerImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASViewPagerImpl;", "setCurrentItem", "I", "setOffscreenPageLimit", "setPageMargin", "LNSString;", "setPageMarginDrawable", "setOnPageScrolled", "setOnPageSelected", "setOnPageScrollStateChange", "setPageWidth", "F", "setPageTitles" };
  static const J2ObjcClassInfo _ASViewPagerImpl_ViewPagerBean = { "ViewPagerBean", "com.ashera.viewpager", ptrTable, methods, fields, 7, 0x1, 10, 1, 0, -1, -1, -1, -1 };
  return &_ASViewPagerImpl_ViewPagerBean;
}

@end

void ASViewPagerImpl_ViewPagerBean_initWithASViewPagerImpl_(ASViewPagerImpl_ViewPagerBean *self, ASViewPagerImpl *outer$) {
  self->this$0_ = outer$;
  ASViewGroupImpl_ViewGroupBean_initWithASIWidget_(self, outer$);
}

ASViewPagerImpl_ViewPagerBean *new_ASViewPagerImpl_ViewPagerBean_initWithASViewPagerImpl_(ASViewPagerImpl *outer$) {
  J2OBJC_NEW_IMPL(ASViewPagerImpl_ViewPagerBean, initWithASViewPagerImpl_, outer$)
}

ASViewPagerImpl_ViewPagerBean *create_ASViewPagerImpl_ViewPagerBean_initWithASViewPagerImpl_(ASViewPagerImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASViewPagerImpl_ViewPagerBean, initWithASViewPagerImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewPagerImpl_ViewPagerBean)

@implementation ASViewPagerImpl_ViewPagerParamsBean

- (instancetype)initWithASViewPagerImpl:(ASViewPagerImpl *)outer$ {
  ASViewPagerImpl_ViewPagerParamsBean_initWithASViewPagerImpl_(self, outer$);
  return self;
}

- (void)setLayoutGravityWithASIWidget:(id<ASIWidget>)w
                         withNSString:(NSString *)value {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  (void) [layoutParams putWithId:@"layoutParams" withId:[((ASViewPagerImpl_ViewPagerCommandParamsBuilder *) nil_chk([((ASViewPagerImpl_ViewPagerCommandParamsBuilder *) nil_chk([((ASViewPagerImpl_ViewPagerCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) setLayoutGravityWithNSString:value])) getCommand]];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
  [((id<ASIFragment>) nil_chk([w getFragment])) remeasure];
}

- (void)setLayoutIsdecorWithASIWidget:(id<ASIWidget>)w
                          withBoolean:(jboolean)value {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  (void) [layoutParams putWithId:@"layoutParams" withId:[((ASViewPagerImpl_ViewPagerCommandParamsBuilder *) nil_chk([((ASViewPagerImpl_ViewPagerCommandParamsBuilder *) nil_chk([((ASViewPagerImpl_ViewPagerCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) setLayoutIsdecorWithBoolean:value])) getCommand]];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
  [((id<ASIFragment>) nil_chk([w getFragment])) remeasure];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASViewPagerImpl:);
  methods[1].selector = @selector(setLayoutGravityWithASIWidget:withNSString:);
  methods[2].selector = @selector(setLayoutIsdecorWithASIWidget:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASViewPagerImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASViewPagerImpl;", "setLayoutGravity", "LASIWidget;LNSString;", "setLayoutIsdecor", "LASIWidget;Z" };
  static const J2ObjcClassInfo _ASViewPagerImpl_ViewPagerParamsBean = { "ViewPagerParamsBean", "com.ashera.viewpager", ptrTable, methods, fields, 7, 0x1, 3, 1, 0, -1, -1, -1, -1 };
  return &_ASViewPagerImpl_ViewPagerParamsBean;
}

@end

void ASViewPagerImpl_ViewPagerParamsBean_initWithASViewPagerImpl_(ASViewPagerImpl_ViewPagerParamsBean *self, ASViewPagerImpl *outer$) {
  self->this$0_ = outer$;
  ASViewGroupImpl_ViewGroupParamsBean_init(self);
}

ASViewPagerImpl_ViewPagerParamsBean *new_ASViewPagerImpl_ViewPagerParamsBean_initWithASViewPagerImpl_(ASViewPagerImpl *outer$) {
  J2OBJC_NEW_IMPL(ASViewPagerImpl_ViewPagerParamsBean, initWithASViewPagerImpl_, outer$)
}

ASViewPagerImpl_ViewPagerParamsBean *create_ASViewPagerImpl_ViewPagerParamsBean_initWithASViewPagerImpl_(ASViewPagerImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASViewPagerImpl_ViewPagerParamsBean, initWithASViewPagerImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewPagerImpl_ViewPagerParamsBean)

@implementation ASViewPagerImpl_ViewPagerCommandParamsBuilder

- (instancetype)initWithASViewPagerImpl:(ASViewPagerImpl *)outer$ {
  ASViewPagerImpl_ViewPagerCommandParamsBuilder_initWithASViewPagerImpl_(self, outer$);
  return self;
}

- (ASViewPagerImpl_ViewPagerCommandParamsBuilder *)setLayoutGravityWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_gravity"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASViewPagerImpl_ViewPagerCommandParamsBuilder *)setLayoutIsdecorWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_isdecor"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LASViewPagerImpl_ViewPagerCommandParamsBuilder;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LASViewPagerImpl_ViewPagerCommandParamsBuilder;", 0x1, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASViewPagerImpl:);
  methods[1].selector = @selector(setLayoutGravityWithNSString:);
  methods[2].selector = @selector(setLayoutIsdecorWithBoolean:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LASViewPagerImpl;", "setLayoutGravity", "LNSString;", "setLayoutIsdecor", "Z", "Lcom/ashera/layout/ViewGroupImpl$ViewGroupCommandParamsBuilder<Lcom/ashera/viewpager/ViewPagerImpl$ViewPagerCommandParamsBuilder;>;" };
  static const J2ObjcClassInfo _ASViewPagerImpl_ViewPagerCommandParamsBuilder = { "ViewPagerCommandParamsBuilder", "com.ashera.viewpager", ptrTable, methods, NULL, 7, 0x1, 3, 0, 0, -1, -1, 5, -1 };
  return &_ASViewPagerImpl_ViewPagerCommandParamsBuilder;
}

@end

void ASViewPagerImpl_ViewPagerCommandParamsBuilder_initWithASViewPagerImpl_(ASViewPagerImpl_ViewPagerCommandParamsBuilder *self, ASViewPagerImpl *outer$) {
  ASViewGroupImpl_ViewGroupCommandParamsBuilder_init(self);
}

ASViewPagerImpl_ViewPagerCommandParamsBuilder *new_ASViewPagerImpl_ViewPagerCommandParamsBuilder_initWithASViewPagerImpl_(ASViewPagerImpl *outer$) {
  J2OBJC_NEW_IMPL(ASViewPagerImpl_ViewPagerCommandParamsBuilder, initWithASViewPagerImpl_, outer$)
}

ASViewPagerImpl_ViewPagerCommandParamsBuilder *create_ASViewPagerImpl_ViewPagerCommandParamsBuilder_initWithASViewPagerImpl_(ASViewPagerImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASViewPagerImpl_ViewPagerCommandParamsBuilder, initWithASViewPagerImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewPagerImpl_ViewPagerCommandParamsBuilder)

@implementation ASViewPagerImpl_$Lambda$1

- (void)run {
  ASViewGroupImpl_nativeRemoveViewWithASIWidget_(val$widget_);
}

@end

void ASViewPagerImpl_$Lambda$1_initWithASIWidget_(ASViewPagerImpl_$Lambda$1 *self, id<ASIWidget> capture$0) {
  self->val$widget_ = capture$0;
  NSObject_init(self);
}

ASViewPagerImpl_$Lambda$1 *new_ASViewPagerImpl_$Lambda$1_initWithASIWidget_(id<ASIWidget> capture$0) {
  J2OBJC_NEW_IMPL(ASViewPagerImpl_$Lambda$1, initWithASIWidget_, capture$0)
}

ASViewPagerImpl_$Lambda$1 *create_ASViewPagerImpl_$Lambda$1_initWithASIWidget_(id<ASIWidget> capture$0) {
  J2OBJC_CREATE_IMPL(ASViewPagerImpl_$Lambda$1, initWithASIWidget_, capture$0)
}

@implementation ASViewPagerImpl_$Lambda$2

- (void)animatingWithInt:(jint)tX
                 withInt:(jint)tY {
  jint mycurrentX = ASViewImpl_getXWithId_([this$0_ asNativeWidget]);
  [((ADXViewPager *) nil_chk(this$0_->viewPager_)) pageScrolledWithInt:-mycurrentX];
  ASViewImpl_updateBoundsXWithId_withInt_([this$0_ asNativeWidget], mycurrentX);
}

@end

void ASViewPagerImpl_$Lambda$2_initWithASViewPagerImpl_(ASViewPagerImpl_$Lambda$2 *self, ASViewPagerImpl *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

ASViewPagerImpl_$Lambda$2 *new_ASViewPagerImpl_$Lambda$2_initWithASViewPagerImpl_(ASViewPagerImpl *outer$) {
  J2OBJC_NEW_IMPL(ASViewPagerImpl_$Lambda$2, initWithASViewPagerImpl_, outer$)
}

ASViewPagerImpl_$Lambda$2 *create_ASViewPagerImpl_$Lambda$2_initWithASViewPagerImpl_(ASViewPagerImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASViewPagerImpl_$Lambda$2, initWithASViewPagerImpl_, outer$)
}

@implementation ASViewPagerImpl_$Lambda$3

- (void)run {
  [((ADXViewPager *) nil_chk(this$0_->viewPager_)) setCurrentItemWithInt:val$currentItem_ withBoolean:false];
  [((ADXViewPager *) nil_chk(this$0_->viewPager_)) setVisibilityWithInt:ADView_VISIBLE];
  [((ADXViewPager *) nil_chk(this$0_->viewPager_)) requestLayout];
  [((ADXViewPager *) nil_chk(this$0_->viewPager_)) remeasure];
}

@end

void ASViewPagerImpl_$Lambda$3_initWithASViewPagerImpl_withInt_(ASViewPagerImpl_$Lambda$3 *self, ASViewPagerImpl *outer$, jint capture$0) {
  self->this$0_ = outer$;
  self->val$currentItem_ = capture$0;
  NSObject_init(self);
}

ASViewPagerImpl_$Lambda$3 *new_ASViewPagerImpl_$Lambda$3_initWithASViewPagerImpl_withInt_(ASViewPagerImpl *outer$, jint capture$0) {
  J2OBJC_NEW_IMPL(ASViewPagerImpl_$Lambda$3, initWithASViewPagerImpl_withInt_, outer$, capture$0)
}

ASViewPagerImpl_$Lambda$3 *create_ASViewPagerImpl_$Lambda$3_initWithASViewPagerImpl_withInt_(ASViewPagerImpl *outer$, jint capture$0) {
  J2OBJC_CREATE_IMPL(ASViewPagerImpl_$Lambda$3, initWithASViewPagerImpl_withInt_, outer$, capture$0)
}
