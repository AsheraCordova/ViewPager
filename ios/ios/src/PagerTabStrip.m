//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\IOSViewPagerPlugin\src\main\java\androidx\viewpager\widget\PagerTabStrip.java
//

#include "ConverterFactory.h"
#include "HasWidgets.h"
#include "IConverter.h"
#include "IFragment.h"
#include "J2ObjC_source.h"
#include "PagerTabStrip.h"
#include "PagerTitleStrip.h"
#include "TextView.h"
#include "View.h"
#include "ViewPager.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"


@interface ASPagerTabStrip () {
 @public
  jint mIndicatorColor_;
  jint mIndicatorHeight_;
  jint mMinPaddingBottom_;
  jint mMinTextSpacing_;
  jint mMinStripHeight_;
  jint mTabPadding_;
  jint mTabAlpha_;
  jboolean mDrawFullUnderline_;
  jboolean mDrawFullUnderlineSet_;
  jint mFullUnderlineHeight_;
  jboolean mIgnoreTap_;
  jfloat mInitialMotionX_;
  jfloat mInitialMotionY_;
  jint mTouchSlop_PagerTabStrip_;
}

- (void)updateBorderBottomWidth;

@end

inline jint ASPagerTabStrip_get_INDICATOR_HEIGHT(void);
#define ASPagerTabStrip_INDICATOR_HEIGHT 3
J2OBJC_STATIC_FIELD_CONSTANT(ASPagerTabStrip, INDICATOR_HEIGHT, jint)

inline jint ASPagerTabStrip_get_MIN_PADDING_BOTTOM(void);
#define ASPagerTabStrip_MIN_PADDING_BOTTOM 6
J2OBJC_STATIC_FIELD_CONSTANT(ASPagerTabStrip, MIN_PADDING_BOTTOM, jint)

inline jint ASPagerTabStrip_get_TAB_PADDING(void);
#define ASPagerTabStrip_TAB_PADDING 16
J2OBJC_STATIC_FIELD_CONSTANT(ASPagerTabStrip, TAB_PADDING, jint)

inline jint ASPagerTabStrip_get_TAB_SPACING(void);
#define ASPagerTabStrip_TAB_SPACING 32
J2OBJC_STATIC_FIELD_CONSTANT(ASPagerTabStrip, TAB_SPACING, jint)

inline jint ASPagerTabStrip_get_MIN_TEXT_SPACING(void);
#define ASPagerTabStrip_MIN_TEXT_SPACING 64
J2OBJC_STATIC_FIELD_CONSTANT(ASPagerTabStrip, MIN_TEXT_SPACING, jint)

inline jint ASPagerTabStrip_get_FULL_UNDERLINE_HEIGHT(void);
#define ASPagerTabStrip_FULL_UNDERLINE_HEIGHT 1
J2OBJC_STATIC_FIELD_CONSTANT(ASPagerTabStrip, FULL_UNDERLINE_HEIGHT, jint)

inline jint ASPagerTabStrip_get_MIN_STRIP_HEIGHT(void);
#define ASPagerTabStrip_MIN_STRIP_HEIGHT 32
J2OBJC_STATIC_FIELD_CONSTANT(ASPagerTabStrip, MIN_STRIP_HEIGHT, jint)

__attribute__((unused)) static void ASPagerTabStrip_updateBorderBottomWidth(ASPagerTabStrip *self);

@interface ASPagerTabStrip_1 : NSObject < ADView_OnClickListener > {
 @public
  ASPagerTabStrip *this$0_;
}

- (instancetype)initWithASPagerTabStrip:(ASPagerTabStrip *)outer$;

- (void)onClickWithADView:(ADView *)v;

@end

J2OBJC_EMPTY_STATIC_INIT(ASPagerTabStrip_1)

__attribute__((unused)) static void ASPagerTabStrip_1_initWithASPagerTabStrip_(ASPagerTabStrip_1 *self, ASPagerTabStrip *outer$);

__attribute__((unused)) static ASPagerTabStrip_1 *new_ASPagerTabStrip_1_initWithASPagerTabStrip_(ASPagerTabStrip *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASPagerTabStrip_1 *create_ASPagerTabStrip_1_initWithASPagerTabStrip_(ASPagerTabStrip *outer$);

@interface ASPagerTabStrip_2 : NSObject < ADView_OnClickListener > {
 @public
  ASPagerTabStrip *this$0_;
}

- (instancetype)initWithASPagerTabStrip:(ASPagerTabStrip *)outer$;

- (void)onClickWithADView:(ADView *)v;

@end

J2OBJC_EMPTY_STATIC_INIT(ASPagerTabStrip_2)

__attribute__((unused)) static void ASPagerTabStrip_2_initWithASPagerTabStrip_(ASPagerTabStrip_2 *self, ASPagerTabStrip *outer$);

__attribute__((unused)) static ASPagerTabStrip_2 *new_ASPagerTabStrip_2_initWithASPagerTabStrip_(ASPagerTabStrip *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASPagerTabStrip_2 *create_ASPagerTabStrip_2_initWithASPagerTabStrip_(ASPagerTabStrip *outer$);

@implementation ASPagerTabStrip

- (void)setPaddingWithInt:(jint)left
                  withInt:(jint)top
                  withInt:(jint)right
                  withInt:(jint)bottom {
  if (bottom < mMinPaddingBottom_) {
    bottom = mMinPaddingBottom_;
  }
  [super setPaddingWithInt:left withInt:top withInt:right withInt:bottom];
}

- (void)setTextSpacingWithInt:(jint)spacingPixels {
  if (spacingPixels < mMinTextSpacing_) {
    spacingPixels = mMinTextSpacing_;
  }
  [super setTextSpacingWithInt:spacingPixels];
}

- (void)setDrawFullUnderlineWithBoolean:(jboolean)drawFull {
  mDrawFullUnderline_ = drawFull;
  mDrawFullUnderlineSet_ = true;
  ASPagerTabStrip_updateBorderBottomWidth(self);
  [self invalidate];
}

- (jint)getMinHeight {
  return JavaLangMath_maxWithInt_withInt_([super getMinHeight], mMinStripHeight_);
}

- (void)updateTextPositionsWithInt:(jint)position
                         withFloat:(jfloat)positionOffset
                       withBoolean:(jboolean)force {
  [super updateTextPositionsWithInt:position withFloat:positionOffset withBoolean:force];
  mTabAlpha_ = JreFpToInt((JavaLangMath_absWithFloat_(positionOffset - 0.5f) * 2 * (jint) 0xFF));
  [self invalidate];
}

- (instancetype)initWithASHasWidgets:(id<ASHasWidgets>)widget {
  ASPagerTabStrip_initWithASHasWidgets_(self, widget);
  return self;
}

- (void)init__WithASHasWidgets:(id<ASHasWidgets>)widget {
  [super init__WithASHasWidgets:widget];
  mDrawFullUnderline_ = true;
  ASPagerTabStrip_updateBorderBottomWidth(self);
  [self setMyAttributeWithNSString:@"borderBottomColor" withId:[((id<ASIConverter>) nil_chk(ASConverterFactory_getWithNSString_(@"color"))) convertFromWithId:@"#aaa" withJavaUtilMap:nil withASIFragment:[((id<ASHasWidgets>) nil_chk(widget)) getFragment]]];
  [((ADTextView *) nil_chk(mCurrText_)) setMyAttributeWithNSString:@"borderBottomWidth" withId:JavaLangInteger_valueOfWithInt_(mIndicatorHeight_)];
  [((ADTextView *) nil_chk(mCurrText_)) setMyAttributeWithNSString:@"paddingBottom" withId:JavaLangInteger_valueOfWithInt_(mIndicatorHeight_)];
  [((ADTextView *) nil_chk(mCurrText_)) setMyAttributeWithNSString:@"borderBottomColor" withId:[((id<ASIConverter>) nil_chk(ASConverterFactory_getWithNSString_(@"color"))) convertFromWithId:@"#f00" withJavaUtilMap:nil withASIFragment:[widget getFragment]]];
  [((ADTextView *) nil_chk(mPrevText_)) setMyAttributeWithNSString:@"onClick" withId:new_ASPagerTabStrip_1_initWithASPagerTabStrip_(self)];
  [((ADTextView *) nil_chk(mNextText_)) setMyAttributeWithNSString:@"onClick" withId:new_ASPagerTabStrip_2_initWithASPagerTabStrip_(self)];
  [((ADTextView *) nil_chk(mCurrText_)) setMyAttributeWithNSString:@"singleLine" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  [((ADTextView *) nil_chk(mPrevText_)) setMyAttributeWithNSString:@"singleLine" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  [((ADTextView *) nil_chk(mNextText_)) setMyAttributeWithNSString:@"singleLine" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  [((ADTextView *) nil_chk(mCurrText_)) setMyAttributeWithNSString:@"textAllCaps" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  [((ADTextView *) nil_chk(mPrevText_)) setMyAttributeWithNSString:@"textAllCaps" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  [((ADTextView *) nil_chk(mNextText_)) setMyAttributeWithNSString:@"textAllCaps" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
}

- (void)setTabIndicatorColorWithId:(id)objValue {
  [((ADTextView *) nil_chk(mCurrText_)) setMyAttributeWithNSString:@"borderBottomColor" withId:objValue];
}

- (void)updateBorderBottomWidth {
  ASPagerTabStrip_updateBorderBottomWidth(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 6, 7, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(setPaddingWithInt:withInt:withInt:withInt:);
  methods[1].selector = @selector(setTextSpacingWithInt:);
  methods[2].selector = @selector(setDrawFullUnderlineWithBoolean:);
  methods[3].selector = @selector(getMinHeight);
  methods[4].selector = @selector(updateTextPositionsWithInt:withFloat:withBoolean:);
  methods[5].selector = @selector(initWithASHasWidgets:);
  methods[6].selector = @selector(init__WithASHasWidgets:);
  methods[7].selector = @selector(setTabIndicatorColorWithId:);
  methods[8].selector = @selector(updateBorderBottomWidth);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INDICATOR_HEIGHT", "I", .constantValue.asInt = ASPagerTabStrip_INDICATOR_HEIGHT, 0x1a, -1, -1, -1, -1 },
    { "MIN_PADDING_BOTTOM", "I", .constantValue.asInt = ASPagerTabStrip_MIN_PADDING_BOTTOM, 0x1a, -1, -1, -1, -1 },
    { "TAB_PADDING", "I", .constantValue.asInt = ASPagerTabStrip_TAB_PADDING, 0x1a, -1, -1, -1, -1 },
    { "TAB_SPACING", "I", .constantValue.asInt = ASPagerTabStrip_TAB_SPACING, 0x1a, -1, -1, -1, -1 },
    { "MIN_TEXT_SPACING", "I", .constantValue.asInt = ASPagerTabStrip_MIN_TEXT_SPACING, 0x1a, -1, -1, -1, -1 },
    { "FULL_UNDERLINE_HEIGHT", "I", .constantValue.asInt = ASPagerTabStrip_FULL_UNDERLINE_HEIGHT, 0x1a, -1, -1, -1, -1 },
    { "MIN_STRIP_HEIGHT", "I", .constantValue.asInt = ASPagerTabStrip_MIN_STRIP_HEIGHT, 0x1a, -1, -1, -1, -1 },
    { "mIndicatorColor_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mIndicatorHeight_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMinPaddingBottom_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMinTextSpacing_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMinStripHeight_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTabPadding_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTabAlpha_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mDrawFullUnderline_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mDrawFullUnderlineSet_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mFullUnderlineHeight_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mIgnoreTap_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mInitialMotionX_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mInitialMotionY_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTouchSlop_PagerTabStrip_", "I", .constantValue.asLong = 0, 0x2, 12, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setPadding", "IIII", "setTextSpacing", "I", "setDrawFullUnderline", "Z", "updateTextPositions", "IFZ", "LASHasWidgets;", "init", "setTabIndicatorColor", "LNSObject;", "mTouchSlop" };
  static const J2ObjcClassInfo _ASPagerTabStrip = { "PagerTabStrip", "androidx.viewpager.widget", ptrTable, methods, fields, 7, 0x1, 9, 21, -1, -1, -1, -1, -1 };
  return &_ASPagerTabStrip;
}

@end

void ASPagerTabStrip_initWithASHasWidgets_(ASPagerTabStrip *self, id<ASHasWidgets> widget) {
  ASPagerTitleStrip_initWithASHasWidgets_(self, widget);
  self->mTabAlpha_ = (jint) 0xFF;
  self->mDrawFullUnderline_ = false;
  self->mDrawFullUnderlineSet_ = false;
  self->mIndicatorHeight_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([((id<ASIConverter>) nil_chk(ASConverterFactory_getWithNSString_(@"dimension"))) convertFromWithId:JreStrcat("I$", ASPagerTabStrip_INDICATOR_HEIGHT, @"dp") withJavaUtilMap:nil withASIFragment:[((id<ASHasWidgets>) nil_chk(widget)) getFragment]], [JavaLangInteger class]))) intValue];
  self->mMinPaddingBottom_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([((id<ASIConverter>) nil_chk(ASConverterFactory_getWithNSString_(@"dimension"))) convertFromWithId:JreStrcat("I$", ASPagerTabStrip_MIN_PADDING_BOTTOM, @"dp") withJavaUtilMap:nil withASIFragment:[widget getFragment]], [JavaLangInteger class]))) intValue];
  self->mMinTextSpacing_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([((id<ASIConverter>) nil_chk(ASConverterFactory_getWithNSString_(@"dimension"))) convertFromWithId:JreStrcat("I$", ASPagerTabStrip_MIN_TEXT_SPACING, @"dp") withJavaUtilMap:nil withASIFragment:[widget getFragment]], [JavaLangInteger class]))) intValue];
  self->mTabPadding_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([((id<ASIConverter>) nil_chk(ASConverterFactory_getWithNSString_(@"dimension"))) convertFromWithId:JreStrcat("I$", ASPagerTabStrip_TAB_PADDING, @"dp") withJavaUtilMap:nil withASIFragment:[widget getFragment]], [JavaLangInteger class]))) intValue];
  self->mFullUnderlineHeight_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([((id<ASIConverter>) nil_chk(ASConverterFactory_getWithNSString_(@"dimension"))) convertFromWithId:JreStrcat("I$", ASPagerTabStrip_FULL_UNDERLINE_HEIGHT, @"dp") withJavaUtilMap:nil withASIFragment:[widget getFragment]], [JavaLangInteger class]))) intValue];
  self->mMinStripHeight_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([((id<ASIConverter>) nil_chk(ASConverterFactory_getWithNSString_(@"dimension"))) convertFromWithId:JreStrcat("I$", ASPagerTabStrip_MIN_STRIP_HEIGHT, @"dp") withJavaUtilMap:nil withASIFragment:[widget getFragment]], [JavaLangInteger class]))) intValue];
  [self setPaddingWithInt:[self getPaddingLeft] withInt:[self getPaddingTop] withInt:[self getPaddingRight] withInt:[self getPaddingBottom]];
  [self setTextSpacingWithInt:[self getTextSpacing]];
}

ASPagerTabStrip *new_ASPagerTabStrip_initWithASHasWidgets_(id<ASHasWidgets> widget) {
  J2OBJC_NEW_IMPL(ASPagerTabStrip, initWithASHasWidgets_, widget)
}

ASPagerTabStrip *create_ASPagerTabStrip_initWithASHasWidgets_(id<ASHasWidgets> widget) {
  J2OBJC_CREATE_IMPL(ASPagerTabStrip, initWithASHasWidgets_, widget)
}

void ASPagerTabStrip_updateBorderBottomWidth(ASPagerTabStrip *self) {
  if (self->mDrawFullUnderline_) {
    [self setMyAttributeWithNSString:@"borderBottomWidth" withId:JavaLangInteger_valueOfWithInt_(self->mFullUnderlineHeight_)];
  }
  else {
    [self setMyAttributeWithNSString:@"borderBottomWidth" withId:JavaLangInteger_valueOfWithInt_(0)];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASPagerTabStrip)

@implementation ASPagerTabStrip_1

- (instancetype)initWithASPagerTabStrip:(ASPagerTabStrip *)outer$ {
  ASPagerTabStrip_1_initWithASPagerTabStrip_(self, outer$);
  return self;
}

- (void)onClickWithADView:(ADView *)v {
  [((ASViewPager *) nil_chk(this$0_->mPager_)) setCurrentItemWithInt:[this$0_->mPager_ getCurrentItem] - 1];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASPagerTabStrip:);
  methods[1].selector = @selector(onClickWithADView:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASPagerTabStrip;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASPagerTabStrip;", "onClick", "LADView;", "init__WithASHasWidgets:" };
  static const J2ObjcClassInfo _ASPagerTabStrip_1 = { "", "androidx.viewpager.widget", ptrTable, methods, fields, 7, 0x8010, 2, 1, 0, -1, 3, -1, -1 };
  return &_ASPagerTabStrip_1;
}

@end

void ASPagerTabStrip_1_initWithASPagerTabStrip_(ASPagerTabStrip_1 *self, ASPagerTabStrip *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

ASPagerTabStrip_1 *new_ASPagerTabStrip_1_initWithASPagerTabStrip_(ASPagerTabStrip *outer$) {
  J2OBJC_NEW_IMPL(ASPagerTabStrip_1, initWithASPagerTabStrip_, outer$)
}

ASPagerTabStrip_1 *create_ASPagerTabStrip_1_initWithASPagerTabStrip_(ASPagerTabStrip *outer$) {
  J2OBJC_CREATE_IMPL(ASPagerTabStrip_1, initWithASPagerTabStrip_, outer$)
}

@implementation ASPagerTabStrip_2

- (instancetype)initWithASPagerTabStrip:(ASPagerTabStrip *)outer$ {
  ASPagerTabStrip_2_initWithASPagerTabStrip_(self, outer$);
  return self;
}

- (void)onClickWithADView:(ADView *)v {
  [((ASViewPager *) nil_chk(this$0_->mPager_)) setCurrentItemWithInt:[this$0_->mPager_ getCurrentItem] + 1];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASPagerTabStrip:);
  methods[1].selector = @selector(onClickWithADView:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASPagerTabStrip;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASPagerTabStrip;", "onClick", "LADView;", "init__WithASHasWidgets:" };
  static const J2ObjcClassInfo _ASPagerTabStrip_2 = { "", "androidx.viewpager.widget", ptrTable, methods, fields, 7, 0x8010, 2, 1, 0, -1, 3, -1, -1 };
  return &_ASPagerTabStrip_2;
}

@end

void ASPagerTabStrip_2_initWithASPagerTabStrip_(ASPagerTabStrip_2 *self, ASPagerTabStrip *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

ASPagerTabStrip_2 *new_ASPagerTabStrip_2_initWithASPagerTabStrip_(ASPagerTabStrip *outer$) {
  J2OBJC_NEW_IMPL(ASPagerTabStrip_2, initWithASPagerTabStrip_, outer$)
}

ASPagerTabStrip_2 *create_ASPagerTabStrip_2_initWithASPagerTabStrip_(ASPagerTabStrip *outer$) {
  J2OBJC_CREATE_IMPL(ASPagerTabStrip_2, initWithASPagerTabStrip_, outer$)
}
