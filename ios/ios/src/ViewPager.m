//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\IOSViewPagerPlugin\src\main\java\androidx\viewpager\widget\ViewPager.java
//

#include "Canvas.h"
#include "DataSetObserver.h"
#include "Drawable.h"
#include "Gravity.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "Log.h"
#include "PagerAdapter.h"
#include "Parcelable.h"
#include "Rect.h"
#include "Resources.h"
#include "View.h"
#include "ViewGroup.h"
#include "ViewPager.h"
#include "ViewParent.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/Comparator.h"
#include "java/util/List.h"
#include "java/util/function/Function.h"
#include "java/util/function/ToDoubleFunction.h"
#include "java/util/function/ToIntFunction.h"
#include "java/util/function/ToLongFunction.h"

@class ASViewPager_PagerObserver;
@class JavaLangClassLoader;
@class JavaUtilArrayList;
@protocol JavaUtilComparator;
@protocol JavaUtilFunctionFunction;
@protocol JavaUtilFunctionToDoubleFunction;
@protocol JavaUtilFunctionToIntFunction;
@protocol JavaUtilFunctionToLongFunction;
@protocol JavaUtilList;


#pragma clang diagnostic ignored "-Wprotocol"

@interface ASViewPager () {
 @public
  jint mExpectedAdapterCount_;
  JavaUtilArrayList *mItems_;
  ASViewPager_ItemInfo *mTempItem_;
  ADRect *mTempRect_;
  jint mRestoredCurItem_;
  id<ADParcelable> mRestoredAdapterState_;
  JavaLangClassLoader *mRestoredClassLoader_;
  jboolean mIsScrollStarted_;
  ASViewPager_PagerObserver *mObserver_;
  jint mPageMargin_;
  ADDrawable *mMarginDrawable_;
  jint mTopPageBounds_;
  jint mBottomPageBounds_;
  jfloat mFirstOffset_;
  jfloat mLastOffset_;
  jboolean mInLayout_;
  jboolean mScrollingCacheEnabled_;
  jboolean mPopulatePending_;
  jint mOffscreenPageLimit_;
  jboolean mIsBeingDragged_;
  jboolean mIsUnableToDrag_;
  jint mDefaultGutterSize_;
  jint mGutterSize_;
  jint mTouchSlop_ViewPager_;
  jboolean mDragInGutterEnabled_;
  jfloat mLastMotionX_;
  jfloat mLastMotionY_;
  jfloat mInitialMotionX_;
  jfloat mInitialMotionY_;
  jint mActivePointerId_;
  jint mMinimumVelocity_;
  jint mMaximumVelocity_;
  jint mFlingDistance_;
  jint mCloseEnough_;
  jboolean mFakeDragging_;
  jboolean mFirstLayout_;
  jboolean mCalledSuper_;
  jint mDecorChildCount_;
  id<JavaUtilList> mOnPageChangeListeners_;
  id<ASViewPager_OnPageChangeListener> mOnPageChangeListener_;
  id<ASViewPager_OnPageChangeListener> mInternalPageChangeListener_;
  id<JavaUtilList> mAdapterChangeListeners_;
  id<ASViewPager_PageTransformer> mPageTransformer_;
  jint mPageTransformerLayerType_;
  jint mDrawingOrder_;
  JavaUtilArrayList *mDrawingOrderedChildren_;
  jint mScrollState_;
}

- (void)removeNonDecorViews;

- (jint)getClientWidth;

- (void)sortChildDrawingOrder;

- (void)calculatePageOffsetsWithASViewPager_ItemInfo:(ASViewPager_ItemInfo *)curItem
                                             withInt:(jint)curIndex
                            withASViewPager_ItemInfo:(ASViewPager_ItemInfo *)oldCurInfo;

- (void)recomputeScrollPositionWithInt:(jint)width
                               withInt:(jint)oldWidth
                               withInt:(jint)margin
                               withInt:(jint)oldMargin;

- (void)dispatchOnPageScrolledWithInt:(jint)position
                            withFloat:(jfloat)offset
                              withInt:(jint)offsetPixels;

- (void)dispatchOnPageSelectedWithInt:(jint)position;

- (jboolean)performDragWithFloat:(jfloat)x
                       withFloat:(jfloat)y;

- (ASViewPager_ItemInfo *)infoForCurrentScrollPosition;

- (jint)determineTargetPageWithInt:(jint)currentPage
                         withFloat:(jfloat)pageOffset
                           withInt:(jint)velocity
                           withInt:(jint)deltaX;

- (void)endDrag;

- (ADRect *)getChildRectInPagerCoordinatesWithADRect:(ADRect *)outRect
                                          withADView:(ADView *)child;

- (void)completeScrollWithBoolean:(jboolean)postEvents;

- (void)setScrollingCacheEnabledWithBoolean:(jboolean)b;

- (void)setChildrenDrawingOrderEnabledWithBoolean:(jboolean)hasTransformer;

- (jfloat)releaseHorizontalGlowWithFloat:(jfloat)dX
                               withFloat:(jfloat)y;

- (jboolean)isDecorViewWithADView:(ADView *)child;

@end

J2OBJC_FIELD_SETTER(ASViewPager, mItems_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ASViewPager, mTempItem_, ASViewPager_ItemInfo *)
J2OBJC_FIELD_SETTER(ASViewPager, mTempRect_, ADRect *)
J2OBJC_FIELD_SETTER(ASViewPager, mRestoredAdapterState_, id<ADParcelable>)
J2OBJC_FIELD_SETTER(ASViewPager, mRestoredClassLoader_, JavaLangClassLoader *)
J2OBJC_FIELD_SETTER(ASViewPager, mObserver_, ASViewPager_PagerObserver *)
J2OBJC_FIELD_SETTER(ASViewPager, mMarginDrawable_, ADDrawable *)
J2OBJC_FIELD_SETTER(ASViewPager, mOnPageChangeListeners_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ASViewPager, mOnPageChangeListener_, id<ASViewPager_OnPageChangeListener>)
J2OBJC_FIELD_SETTER(ASViewPager, mInternalPageChangeListener_, id<ASViewPager_OnPageChangeListener>)
J2OBJC_FIELD_SETTER(ASViewPager, mAdapterChangeListeners_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ASViewPager, mPageTransformer_, id<ASViewPager_PageTransformer>)
J2OBJC_FIELD_SETTER(ASViewPager, mDrawingOrderedChildren_, JavaUtilArrayList *)

inline NSString *ASViewPager_get_TAG(void);
static NSString *ASViewPager_TAG = @"ViewPager";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASViewPager, TAG, NSString *)

inline jboolean ASViewPager_get_DEBUG(void);
#define ASViewPager_DEBUG false
J2OBJC_STATIC_FIELD_CONSTANT(ASViewPager, DEBUG, jboolean)

inline jint ASViewPager_get_DEFAULT_OFFSCREEN_PAGES(void);
#define ASViewPager_DEFAULT_OFFSCREEN_PAGES 1
J2OBJC_STATIC_FIELD_CONSTANT(ASViewPager, DEFAULT_OFFSCREEN_PAGES, jint)

inline jint ASViewPager_get_MAX_SETTLE_DURATION(void);
#define ASViewPager_MAX_SETTLE_DURATION 600
J2OBJC_STATIC_FIELD_CONSTANT(ASViewPager, MAX_SETTLE_DURATION, jint)

inline jint ASViewPager_get_MIN_DISTANCE_FOR_FLING(void);
#define ASViewPager_MIN_DISTANCE_FOR_FLING 25
J2OBJC_STATIC_FIELD_CONSTANT(ASViewPager, MIN_DISTANCE_FOR_FLING, jint)

inline jint ASViewPager_get_DEFAULT_GUTTER_SIZE(void);
#define ASViewPager_DEFAULT_GUTTER_SIZE 16
J2OBJC_STATIC_FIELD_CONSTANT(ASViewPager, DEFAULT_GUTTER_SIZE, jint)

inline jint ASViewPager_get_MIN_FLING_VELOCITY(void);
#define ASViewPager_MIN_FLING_VELOCITY 400
J2OBJC_STATIC_FIELD_CONSTANT(ASViewPager, MIN_FLING_VELOCITY, jint)

inline id<JavaUtilComparator> ASViewPager_get_COMPARATOR(void);
static id<JavaUtilComparator> ASViewPager_COMPARATOR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASViewPager, COMPARATOR, id<JavaUtilComparator>)

inline jint ASViewPager_get_INVALID_POINTER(void);
#define ASViewPager_INVALID_POINTER -1
J2OBJC_STATIC_FIELD_CONSTANT(ASViewPager, INVALID_POINTER, jint)

inline jint ASViewPager_get_CLOSE_ENOUGH(void);
#define ASViewPager_CLOSE_ENOUGH 2
J2OBJC_STATIC_FIELD_CONSTANT(ASViewPager, CLOSE_ENOUGH, jint)

inline jint ASViewPager_get_DRAW_ORDER_DEFAULT(void);
#define ASViewPager_DRAW_ORDER_DEFAULT 0
J2OBJC_STATIC_FIELD_CONSTANT(ASViewPager, DRAW_ORDER_DEFAULT, jint)

inline jint ASViewPager_get_DRAW_ORDER_FORWARD(void);
#define ASViewPager_DRAW_ORDER_FORWARD 1
J2OBJC_STATIC_FIELD_CONSTANT(ASViewPager, DRAW_ORDER_FORWARD, jint)

inline jint ASViewPager_get_DRAW_ORDER_REVERSE(void);
#define ASViewPager_DRAW_ORDER_REVERSE 2
J2OBJC_STATIC_FIELD_CONSTANT(ASViewPager, DRAW_ORDER_REVERSE, jint)

inline ASViewPager_ViewPositionComparator *ASViewPager_get_sPositionComparator(void);
static ASViewPager_ViewPositionComparator *ASViewPager_sPositionComparator;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASViewPager, sPositionComparator, ASViewPager_ViewPositionComparator *)

__attribute__((unused)) static void ASViewPager_removeNonDecorViews(ASViewPager *self);

__attribute__((unused)) static jint ASViewPager_getClientWidth(ASViewPager *self);

__attribute__((unused)) static void ASViewPager_sortChildDrawingOrder(ASViewPager *self);

__attribute__((unused)) static void ASViewPager_calculatePageOffsetsWithASViewPager_ItemInfo_withInt_withASViewPager_ItemInfo_(ASViewPager *self, ASViewPager_ItemInfo *curItem, jint curIndex, ASViewPager_ItemInfo *oldCurInfo);

__attribute__((unused)) static void ASViewPager_recomputeScrollPositionWithInt_withInt_withInt_withInt_(ASViewPager *self, jint width, jint oldWidth, jint margin, jint oldMargin);

__attribute__((unused)) static void ASViewPager_dispatchOnPageScrolledWithInt_withFloat_withInt_(ASViewPager *self, jint position, jfloat offset, jint offsetPixels);

__attribute__((unused)) static void ASViewPager_dispatchOnPageSelectedWithInt_(ASViewPager *self, jint position);

__attribute__((unused)) static jboolean ASViewPager_performDragWithFloat_withFloat_(ASViewPager *self, jfloat x, jfloat y);

__attribute__((unused)) static ASViewPager_ItemInfo *ASViewPager_infoForCurrentScrollPosition(ASViewPager *self);

__attribute__((unused)) static jint ASViewPager_determineTargetPageWithInt_withFloat_withInt_withInt_(ASViewPager *self, jint currentPage, jfloat pageOffset, jint velocity, jint deltaX);

__attribute__((unused)) static void ASViewPager_endDrag(ASViewPager *self);

__attribute__((unused)) static ADRect *ASViewPager_getChildRectInPagerCoordinatesWithADRect_withADView_(ASViewPager *self, ADRect *outRect, ADView *child);

__attribute__((unused)) static void ASViewPager_completeScrollWithBoolean_(ASViewPager *self, jboolean postEvents);

__attribute__((unused)) static void ASViewPager_setScrollingCacheEnabledWithBoolean_(ASViewPager *self, jboolean b);

__attribute__((unused)) static void ASViewPager_setChildrenDrawingOrderEnabledWithBoolean_(ASViewPager *self, jboolean hasTransformer);

__attribute__((unused)) static jfloat ASViewPager_releaseHorizontalGlowWithFloat_withFloat_(ASViewPager *self, jfloat dX, jfloat y);

__attribute__((unused)) static jboolean ASViewPager_isDecorViewWithADView_(ASViewPager *self, ADView *child);

@interface ASViewPager_1 : NSObject < JavaUtilComparator >

- (instancetype)init;

- (jint)compareWithId:(ASViewPager_ItemInfo *)lhs
               withId:(ASViewPager_ItemInfo *)rhs;

@end

J2OBJC_EMPTY_STATIC_INIT(ASViewPager_1)

__attribute__((unused)) static void ASViewPager_1_init(ASViewPager_1 *self);

__attribute__((unused)) static ASViewPager_1 *new_ASViewPager_1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASViewPager_1 *create_ASViewPager_1_init(void);

@interface ASViewPager_OnPageChangeListener : NSObject

@end

@interface ASViewPager_PageTransformer : NSObject

@end

@interface ASViewPager_OnAdapterChangeListener : NSObject

@end

@interface ASViewPager_PagerObserver : ADDataSetObserver {
 @public
  ASViewPager *this$0_;
}

- (instancetype)initWithASViewPager:(ASViewPager *)outer$;

- (void)onChanged;

- (void)onInvalidated;

@end

J2OBJC_EMPTY_STATIC_INIT(ASViewPager_PagerObserver)

__attribute__((unused)) static void ASViewPager_PagerObserver_initWithASViewPager_(ASViewPager_PagerObserver *self, ASViewPager *outer$);

__attribute__((unused)) static ASViewPager_PagerObserver *new_ASViewPager_PagerObserver_initWithASViewPager_(ASViewPager *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASViewPager_PagerObserver *create_ASViewPager_PagerObserver_initWithASViewPager_(ASViewPager *outer$);

J2OBJC_TYPE_LITERAL_HEADER(ASViewPager_PagerObserver)

@interface ASViewPager_IDecorView : NSObject

@end

J2OBJC_INITIALIZED_DEFN(ASViewPager)

@implementation ASViewPager

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASViewPager_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setAdapterWithASPagerAdapter:(ASPagerAdapter *)adapter {
  if (mAdapter_ != nil) {
    [mAdapter_ setViewPagerObserverWithADDataSetObserver:nil];
    [((ASPagerAdapter *) nil_chk(mAdapter_)) startUpdateWithADViewGroup:self];
    for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(mItems_)) size]; i++) {
      ASViewPager_ItemInfo *ii = [mItems_ getWithInt:i];
      [((ASPagerAdapter *) nil_chk(mAdapter_)) destroyItemWithADViewGroup:self withInt:((ASViewPager_ItemInfo *) nil_chk(ii))->position_ withId:ii->object_];
    }
    [((ASPagerAdapter *) nil_chk(mAdapter_)) finishUpdateWithADViewGroup:self];
    [mItems_ clear];
    ASViewPager_removeNonDecorViews(self);
    mCurItem_ = 0;
    [self scrollToWithInt:0 withInt:0];
  }
  ASPagerAdapter *oldAdapter = mAdapter_;
  mAdapter_ = adapter;
  mExpectedAdapterCount_ = 0;
  if (mAdapter_ != nil) {
    if (mObserver_ == nil) {
      mObserver_ = new_ASViewPager_PagerObserver_initWithASViewPager_(self);
    }
    [((ASPagerAdapter *) nil_chk(mAdapter_)) setViewPagerObserverWithADDataSetObserver:mObserver_];
    mPopulatePending_ = false;
    jboolean wasFirstLayout = mFirstLayout_;
    mFirstLayout_ = true;
    mExpectedAdapterCount_ = [((ASPagerAdapter *) nil_chk(mAdapter_)) getCount];
    if (mRestoredCurItem_ >= 0) {
      [((ASPagerAdapter *) nil_chk(mAdapter_)) restoreStateWithADParcelable:mRestoredAdapterState_ withJavaLangClassLoader:mRestoredClassLoader_];
      [self setCurrentItemInternalWithInt:mRestoredCurItem_ withBoolean:false withBoolean:true];
      mRestoredCurItem_ = -1;
      mRestoredAdapterState_ = nil;
      mRestoredClassLoader_ = nil;
    }
    else if (!wasFirstLayout) {
      [self populate];
    }
    else {
      [self requestLayout];
    }
  }
  if (mAdapterChangeListeners_ != nil && ![mAdapterChangeListeners_ isEmpty]) {
    for (jint i = 0, count = [mAdapterChangeListeners_ size]; i < count; i++) {
      [((id<ASViewPager_OnAdapterChangeListener>) nil_chk([((id<JavaUtilList>) nil_chk(mAdapterChangeListeners_)) getWithInt:i])) onAdapterChangedWithASViewPager:self withASPagerAdapter:oldAdapter withASPagerAdapter:adapter];
    }
  }
}

- (void)removeNonDecorViews {
  ASViewPager_removeNonDecorViews(self);
}

- (ASPagerAdapter *)getAdapter {
  return mAdapter_;
}

- (void)addOnAdapterChangeListenerWithASViewPager_OnAdapterChangeListener:(id<ASViewPager_OnAdapterChangeListener>)listener {
  if (mAdapterChangeListeners_ == nil) {
    mAdapterChangeListeners_ = new_JavaUtilArrayList_init();
  }
  [mAdapterChangeListeners_ addWithId:listener];
}

- (void)removeOnAdapterChangeListenerWithASViewPager_OnAdapterChangeListener:(id<ASViewPager_OnAdapterChangeListener>)listener {
  if (mAdapterChangeListeners_ != nil) {
    [mAdapterChangeListeners_ removeWithId:listener];
  }
}

- (jint)getClientWidth {
  return ASViewPager_getClientWidth(self);
}

- (void)setCurrentItemWithInt:(jint)item {
  mPopulatePending_ = false;
  [self setCurrentItemInternalWithInt:item withBoolean:!mFirstLayout_ withBoolean:false];
}

- (void)setCurrentItemWithInt:(jint)item
                  withBoolean:(jboolean)smoothScroll {
  mPopulatePending_ = false;
  [self setCurrentItemInternalWithInt:item withBoolean:smoothScroll withBoolean:false];
}

- (jint)getCurrentItem {
  return mCurItem_;
}

- (void)setCurrentItemInternalWithInt:(jint)item
                          withBoolean:(jboolean)smoothScroll
                          withBoolean:(jboolean)always {
  [self setCurrentItemInternalWithInt:item withBoolean:smoothScroll withBoolean:always withInt:0];
}

- (void)setCurrentItemInternalWithInt:(jint)item
                          withBoolean:(jboolean)smoothScroll
                          withBoolean:(jboolean)always
                              withInt:(jint)velocity {
  if (mAdapter_ == nil || [mAdapter_ getCount] <= 0) {
    ASViewPager_setScrollingCacheEnabledWithBoolean_(self, false);
    return;
  }
  if (!always && mCurItem_ == item && [((JavaUtilArrayList *) nil_chk(mItems_)) size] != 0) {
    ASViewPager_setScrollingCacheEnabledWithBoolean_(self, false);
    return;
  }
  if (item < 0) {
    item = 0;
  }
  else if (item >= [((ASPagerAdapter *) nil_chk(mAdapter_)) getCount]) {
    item = [((ASPagerAdapter *) nil_chk(mAdapter_)) getCount] - 1;
  }
  jint pageLimit = mOffscreenPageLimit_;
  if (item > (mCurItem_ + pageLimit) || item < (mCurItem_ - pageLimit)) {
    for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(mItems_)) size]; i++) {
      ((ASViewPager_ItemInfo *) nil_chk([mItems_ getWithInt:i]))->scrolling_ = true;
    }
  }
  jboolean dispatchSelected = mCurItem_ != item;
  if (mFirstLayout_) {
    mCurItem_ = item;
    if (dispatchSelected) {
      ASViewPager_dispatchOnPageSelectedWithInt_(self, item);
    }
    [self requestLayout];
  }
  else {
    [self populateWithInt:item];
    [self scrollToItemWithInt:item withBoolean:smoothScroll withInt:velocity withBoolean:dispatchSelected];
  }
}

- (void)scrollToItemWithInt:(jint)item
                withBoolean:(jboolean)smoothScroll
                    withInt:(jint)velocity
                withBoolean:(jboolean)dispatchSelected {
  ASViewPager_ItemInfo *curInfo = [self infoForPositionWithInt:item];
  jint destX = 0;
  if (curInfo != nil) {
    jint width = ASViewPager_getClientWidth(self);
    destX = JreFpToInt((width * JavaLangMath_maxWithFloat_withFloat_(mFirstOffset_, JavaLangMath_minWithFloat_withFloat_(curInfo->offset_, mLastOffset_))));
  }
  if (smoothScroll) {
    [self smoothScrollToWithInt:destX withInt:0 withInt:velocity];
    if (dispatchSelected) {
      ASViewPager_dispatchOnPageSelectedWithInt_(self, item);
    }
  }
  else {
    if (dispatchSelected) {
      ASViewPager_dispatchOnPageSelectedWithInt_(self, item);
    }
    ASViewPager_completeScrollWithBoolean_(self, false);
    [self scrollToWithInt:destX withInt:0];
    [self pageScrolledWithInt:destX];
  }
}

- (void)setOnPageChangeListenerWithASViewPager_OnPageChangeListener:(id<ASViewPager_OnPageChangeListener>)listener {
  mOnPageChangeListener_ = listener;
}

- (void)setPageTransformerWithBoolean:(jboolean)reverseDrawingOrder
      withASViewPager_PageTransformer:(id<ASViewPager_PageTransformer>)transformer {
  [self setPageTransformerWithBoolean:reverseDrawingOrder withASViewPager_PageTransformer:transformer withInt:ADView_LAYER_TYPE_HARDWARE];
}

- (void)setPageTransformerWithBoolean:(jboolean)reverseDrawingOrder
      withASViewPager_PageTransformer:(id<ASViewPager_PageTransformer>)transformer
                              withInt:(jint)pageLayerType {
  jboolean hasTransformer = transformer != nil;
  jboolean needsPopulate = hasTransformer != (mPageTransformer_ != nil);
  mPageTransformer_ = transformer;
  ASViewPager_setChildrenDrawingOrderEnabledWithBoolean_(self, hasTransformer);
  if (hasTransformer) {
    mDrawingOrder_ = reverseDrawingOrder ? ASViewPager_DRAW_ORDER_REVERSE : ASViewPager_DRAW_ORDER_FORWARD;
    mPageTransformerLayerType_ = pageLayerType;
  }
  else {
    mDrawingOrder_ = ASViewPager_DRAW_ORDER_DEFAULT;
  }
  if (needsPopulate) [self populate];
}

- (id<ASViewPager_OnPageChangeListener>)setInternalPageChangeListenerWithASViewPager_OnPageChangeListener:(id<ASViewPager_OnPageChangeListener>)listener {
  id<ASViewPager_OnPageChangeListener> oldListener = mInternalPageChangeListener_;
  mInternalPageChangeListener_ = listener;
  return oldListener;
}

- (jint)getOffscreenPageLimit {
  return mOffscreenPageLimit_;
}

- (void)setOffscreenPageLimitWithInt:(jint)limit {
  if (limit < ASViewPager_DEFAULT_OFFSCREEN_PAGES) {
    ADLog_wWithNSString_withNSString_(ASViewPager_TAG, JreStrcat("$I$I", @"Requested offscreen page limit ", limit, @" too small; defaulting to ", ASViewPager_DEFAULT_OFFSCREEN_PAGES));
    limit = ASViewPager_DEFAULT_OFFSCREEN_PAGES;
  }
  if (limit != mOffscreenPageLimit_) {
    mOffscreenPageLimit_ = limit;
    [self populate];
  }
}

- (void)setPageMarginWithInt:(jint)marginPixels {
  jint oldMargin = mPageMargin_;
  mPageMargin_ = marginPixels;
  jint width = [self getWidth];
  ASViewPager_recomputeScrollPositionWithInt_withInt_withInt_withInt_(self, width, width, marginPixels, oldMargin);
  [self requestLayout];
}

- (jint)getPageMargin {
  return mPageMargin_;
}

- (void)setPageMarginDrawableWithADDrawable:(ADDrawable *)d {
  mMarginDrawable_ = d;
  if (d != nil) [self refreshDrawableState];
  [self setWillNotDrawWithBoolean:d == nil];
  [self invalidate];
}

- (void)drawableStateChanged {
  [super drawableStateChanged];
  ADDrawable *d = mMarginDrawable_;
  if (d != nil && [d isStateful]) {
    [d setStateWithIntArray:[self getDrawableState]];
  }
}

- (ASViewPager_ItemInfo *)addNewItemWithInt:(jint)position
                                    withInt:(jint)index {
  ASViewPager_ItemInfo *ii = new_ASViewPager_ItemInfo_init();
  ii->position_ = position;
  ii->object_ = [((ASPagerAdapter *) nil_chk(mAdapter_)) instantiateItemWithADViewGroup:self withInt:position];
  ii->widthFactor_ = [((ASPagerAdapter *) nil_chk(mAdapter_)) getPageWidthWithInt:position];
  if (index < 0 || index >= [((JavaUtilArrayList *) nil_chk(mItems_)) size]) {
    [((JavaUtilArrayList *) nil_chk(mItems_)) addWithId:ii];
  }
  else {
    [((JavaUtilArrayList *) nil_chk(mItems_)) addWithInt:index withId:ii];
  }
  return ii;
}

- (void)dataSetChanged {
  jint adapterCount = [((ASPagerAdapter *) nil_chk(mAdapter_)) getCount];
  mExpectedAdapterCount_ = adapterCount;
  jboolean needPopulate = [((JavaUtilArrayList *) nil_chk(mItems_)) size] < mOffscreenPageLimit_ * 2 + 1 && [mItems_ size] < adapterCount;
  jint newCurrItem = mCurItem_;
  jboolean isUpdating = false;
  for (jint i = 0; i < [mItems_ size]; i++) {
    ASViewPager_ItemInfo *ii = [mItems_ getWithInt:i];
    jint newPos = [((ASPagerAdapter *) nil_chk(mAdapter_)) getItemPositionWithId:((ASViewPager_ItemInfo *) nil_chk(ii))->object_];
    if (newPos == ASPagerAdapter_POSITION_UNCHANGED) {
      continue;
    }
    if (newPos == ASPagerAdapter_POSITION_NONE) {
      (void) [mItems_ removeWithInt:i];
      i--;
      if (!isUpdating) {
        [((ASPagerAdapter *) nil_chk(mAdapter_)) startUpdateWithADViewGroup:self];
        isUpdating = true;
      }
      [((ASPagerAdapter *) nil_chk(mAdapter_)) destroyItemWithADViewGroup:self withInt:ii->position_ withId:ii->object_];
      needPopulate = true;
      if (mCurItem_ == ii->position_) {
        newCurrItem = JavaLangMath_maxWithInt_withInt_(0, JavaLangMath_minWithInt_withInt_(mCurItem_, adapterCount - 1));
        needPopulate = true;
      }
      continue;
    }
    if (ii->position_ != newPos) {
      if (ii->position_ == mCurItem_) {
        newCurrItem = newPos;
      }
      ii->position_ = newPos;
      needPopulate = true;
    }
  }
  if (isUpdating) {
    [((ASPagerAdapter *) nil_chk(mAdapter_)) finishUpdateWithADViewGroup:self];
  }
  JavaUtilCollections_sortWithJavaUtilList_withJavaUtilComparator_(mItems_, ASViewPager_COMPARATOR);
  if (needPopulate) {
    jint childCount = [self getChildCount];
    for (jint i = 0; i < childCount; i++) {
      ADView *child = [self getChildAtWithInt:i];
      ASViewPager_LayoutParams *lp = (ASViewPager_LayoutParams *) cast_chk([((ADView *) nil_chk(child)) getLayoutParams], [ASViewPager_LayoutParams class]);
      if (!((ASViewPager_LayoutParams *) nil_chk(lp))->isDecor_) {
        lp->widthFactor_ = 0.f;
      }
    }
    [self setCurrentItemInternalWithInt:newCurrItem withBoolean:false withBoolean:true];
    [self requestLayout];
  }
}

- (void)populate {
  [self populateWithInt:mCurItem_];
}

- (void)populateWithInt:(jint)newCurrentItem {
  ASViewPager_ItemInfo *oldCurInfo = nil;
  if (mCurItem_ != newCurrentItem) {
    oldCurInfo = [self infoForPositionWithInt:mCurItem_];
    mCurItem_ = newCurrentItem;
  }
  if (mAdapter_ == nil) {
    ASViewPager_sortChildDrawingOrder(self);
    return;
  }
  if (mPopulatePending_) {
    ASViewPager_sortChildDrawingOrder(self);
    return;
  }
  [mAdapter_ startUpdateWithADViewGroup:self];
  jint pageLimit = mOffscreenPageLimit_;
  jint startPos = JavaLangMath_maxWithInt_withInt_(0, mCurItem_ - pageLimit);
  jint N = [((ASPagerAdapter *) nil_chk(mAdapter_)) getCount];
  jint endPos = JavaLangMath_minWithInt_withInt_(N - 1, mCurItem_ + pageLimit);
  if (N != mExpectedAdapterCount_) {
    NSString *resName;
    @try {
      resName = [((ADResources *) nil_chk([self getResources])) getResourceNameWithInt:[self getId]];
    }
    @catch (ADResources_NotFoundException *e) {
      resName = JavaLangInteger_toHexStringWithInt_([self getId]);
    }
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I$I$$$@$@", @"The application's PagerAdapter changed the adapter's contents without calling PagerAdapter#notifyDataSetChanged! Expected adapter item count: ", mExpectedAdapterCount_, @", found: ", N, @" Pager id: ", resName, @" Pager class: ", [self java_getClass], @" Problematic adapter: ", [((ASPagerAdapter *) nil_chk(mAdapter_)) java_getClass]));
  }
  jint curIndex = -1;
  ASViewPager_ItemInfo *curItem = nil;
  for (curIndex = 0; curIndex < [((JavaUtilArrayList *) nil_chk(mItems_)) size]; curIndex++) {
    ASViewPager_ItemInfo *ii = [mItems_ getWithInt:curIndex];
    if (((ASViewPager_ItemInfo *) nil_chk(ii))->position_ >= mCurItem_) {
      if (ii->position_ == mCurItem_) curItem = ii;
      break;
    }
  }
  if (curItem == nil && N > 0) {
    curItem = [self addNewItemWithInt:mCurItem_ withInt:curIndex];
  }
  if (curItem != nil) {
    jfloat extraWidthLeft = 0.f;
    jint itemIndex = curIndex - 1;
    ASViewPager_ItemInfo *ii = itemIndex >= 0 ? [mItems_ getWithInt:itemIndex] : nil;
    jint clientWidth = ASViewPager_getClientWidth(self);
    jfloat leftWidthNeeded = clientWidth <= 0 ? 0 : 2.f - curItem->widthFactor_ + (jfloat) [self getPaddingLeft] / (jfloat) clientWidth;
    for (jint pos = mCurItem_ - 1; pos >= 0; pos--) {
      if (extraWidthLeft >= leftWidthNeeded && pos < startPos) {
        if (ii == nil) {
          break;
        }
        if (pos == ii->position_ && !ii->scrolling_) {
          (void) [mItems_ removeWithInt:itemIndex];
          [((ASPagerAdapter *) nil_chk(mAdapter_)) destroyItemWithADViewGroup:self withInt:pos withId:ii->object_];
          itemIndex--;
          curIndex--;
          ii = itemIndex >= 0 ? [mItems_ getWithInt:itemIndex] : nil;
        }
      }
      else if (ii != nil && pos == ii->position_) {
        JrePlusAssignFloatF(&extraWidthLeft, ii->widthFactor_);
        itemIndex--;
        ii = itemIndex >= 0 ? [mItems_ getWithInt:itemIndex] : nil;
      }
      else {
        ii = [self addNewItemWithInt:pos withInt:itemIndex + 1];
        JrePlusAssignFloatF(&extraWidthLeft, ((ASViewPager_ItemInfo *) nil_chk(ii))->widthFactor_);
        curIndex++;
        ii = itemIndex >= 0 ? [mItems_ getWithInt:itemIndex] : nil;
      }
    }
    jfloat extraWidthRight = curItem->widthFactor_;
    itemIndex = curIndex + 1;
    if (extraWidthRight < 2.f) {
      ii = itemIndex < [mItems_ size] ? [mItems_ getWithInt:itemIndex] : nil;
      jfloat rightWidthNeeded = clientWidth <= 0 ? 0 : (jfloat) [self getPaddingRight] / (jfloat) clientWidth + 2.f;
      for (jint pos = mCurItem_ + 1; pos < N; pos++) {
        if (extraWidthRight >= rightWidthNeeded && pos > endPos) {
          if (ii == nil) {
            break;
          }
          if (pos == ii->position_ && !ii->scrolling_) {
            (void) [mItems_ removeWithInt:itemIndex];
            [((ASPagerAdapter *) nil_chk(mAdapter_)) destroyItemWithADViewGroup:self withInt:pos withId:ii->object_];
            ii = itemIndex < [mItems_ size] ? [mItems_ getWithInt:itemIndex] : nil;
          }
        }
        else if (ii != nil && pos == ii->position_) {
          JrePlusAssignFloatF(&extraWidthRight, ii->widthFactor_);
          itemIndex++;
          ii = itemIndex < [mItems_ size] ? [mItems_ getWithInt:itemIndex] : nil;
        }
        else {
          ii = [self addNewItemWithInt:pos withInt:itemIndex];
          itemIndex++;
          JrePlusAssignFloatF(&extraWidthRight, ((ASViewPager_ItemInfo *) nil_chk(ii))->widthFactor_);
          ii = itemIndex < [mItems_ size] ? [mItems_ getWithInt:itemIndex] : nil;
        }
      }
    }
    ASViewPager_calculatePageOffsetsWithASViewPager_ItemInfo_withInt_withASViewPager_ItemInfo_(self, curItem, curIndex, oldCurInfo);
    [((ASPagerAdapter *) nil_chk(mAdapter_)) setPrimaryItemWithADViewGroup:self withInt:mCurItem_ withId:curItem->object_];
  }
  [((ASPagerAdapter *) nil_chk(mAdapter_)) finishUpdateWithADViewGroup:self];
  jint childCount = [self getChildCount];
  for (jint i = 0; i < childCount; i++) {
    ADView *child = [self getChildAtWithInt:i];
    ASViewPager_LayoutParams *lp = (ASViewPager_LayoutParams *) cast_chk([((ADView *) nil_chk(child)) getLayoutParams], [ASViewPager_LayoutParams class]);
    ((ASViewPager_LayoutParams *) nil_chk(lp))->childIndex_ = i;
    if (!lp->isDecor_ && lp->widthFactor_ == 0.f) {
      ASViewPager_ItemInfo *ii = [self infoForChildWithADView:child];
      if (ii != nil) {
        lp->widthFactor_ = ii->widthFactor_;
        lp->position_ = ii->position_;
      }
    }
  }
  ASViewPager_sortChildDrawingOrder(self);
  if ([self hasFocus]) {
    ADView *currentFocused = [self findFocus];
    ASViewPager_ItemInfo *ii = currentFocused != nil ? [self infoForAnyChildWithADView:currentFocused] : nil;
    if (ii == nil || ii->position_ != mCurItem_) {
      for (jint i = 0; i < [self getChildCount]; i++) {
        ADView *child = [self getChildAtWithInt:i];
        ii = [self infoForChildWithADView:child];
        if (ii != nil && ii->position_ == mCurItem_) {
          {
            break;
          }
        }
      }
    }
  }
}

- (void)sortChildDrawingOrder {
  ASViewPager_sortChildDrawingOrder(self);
}

- (void)calculatePageOffsetsWithASViewPager_ItemInfo:(ASViewPager_ItemInfo *)curItem
                                             withInt:(jint)curIndex
                            withASViewPager_ItemInfo:(ASViewPager_ItemInfo *)oldCurInfo {
  ASViewPager_calculatePageOffsetsWithASViewPager_ItemInfo_withInt_withASViewPager_ItemInfo_(self, curItem, curIndex, oldCurInfo);
}

- (void)addViewWithADView:(ADView *)child
                  withInt:(jint)index
withADViewGroup_LayoutParams:(ADViewGroup_LayoutParams *)params {
  if (![self checkLayoutParamsWithADViewGroup_LayoutParams:params]) {
    params = [self generateLayoutParamsWithADViewGroup_LayoutParams:params];
  }
  ASViewPager_LayoutParams *lp = (ASViewPager_LayoutParams *) cast_chk(params, [ASViewPager_LayoutParams class]);
  ((ASViewPager_LayoutParams *) nil_chk(lp))->isDecor_ |= ASViewPager_isDecorViewWithADView_(self, child);
  if (mInLayout_) {
    if (lp != nil && lp->isDecor_) {
      @throw new_JavaLangIllegalStateException_initWithNSString_(@"Cannot add pager decor view during layout");
    }
    lp->needsMeasure_ = true;
    [self addViewInLayoutWithADView:child withInt:index withADViewGroup_LayoutParams:params];
  }
  else {
    [super addViewWithADView:child withInt:index withADViewGroup_LayoutParams:params];
  }
}

- (ASViewPager_ItemInfo *)infoForChildWithADView:(ADView *)child {
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(mItems_)) size]; i++) {
    ASViewPager_ItemInfo *ii = [mItems_ getWithInt:i];
    if ([((ASPagerAdapter *) nil_chk(mAdapter_)) isViewFromObjectWithADView:child withId:((ASViewPager_ItemInfo *) nil_chk(ii))->object_]) {
      return ii;
    }
  }
  return nil;
}

- (ASViewPager_ItemInfo *)infoForAnyChildWithADView:(ADView *)child {
  id<ADViewParent> parent;
  while ((parent = [((ADView *) nil_chk(child)) getParent]) != self) {
    if (!([parent isKindOfClass:[ADView class]])) {
      return nil;
    }
    child = (ADView *) cast_chk(parent, [ADView class]);
  }
  return [self infoForChildWithADView:child];
}

- (ASViewPager_ItemInfo *)infoForPositionWithInt:(jint)position {
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(mItems_)) size]; i++) {
    ASViewPager_ItemInfo *ii = [mItems_ getWithInt:i];
    if (((ASViewPager_ItemInfo *) nil_chk(ii))->position_ == position) {
      return ii;
    }
  }
  return nil;
}

- (void)onMeasureWithInt:(jint)widthMeasureSpec
                 withInt:(jint)heightMeasureSpec {
  [self setMeasuredDimensionWithInt:ADView_getDefaultSizeWithInt_withInt_(0, widthMeasureSpec) withInt:ADView_getDefaultSizeWithInt_withInt_(0, heightMeasureSpec)];
  jint measuredWidth = [self getMeasuredWidth];
  jint maxGutterSize = JreIntDiv(measuredWidth, 10);
  mGutterSize_ = JavaLangMath_minWithInt_withInt_(maxGutterSize, mDefaultGutterSize_);
  jint childWidthSize = measuredWidth - [self getPaddingLeft] - [self getPaddingRight];
  jint childHeightSize = [self getMeasuredHeight] - [self getPaddingTop] - [self getPaddingBottom];
  jint size = [self getChildCount];
  for (jint i = 0; i < size; ++i) {
    ADView *child = [self getChildAtWithInt:i];
    if ([((ADView *) nil_chk(child)) getVisibility] != ADView_GONE) {
      ASViewPager_LayoutParams *lp = (ASViewPager_LayoutParams *) cast_chk([child getLayoutParams], [ASViewPager_LayoutParams class]);
      if (lp != nil && lp->isDecor_) {
        jint hgrav = lp->gravity_ & ADGravity_HORIZONTAL_GRAVITY_MASK;
        jint vgrav = lp->gravity_ & ADGravity_VERTICAL_GRAVITY_MASK;
        jint widthMode = ADView_MeasureSpec_AT_MOST;
        jint heightMode = ADView_MeasureSpec_AT_MOST;
        jboolean consumeVertical = vgrav == ADGravity_TOP || vgrav == ADGravity_BOTTOM;
        jboolean consumeHorizontal = hgrav == ADGravity_LEFT || hgrav == ADGravity_RIGHT;
        if (consumeVertical) {
          widthMode = ADView_MeasureSpec_EXACTLY;
        }
        else if (consumeHorizontal) {
          heightMode = ADView_MeasureSpec_EXACTLY;
        }
        jint widthSize = childWidthSize;
        jint heightSize = childHeightSize;
        if (lp->width_ != ADViewGroup_LayoutParams_WRAP_CONTENT) {
          widthMode = ADView_MeasureSpec_EXACTLY;
          if (lp->width_ != ADViewGroup_LayoutParams_MATCH_PARENT) {
            widthSize = lp->width_;
          }
        }
        if (lp->height_ != ADViewGroup_LayoutParams_WRAP_CONTENT) {
          heightMode = ADView_MeasureSpec_EXACTLY;
          if (lp->height_ != ADViewGroup_LayoutParams_MATCH_PARENT) {
            heightSize = lp->height_;
          }
        }
        jint widthSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(widthSize, widthMode);
        jint heightSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(heightSize, heightMode);
        [child measureWithInt:widthSpec withInt:heightSpec];
        if (consumeVertical) {
          childHeightSize -= [child getMeasuredHeight];
        }
        else if (consumeHorizontal) {
          childWidthSize -= [child getMeasuredWidth];
        }
      }
    }
  }
  jint childWidthMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(childWidthSize, ADView_MeasureSpec_EXACTLY);
  jint childHeightMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(childHeightSize, ADView_MeasureSpec_EXACTLY);
  mInLayout_ = true;
  [self populate];
  mInLayout_ = false;
  size = [self getChildCount];
  for (jint i = 0; i < size; ++i) {
    ADView *child = [self getChildAtWithInt:i];
    if ([((ADView *) nil_chk(child)) getVisibility] != ADView_GONE) {
      ASViewPager_LayoutParams *lp = (ASViewPager_LayoutParams *) cast_chk([child getLayoutParams], [ASViewPager_LayoutParams class]);
      if (lp == nil || !lp->isDecor_) {
        jint widthSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(JreFpToInt((childWidthSize * ((ASViewPager_LayoutParams *) nil_chk(lp))->widthFactor_)), ADView_MeasureSpec_EXACTLY);
        [child measureWithInt:widthSpec withInt:childHeightMeasureSpec];
      }
    }
  }
}

- (void)recomputeScrollPositionWithInt:(jint)width
                               withInt:(jint)oldWidth
                               withInt:(jint)margin
                               withInt:(jint)oldMargin {
  ASViewPager_recomputeScrollPositionWithInt_withInt_withInt_withInt_(self, width, oldWidth, margin, oldMargin);
}

- (void)onLayoutWithBoolean:(jboolean)changed
                    withInt:(jint)l
                    withInt:(jint)t
                    withInt:(jint)r
                    withInt:(jint)b {
  jint count = [self getChildCount];
  jint width = r - l;
  jint height = b - t;
  jint paddingLeft = [self getPaddingLeft];
  jint paddingTop = [self getPaddingTop];
  jint paddingRight = [self getPaddingRight];
  jint paddingBottom = [self getPaddingBottom];
  jint scrollX = [self getScrollX];
  jint decorCount = 0;
  for (jint i = 0; i < count; i++) {
    ADView *child = [self getChildAtWithInt:i];
    if ([((ADView *) nil_chk(child)) getVisibility] != ADView_GONE) {
      ASViewPager_LayoutParams *lp = (ASViewPager_LayoutParams *) cast_chk([child getLayoutParams], [ASViewPager_LayoutParams class]);
      jint childLeft = 0;
      jint childTop = 0;
      if (((ASViewPager_LayoutParams *) nil_chk(lp))->isDecor_) {
        jint hgrav = lp->gravity_ & ADGravity_HORIZONTAL_GRAVITY_MASK;
        jint vgrav = lp->gravity_ & ADGravity_VERTICAL_GRAVITY_MASK;
        switch (hgrav) {
          default:
          childLeft = paddingLeft;
          break;
          case ADGravity_LEFT:
          childLeft = paddingLeft;
          paddingLeft += [child getMeasuredWidth];
          break;
          case ADGravity_CENTER_HORIZONTAL:
          childLeft = JavaLangMath_maxWithInt_withInt_(JreIntDiv((width - [child getMeasuredWidth]), 2), paddingLeft);
          break;
          case ADGravity_RIGHT:
          childLeft = width - paddingRight - [child getMeasuredWidth];
          paddingRight += [child getMeasuredWidth];
          break;
        }
        switch (vgrav) {
          default:
          childTop = paddingTop;
          break;
          case ADGravity_TOP:
          childTop = paddingTop;
          paddingTop += [child getMeasuredHeight];
          break;
          case ADGravity_CENTER_VERTICAL:
          childTop = JavaLangMath_maxWithInt_withInt_(JreIntDiv((height - [child getMeasuredHeight]), 2), paddingTop);
          break;
          case ADGravity_BOTTOM:
          childTop = height - paddingBottom - [child getMeasuredHeight];
          paddingBottom += [child getMeasuredHeight];
          break;
        }
        childLeft += scrollX;
        [child layoutWithInt:childLeft withInt:childTop withInt:childLeft + [child getMeasuredWidth] withInt:childTop + [child getMeasuredHeight]];
        decorCount++;
      }
    }
  }
  jint childWidth = width - paddingLeft - paddingRight;
  for (jint i = 0; i < count; i++) {
    ADView *child = [self getChildAtWithInt:i];
    if ([((ADView *) nil_chk(child)) getVisibility] != ADView_GONE) {
      ASViewPager_LayoutParams *lp = (ASViewPager_LayoutParams *) cast_chk([child getLayoutParams], [ASViewPager_LayoutParams class]);
      ASViewPager_ItemInfo *ii;
      if (!((ASViewPager_LayoutParams *) nil_chk(lp))->isDecor_ && (ii = [self infoForChildWithADView:child]) != nil) {
        jint loff = JreFpToInt((childWidth * ((ASViewPager_ItemInfo *) nil_chk(ii))->offset_));
        jint childLeft = paddingLeft + loff;
        jint childTop = paddingTop;
        if (lp->needsMeasure_) {
          lp->needsMeasure_ = false;
          jint widthSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(JreFpToInt((childWidth * lp->widthFactor_)), ADView_MeasureSpec_EXACTLY);
          jint heightSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_((jint) (height - paddingTop - paddingBottom), ADView_MeasureSpec_EXACTLY);
          [child measureWithInt:widthSpec withInt:heightSpec];
        }
        [child layoutWithInt:childLeft withInt:childTop withInt:childLeft + [child getMeasuredWidth] withInt:childTop + [child getMeasuredHeight]];
      }
    }
  }
  mTopPageBounds_ = paddingTop;
  mBottomPageBounds_ = height - paddingBottom;
  mDecorChildCount_ = decorCount;
  if (mFirstLayout_) {
    [self scrollToItemWithInt:mCurItem_ withBoolean:false withInt:0 withBoolean:false];
  }
  mFirstLayout_ = false;
}

- (jboolean)pageScrolledWithInt:(jint)xpos {
  if ([((JavaUtilArrayList *) nil_chk(mItems_)) size] == 0) {
    if (mFirstLayout_) {
      return false;
    }
    mCalledSuper_ = false;
    [self onPageScrolledWithInt:0 withFloat:0 withInt:0];
    if (!mCalledSuper_) {
      @throw new_JavaLangIllegalStateException_initWithNSString_(@"onPageScrolled did not call superclass implementation");
    }
    return false;
  }
  ASViewPager_ItemInfo *ii = ASViewPager_infoForCurrentScrollPosition(self);
  jint width = ASViewPager_getClientWidth(self);
  jint widthWithMargin = width + mPageMargin_;
  jfloat marginOffset = (jfloat) mPageMargin_ / width;
  jint currentPage = ((ASViewPager_ItemInfo *) nil_chk(ii))->position_;
  jfloat pageOffset = (((jfloat) xpos / width) - ii->offset_) / (ii->widthFactor_ + marginOffset);
  jint offsetPixels = JreFpToInt((pageOffset * widthWithMargin));
  mCalledSuper_ = false;
  [self onPageScrolledWithInt:currentPage withFloat:pageOffset withInt:offsetPixels];
  if (!mCalledSuper_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"onPageScrolled did not call superclass implementation");
  }
  return true;
}

- (void)onPageScrolledWithInt:(jint)position
                    withFloat:(jfloat)offset
                      withInt:(jint)offsetPixels {
  if (mDecorChildCount_ > 0) {
    jint scrollX = [self getScrollX];
    jint paddingLeft = [self getPaddingLeft];
    jint paddingRight = [self getPaddingRight];
    jint width = [self getWidth];
    jint childCount = [self getChildCount];
    for (jint i = 0; i < childCount; i++) {
      ADView *child = [self getChildAtWithInt:i];
      ASViewPager_LayoutParams *lp = (ASViewPager_LayoutParams *) cast_chk([((ADView *) nil_chk(child)) getLayoutParams], [ASViewPager_LayoutParams class]);
      if (!((ASViewPager_LayoutParams *) nil_chk(lp))->isDecor_) continue;
      jint hgrav = lp->gravity_ & ADGravity_HORIZONTAL_GRAVITY_MASK;
      jint childLeft = 0;
      switch (hgrav) {
        default:
        childLeft = paddingLeft;
        break;
        case ADGravity_LEFT:
        childLeft = paddingLeft;
        paddingLeft += [child getWidth];
        break;
        case ADGravity_CENTER_HORIZONTAL:
        childLeft = JavaLangMath_maxWithInt_withInt_(JreIntDiv((width - [child getMeasuredWidth]), 2), paddingLeft);
        break;
        case ADGravity_RIGHT:
        childLeft = width - paddingRight - [child getMeasuredWidth];
        paddingRight += [child getMeasuredWidth];
        break;
      }
      childLeft += scrollX;
      jint childOffset = childLeft - [child getLeft];
      if (childOffset != 0) {
        [child offsetLeftAndRightWithInt:childOffset];
      }
    }
  }
  ASViewPager_dispatchOnPageScrolledWithInt_withFloat_withInt_(self, position, offset, offsetPixels);
  if (mPageTransformer_ != nil) {
    jint scrollX = [self getScrollX];
    jint childCount = [self getChildCount];
    for (jint i = 0; i < childCount; i++) {
      ADView *child = [self getChildAtWithInt:i];
      ASViewPager_LayoutParams *lp = (ASViewPager_LayoutParams *) cast_chk([((ADView *) nil_chk(child)) getLayoutParams], [ASViewPager_LayoutParams class]);
      if (((ASViewPager_LayoutParams *) nil_chk(lp))->isDecor_) continue;
      jfloat transformPos = (jfloat) ([child getLeft] - scrollX) / ASViewPager_getClientWidth(self);
      [((id<ASViewPager_PageTransformer>) nil_chk(mPageTransformer_)) transformPageWithADView:child withFloat:transformPos];
    }
  }
  mCalledSuper_ = true;
}

- (void)dispatchOnPageScrolledWithInt:(jint)position
                            withFloat:(jfloat)offset
                              withInt:(jint)offsetPixels {
  ASViewPager_dispatchOnPageScrolledWithInt_withFloat_withInt_(self, position, offset, offsetPixels);
}

- (void)dispatchOnPageSelectedWithInt:(jint)position {
  ASViewPager_dispatchOnPageSelectedWithInt_(self, position);
}

- (jboolean)performDragWithFloat:(jfloat)x
                       withFloat:(jfloat)y {
  return ASViewPager_performDragWithFloat_withFloat_(self, x, y);
}

- (ASViewPager_ItemInfo *)infoForCurrentScrollPosition {
  return ASViewPager_infoForCurrentScrollPosition(self);
}

- (jint)determineTargetPageWithInt:(jint)currentPage
                         withFloat:(jfloat)pageOffset
                           withInt:(jint)velocity
                           withInt:(jint)deltaX {
  return ASViewPager_determineTargetPageWithInt_withFloat_withInt_withInt_(self, currentPage, pageOffset, velocity, deltaX);
}

- (void)onDrawWithADCanvas:(id<ADCanvas>)canvas {
  [super onDrawWithADCanvas:canvas];
  if (mPageMargin_ > 0 && mMarginDrawable_ != nil && [((JavaUtilArrayList *) nil_chk(mItems_)) size] > 0 && mAdapter_ != nil) {
    jint scrollX = [self getScrollX];
    jint width = [self getWidth];
    jfloat marginOffset = (jfloat) mPageMargin_ / width;
    jint itemIndex = 0;
    ASViewPager_ItemInfo *ii = [((JavaUtilArrayList *) nil_chk(mItems_)) getWithInt:0];
    jfloat offset = ((ASViewPager_ItemInfo *) nil_chk(ii))->offset_;
    jint itemCount = [mItems_ size];
    jint firstPos = ii->position_;
    jint lastPos = ((ASViewPager_ItemInfo *) nil_chk([mItems_ getWithInt:itemCount - 1]))->position_;
    for (jint pos = firstPos; pos < lastPos; pos++) {
      while (pos > ((ASViewPager_ItemInfo *) nil_chk(ii))->position_ && itemIndex < itemCount) {
        ii = [mItems_ getWithInt:++itemIndex];
      }
      jfloat drawAt;
      if (pos == ii->position_) {
        drawAt = (ii->offset_ + ii->widthFactor_) * width;
        offset = ii->offset_ + ii->widthFactor_ + marginOffset;
      }
      else {
        jfloat widthFactor = [((ASPagerAdapter *) nil_chk(mAdapter_)) getPageWidthWithInt:pos];
        drawAt = (offset + widthFactor) * width;
        JrePlusAssignFloatF(&offset, widthFactor + marginOffset);
      }
      {
        [((ADDrawable *) nil_chk(mMarginDrawable_)) setBoundsWithInt:JavaLangMath_roundWithFloat_(drawAt) withInt:mTopPageBounds_ withInt:JavaLangMath_roundWithFloat_(drawAt + mPageMargin_) withInt:mBottomPageBounds_];
        [((ADDrawable *) nil_chk(mMarginDrawable_)) drawWithADCanvas:canvas];
      }
      if (drawAt > scrollX + width) {
        break;
      }
    }
  }
}

- (jboolean)beginFakeDrag {
  if (mIsBeingDragged_) {
    return false;
  }
  mFakeDragging_ = true;
  mInitialMotionX_ = mLastMotionX_ = 0;
  if (mVelocityTracker_ == nil) {
  }
  else {
  }
  return true;
}

- (void)endFakeDrag {
  if (!mFakeDragging_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"No fake drag in progress. Call beginFakeDrag first.");
  }
  if (mAdapter_ != nil) {
    jint initialVelocity = 0;
    jint width = ASViewPager_getClientWidth(self);
    jint scrollX = [self getScrollX];
    ASViewPager_ItemInfo *ii = ASViewPager_infoForCurrentScrollPosition(self);
    jint currentPage = ((ASViewPager_ItemInfo *) nil_chk(ii))->position_;
    jfloat pageOffset = (((jfloat) scrollX / width) - ii->offset_) / ii->widthFactor_;
    jint totalDelta = JreFpToInt((mLastMotionX_ - mInitialMotionX_));
    jint nextPage = ASViewPager_determineTargetPageWithInt_withFloat_withInt_withInt_(self, currentPage, pageOffset, initialVelocity, totalDelta);
    [self setCurrentItemInternalWithInt:nextPage withBoolean:true withBoolean:true withInt:initialVelocity];
  }
  ASViewPager_endDrag(self);
  mFakeDragging_ = false;
}

- (void)fakeDragByWithFloat:(jfloat)xOffset {
  if (!mFakeDragging_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"No fake drag in progress. Call beginFakeDrag first.");
  }
  if (mAdapter_ == nil) {
    return;
  }
  JrePlusAssignFloatF(&mLastMotionX_, xOffset);
  jfloat oldScrollX = [self getScrollX];
  jfloat scrollX = oldScrollX - xOffset;
  jint width = ASViewPager_getClientWidth(self);
  jfloat leftBound = width * mFirstOffset_;
  jfloat rightBound = width * mLastOffset_;
  ASViewPager_ItemInfo *firstItem = [((JavaUtilArrayList *) nil_chk(mItems_)) getWithInt:0];
  ASViewPager_ItemInfo *lastItem = [mItems_ getWithInt:[mItems_ size] - 1];
  if (((ASViewPager_ItemInfo *) nil_chk(firstItem))->position_ != 0) {
    leftBound = firstItem->offset_ * width;
  }
  if (((ASViewPager_ItemInfo *) nil_chk(lastItem))->position_ != [((ASPagerAdapter *) nil_chk(mAdapter_)) getCount] - 1) {
    rightBound = lastItem->offset_ * width;
  }
  if (scrollX < leftBound) {
    scrollX = leftBound;
  }
  else if (scrollX > rightBound) {
    scrollX = rightBound;
  }
  JrePlusAssignFloatF(&mLastMotionX_, scrollX - JreFpToInt(scrollX));
  [self scrollToWithInt:JreFpToInt(scrollX) withInt:[self getScrollY]];
  [self pageScrolledWithInt:JreFpToInt(scrollX)];
}

- (jboolean)isFakeDragging {
  return mFakeDragging_;
}

- (void)endDrag {
  ASViewPager_endDrag(self);
}

- (jboolean)canScrollHorizontallyWithInt:(jint)direction {
  if (mAdapter_ == nil) {
    return false;
  }
  jint width = ASViewPager_getClientWidth(self);
  jint scrollX = [self getScrollX];
  if (direction < 0) {
    return (scrollX > JreFpToInt((width * mFirstOffset_)));
  }
  else if (direction > 0) {
    return (scrollX < JreFpToInt((width * mLastOffset_)));
  }
  else {
    return false;
  }
}

- (jboolean)canScrollWithADView:(ADView *)v
                    withBoolean:(jboolean)checkV
                        withInt:(jint)dx
                        withInt:(jint)x
                        withInt:(jint)y {
  if ([v isKindOfClass:[ADViewGroup class]]) {
    ADViewGroup *group = (ADViewGroup *) v;
    jint scrollX = [((ADView *) nil_chk(v)) getScrollX];
    jint scrollY = [v getScrollY];
    jint count = [((ADViewGroup *) nil_chk(group)) getChildCount];
    for (jint i = count - 1; i >= 0; i--) {
      ADView *child = [group getChildAtWithInt:i];
      if (x + scrollX >= [((ADView *) nil_chk(child)) getLeft] && x + scrollX < [child getRight] && y + scrollY >= [child getTop] && y + scrollY < [child getBottom] && [self canScrollWithADView:child withBoolean:true withInt:dx withInt:x + scrollX - [child getLeft] withInt:y + scrollY - [child getTop]]) {
        return true;
      }
    }
  }
  return checkV && [((ADView *) nil_chk(v)) canScrollHorizontallyWithInt:-dx];
}

- (jboolean)arrowScrollWithInt:(jint)direction {
  ADView *currentFocused = [self findFocus];
  if (currentFocused == self) {
    currentFocused = nil;
  }
  else if (currentFocused != nil) {
    jboolean isChild = false;
    for (id<ADViewParent> parent = [currentFocused getParent]; [parent isKindOfClass:[ADViewGroup class]]; parent = [((id<ADViewParent>) nil_chk(parent)) getParent]) {
      if (parent == self) {
        isChild = true;
        break;
      }
    }
    if (!isChild) {
      JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
      (void) [sb appendWithNSString:[[currentFocused java_getClass] getSimpleName]];
      for (id<ADViewParent> parent = [currentFocused getParent]; [parent isKindOfClass:[ADViewGroup class]]; parent = [parent getParent]) {
        (void) [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@" => "])) appendWithNSString:[[((id<ADViewParent>) nil_chk(parent)) java_getClass] getSimpleName]];
      }
      ADLog_eWithNSString_withNSString_(ASViewPager_TAG, JreStrcat("$$", @"arrowScroll tried to find focus based on non-child current focused view ", [sb description]));
      currentFocused = nil;
    }
  }
  jboolean handled = false;
  ADView *nextFocused = nil;
  if (nextFocused != nil && nextFocused != currentFocused) {
    if (direction == ADView_FOCUS_LEFT) {
      jint nextLeft = ((ADRect *) nil_chk(ASViewPager_getChildRectInPagerCoordinatesWithADRect_withADView_(self, mTempRect_, nextFocused)))->left_;
      jint currLeft = ((ADRect *) nil_chk(ASViewPager_getChildRectInPagerCoordinatesWithADRect_withADView_(self, mTempRect_, currentFocused)))->left_;
      if (currentFocused != nil && nextLeft >= currLeft) {
        handled = [self pageLeft];
      }
      else {
        handled = [nextFocused requestFocus];
      }
    }
    else if (direction == ADView_FOCUS_RIGHT) {
      jint nextLeft = ((ADRect *) nil_chk(ASViewPager_getChildRectInPagerCoordinatesWithADRect_withADView_(self, mTempRect_, nextFocused)))->left_;
      jint currLeft = ((ADRect *) nil_chk(ASViewPager_getChildRectInPagerCoordinatesWithADRect_withADView_(self, mTempRect_, currentFocused)))->left_;
      if (currentFocused != nil && nextLeft <= currLeft) {
        handled = [self pageRight];
      }
      else {
        handled = [nextFocused requestFocus];
      }
    }
  }
  else if (direction == ADView_FOCUS_LEFT || direction == ADView_FOCUS_BACKWARD) {
    handled = [self pageLeft];
  }
  else if (direction == ADView_FOCUS_RIGHT || direction == ADView_FOCUS_FORWARD) {
    handled = [self pageRight];
  }
  if (handled) {
  }
  return handled;
}

- (ADRect *)getChildRectInPagerCoordinatesWithADRect:(ADRect *)outRect
                                          withADView:(ADView *)child {
  return ASViewPager_getChildRectInPagerCoordinatesWithADRect_withADView_(self, outRect, child);
}

- (jboolean)pageLeft {
  if (mCurItem_ > 0) {
    [self setCurrentItemWithInt:mCurItem_ - 1 withBoolean:true];
    return true;
  }
  return false;
}

- (jboolean)pageRight {
  if (mAdapter_ != nil && mCurItem_ < ([mAdapter_ getCount] - 1)) {
    [self setCurrentItemWithInt:mCurItem_ + 1 withBoolean:true];
    return true;
  }
  return false;
}

- (ADViewGroup_LayoutParams *)generateDefaultLayoutParams {
  return new_ASViewPager_LayoutParams_init();
}

- (ADViewGroup_LayoutParams *)generateLayoutParamsWithADViewGroup_LayoutParams:(ADViewGroup_LayoutParams *)p {
  return [self generateDefaultLayoutParams];
}

- (jboolean)checkLayoutParamsWithADViewGroup_LayoutParams:(ADViewGroup_LayoutParams *)p {
  return [p isKindOfClass:[ASViewPager_LayoutParams class]] && [super checkLayoutParamsWithADViewGroup_LayoutParams:p];
}

- (void)completeScrollWithBoolean:(jboolean)postEvents {
  ASViewPager_completeScrollWithBoolean_(self, postEvents);
}

- (void)smoothScrollToWithInt:(jint)x
                      withInt:(jint)y
                      withInt:(jint)velocity {
}

- (void)scrollToWithInt:(jint)x
                withInt:(jint)y {
}

- (void)setScrollingCacheEnabledWithBoolean:(jboolean)b {
  ASViewPager_setScrollingCacheEnabledWithBoolean_(self, b);
}

- (void)setChildrenDrawingOrderEnabledWithBoolean:(jboolean)hasTransformer {
  ASViewPager_setChildrenDrawingOrderEnabledWithBoolean_(self, hasTransformer);
}

- (jfloat)releaseHorizontalGlowWithFloat:(jfloat)dX
                               withFloat:(jfloat)y {
  return ASViewPager_releaseHorizontalGlowWithFloat_withFloat_(self, dX, y);
}

- (jboolean)isDecorViewWithADView:(ADView *)child {
  return ASViewPager_isDecorViewWithADView_(self, child);
}

- (void)redrawWithADCanvas:(id<ADCanvas>)canvas {
  [self onDrawWithADCanvas:canvas];
}

- (jboolean)isEmpty {
  return [((JavaUtilArrayList *) nil_chk(mItems_)) isEmpty];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASPagerAdapter;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 8, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 17, -1, -1, -1, -1 },
    { NULL, "LASViewPager_OnPageChangeListener;", 0x0, 18, 14, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASViewPager_ItemInfo;", 0x0, 23, 24, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 25, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 26, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 29, -1, -1, -1, -1 },
    { NULL, "LASViewPager_ItemInfo;", 0x0, 30, 31, -1, -1, -1, -1 },
    { NULL, "LASViewPager_ItemInfo;", 0x0, 32, 31, -1, -1, -1, -1 },
    { NULL, "LASViewPager_ItemInfo;", 0x0, 33, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 34, 24, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 35, 36, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 37, 38, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 39, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 40, 41, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 42, 41, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 43, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 44, 45, -1, -1, -1, -1 },
    { NULL, "LASViewPager_ItemInfo;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 46, 47, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 48, 49, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 50, 51, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 52, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 53, 54, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 55, 6, -1, -1, -1, -1 },
    { NULL, "LADRect;", 0x2, 56, 57, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADViewGroup_LayoutParams;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADViewGroup_LayoutParams;", 0x4, 58, 59, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 60, 59, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 61, 62, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 63, 64, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 65, 24, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 66, 62, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 67, 62, -1, -1, -1, -1 },
    { NULL, "F", 0x2, 68, 45, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 69, 31, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 70, 49, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setAdapterWithASPagerAdapter:);
  methods[2].selector = @selector(removeNonDecorViews);
  methods[3].selector = @selector(getAdapter);
  methods[4].selector = @selector(addOnAdapterChangeListenerWithASViewPager_OnAdapterChangeListener:);
  methods[5].selector = @selector(removeOnAdapterChangeListenerWithASViewPager_OnAdapterChangeListener:);
  methods[6].selector = @selector(getClientWidth);
  methods[7].selector = @selector(setCurrentItemWithInt:);
  methods[8].selector = @selector(setCurrentItemWithInt:withBoolean:);
  methods[9].selector = @selector(getCurrentItem);
  methods[10].selector = @selector(setCurrentItemInternalWithInt:withBoolean:withBoolean:);
  methods[11].selector = @selector(setCurrentItemInternalWithInt:withBoolean:withBoolean:withInt:);
  methods[12].selector = @selector(scrollToItemWithInt:withBoolean:withInt:withBoolean:);
  methods[13].selector = @selector(setOnPageChangeListenerWithASViewPager_OnPageChangeListener:);
  methods[14].selector = @selector(setPageTransformerWithBoolean:withASViewPager_PageTransformer:);
  methods[15].selector = @selector(setPageTransformerWithBoolean:withASViewPager_PageTransformer:withInt:);
  methods[16].selector = @selector(setInternalPageChangeListenerWithASViewPager_OnPageChangeListener:);
  methods[17].selector = @selector(getOffscreenPageLimit);
  methods[18].selector = @selector(setOffscreenPageLimitWithInt:);
  methods[19].selector = @selector(setPageMarginWithInt:);
  methods[20].selector = @selector(getPageMargin);
  methods[21].selector = @selector(setPageMarginDrawableWithADDrawable:);
  methods[22].selector = @selector(drawableStateChanged);
  methods[23].selector = @selector(addNewItemWithInt:withInt:);
  methods[24].selector = @selector(dataSetChanged);
  methods[25].selector = @selector(populate);
  methods[26].selector = @selector(populateWithInt:);
  methods[27].selector = @selector(sortChildDrawingOrder);
  methods[28].selector = @selector(calculatePageOffsetsWithASViewPager_ItemInfo:withInt:withASViewPager_ItemInfo:);
  methods[29].selector = @selector(addViewWithADView:withInt:withADViewGroup_LayoutParams:);
  methods[30].selector = @selector(infoForChildWithADView:);
  methods[31].selector = @selector(infoForAnyChildWithADView:);
  methods[32].selector = @selector(infoForPositionWithInt:);
  methods[33].selector = @selector(onMeasureWithInt:withInt:);
  methods[34].selector = @selector(recomputeScrollPositionWithInt:withInt:withInt:withInt:);
  methods[35].selector = @selector(onLayoutWithBoolean:withInt:withInt:withInt:withInt:);
  methods[36].selector = @selector(pageScrolledWithInt:);
  methods[37].selector = @selector(onPageScrolledWithInt:withFloat:withInt:);
  methods[38].selector = @selector(dispatchOnPageScrolledWithInt:withFloat:withInt:);
  methods[39].selector = @selector(dispatchOnPageSelectedWithInt:);
  methods[40].selector = @selector(performDragWithFloat:withFloat:);
  methods[41].selector = @selector(infoForCurrentScrollPosition);
  methods[42].selector = @selector(determineTargetPageWithInt:withFloat:withInt:withInt:);
  methods[43].selector = @selector(onDrawWithADCanvas:);
  methods[44].selector = @selector(beginFakeDrag);
  methods[45].selector = @selector(endFakeDrag);
  methods[46].selector = @selector(fakeDragByWithFloat:);
  methods[47].selector = @selector(isFakeDragging);
  methods[48].selector = @selector(endDrag);
  methods[49].selector = @selector(canScrollHorizontallyWithInt:);
  methods[50].selector = @selector(canScrollWithADView:withBoolean:withInt:withInt:withInt:);
  methods[51].selector = @selector(arrowScrollWithInt:);
  methods[52].selector = @selector(getChildRectInPagerCoordinatesWithADRect:withADView:);
  methods[53].selector = @selector(pageLeft);
  methods[54].selector = @selector(pageRight);
  methods[55].selector = @selector(generateDefaultLayoutParams);
  methods[56].selector = @selector(generateLayoutParamsWithADViewGroup_LayoutParams:);
  methods[57].selector = @selector(checkLayoutParamsWithADViewGroup_LayoutParams:);
  methods[58].selector = @selector(completeScrollWithBoolean:);
  methods[59].selector = @selector(smoothScrollToWithInt:withInt:withInt:);
  methods[60].selector = @selector(scrollToWithInt:withInt:);
  methods[61].selector = @selector(setScrollingCacheEnabledWithBoolean:);
  methods[62].selector = @selector(setChildrenDrawingOrderEnabledWithBoolean:);
  methods[63].selector = @selector(releaseHorizontalGlowWithFloat:withFloat:);
  methods[64].selector = @selector(isDecorViewWithADView:);
  methods[65].selector = @selector(redrawWithADCanvas:);
  methods[66].selector = @selector(isEmpty);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TAG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 71, -1, -1 },
    { "DEBUG", "Z", .constantValue.asBOOL = ASViewPager_DEBUG, 0x1a, -1, -1, -1, -1 },
    { "DEFAULT_OFFSCREEN_PAGES", "I", .constantValue.asInt = ASViewPager_DEFAULT_OFFSCREEN_PAGES, 0x1a, -1, -1, -1, -1 },
    { "MAX_SETTLE_DURATION", "I", .constantValue.asInt = ASViewPager_MAX_SETTLE_DURATION, 0x1a, -1, -1, -1, -1 },
    { "MIN_DISTANCE_FOR_FLING", "I", .constantValue.asInt = ASViewPager_MIN_DISTANCE_FOR_FLING, 0x1a, -1, -1, -1, -1 },
    { "DEFAULT_GUTTER_SIZE", "I", .constantValue.asInt = ASViewPager_DEFAULT_GUTTER_SIZE, 0x1a, -1, -1, -1, -1 },
    { "MIN_FLING_VELOCITY", "I", .constantValue.asInt = ASViewPager_MIN_FLING_VELOCITY, 0x1a, -1, -1, -1, -1 },
    { "mExpectedAdapterCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "COMPARATOR", "LJavaUtilComparator;", .constantValue.asLong = 0, 0x1a, -1, 72, 73, -1 },
    { "mItems_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x12, -1, -1, 74, -1 },
    { "mTempItem_", "LASViewPager_ItemInfo;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mTempRect_", "LADRect;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mAdapter_", "LASPagerAdapter;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mCurItem_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mRestoredCurItem_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mRestoredAdapterState_", "LADParcelable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mRestoredClassLoader_", "LJavaLangClassLoader;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mIsScrollStarted_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mObserver_", "LASViewPager_PagerObserver;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mPageMargin_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMarginDrawable_", "LADDrawable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTopPageBounds_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mBottomPageBounds_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mFirstOffset_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mLastOffset_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mInLayout_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mScrollingCacheEnabled_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mPopulatePending_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mOffscreenPageLimit_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mIsBeingDragged_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mIsUnableToDrag_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mDefaultGutterSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mGutterSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTouchSlop_ViewPager_", "I", .constantValue.asLong = 0, 0x2, 75, -1, -1, -1 },
    { "mDragInGutterEnabled_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mLastMotionX_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mLastMotionY_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mInitialMotionX_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mInitialMotionY_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mActivePointerId_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "INVALID_POINTER", "I", .constantValue.asInt = ASViewPager_INVALID_POINTER, 0x1a, -1, -1, -1, -1 },
    { "mMinimumVelocity_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMaximumVelocity_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mFlingDistance_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mCloseEnough_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "CLOSE_ENOUGH", "I", .constantValue.asInt = ASViewPager_CLOSE_ENOUGH, 0x1a, -1, -1, -1, -1 },
    { "mFakeDragging_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mFirstLayout_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mCalledSuper_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mDecorChildCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mOnPageChangeListeners_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 76, -1 },
    { "mOnPageChangeListener_", "LASViewPager_OnPageChangeListener;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mInternalPageChangeListener_", "LASViewPager_OnPageChangeListener;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mAdapterChangeListeners_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 77, -1 },
    { "mPageTransformer_", "LASViewPager_PageTransformer;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mPageTransformerLayerType_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "DRAW_ORDER_DEFAULT", "I", .constantValue.asInt = ASViewPager_DRAW_ORDER_DEFAULT, 0x1a, -1, -1, -1, -1 },
    { "DRAW_ORDER_FORWARD", "I", .constantValue.asInt = ASViewPager_DRAW_ORDER_FORWARD, 0x1a, -1, -1, -1, -1 },
    { "DRAW_ORDER_REVERSE", "I", .constantValue.asInt = ASViewPager_DRAW_ORDER_REVERSE, 0x1a, -1, -1, -1, -1 },
    { "mDrawingOrder_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mDrawingOrderedChildren_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x2, -1, -1, 78, -1 },
    { "sPositionComparator", "LASViewPager_ViewPositionComparator;", .constantValue.asLong = 0, 0x1a, -1, 79, -1, -1 },
    { "SCROLL_STATE_IDLE", "I", .constantValue.asInt = ASViewPager_SCROLL_STATE_IDLE, 0x19, -1, -1, -1, -1 },
    { "SCROLL_STATE_DRAGGING", "I", .constantValue.asInt = ASViewPager_SCROLL_STATE_DRAGGING, 0x19, -1, -1, -1, -1 },
    { "SCROLL_STATE_SETTLING", "I", .constantValue.asInt = ASViewPager_SCROLL_STATE_SETTLING, 0x19, -1, -1, -1, -1 },
    { "mScrollState_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mVelocityTracker_", "LNSObject;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setAdapter", "LASPagerAdapter;", "addOnAdapterChangeListener", "LASViewPager_OnAdapterChangeListener;", "removeOnAdapterChangeListener", "setCurrentItem", "I", "IZ", "setCurrentItemInternal", "IZZ", "IZZI", "scrollToItem", "IZIZ", "setOnPageChangeListener", "LASViewPager_OnPageChangeListener;", "setPageTransformer", "ZLASViewPager_PageTransformer;", "ZLASViewPager_PageTransformer;I", "setInternalPageChangeListener", "setOffscreenPageLimit", "setPageMargin", "setPageMarginDrawable", "LADDrawable;", "addNewItem", "II", "populate", "calculatePageOffsets", "LASViewPager_ItemInfo;ILASViewPager_ItemInfo;", "addView", "LADView;ILADViewGroup_LayoutParams;", "infoForChild", "LADView;", "infoForAnyChild", "infoForPosition", "onMeasure", "recomputeScrollPosition", "IIII", "onLayout", "ZIIII", "pageScrolled", "onPageScrolled", "IFI", "dispatchOnPageScrolled", "dispatchOnPageSelected", "performDrag", "FF", "determineTargetPage", "IFII", "onDraw", "LADCanvas;", "fakeDragBy", "F", "canScrollHorizontally", "canScroll", "LADView;ZIII", "arrowScroll", "getChildRectInPagerCoordinates", "LADRect;LADView;", "generateLayoutParams", "LADViewGroup_LayoutParams;", "checkLayoutParams", "completeScroll", "Z", "smoothScrollTo", "III", "scrollTo", "setScrollingCacheEnabled", "setChildrenDrawingOrderEnabled", "releaseHorizontalGlow", "isDecorView", "redraw", &ASViewPager_TAG, &ASViewPager_COMPARATOR, "Ljava/util/Comparator<Landroidx/viewpager/widget/ViewPager$ItemInfo;>;", "Ljava/util/ArrayList<Landroidx/viewpager/widget/ViewPager$ItemInfo;>;", "mTouchSlop", "Ljava/util/List<Landroidx/viewpager/widget/ViewPager$OnPageChangeListener;>;", "Ljava/util/List<Landroidx/viewpager/widget/ViewPager$OnAdapterChangeListener;>;", "Ljava/util/ArrayList<Lr/android/view/View;>;", &ASViewPager_sPositionComparator, "LASViewPager_ItemInfo;LASViewPager_OnPageChangeListener;LASViewPager_PageTransformer;LASViewPager_OnAdapterChangeListener;LASViewPager_PagerObserver;LASViewPager_LayoutParams;LASViewPager_ViewPositionComparator;LASViewPager_IDecorView;" };
  static const J2ObjcClassInfo _ASViewPager = { "ViewPager", "androidx.viewpager.widget", ptrTable, methods, fields, 7, 0x1, 67, 67, -1, 80, -1, -1, -1 };
  return &_ASViewPager;
}

+ (void)initialize {
  if (self == [ASViewPager class]) {
    ASViewPager_COMPARATOR = new_ASViewPager_1_init();
    ASViewPager_sPositionComparator = new_ASViewPager_ViewPositionComparator_init();
    J2OBJC_SET_INITIALIZED(ASViewPager)
  }
}

@end

void ASViewPager_init(ASViewPager *self) {
  ADViewGroup_init(self);
  self->mItems_ = new_JavaUtilArrayList_init();
  self->mTempItem_ = new_ASViewPager_ItemInfo_init();
  self->mTempRect_ = new_ADRect_init();
  self->mRestoredCurItem_ = -1;
  self->mRestoredAdapterState_ = nil;
  self->mRestoredClassLoader_ = nil;
  self->mFirstOffset_ = -JavaLangFloat_MAX_VALUE;
  self->mLastOffset_ = JavaLangFloat_MAX_VALUE;
  self->mOffscreenPageLimit_ = ASViewPager_DEFAULT_OFFSCREEN_PAGES;
  self->mDragInGutterEnabled_ = true;
  self->mActivePointerId_ = ASViewPager_INVALID_POINTER;
  self->mFirstLayout_ = true;
  self->mScrollState_ = ASViewPager_SCROLL_STATE_IDLE;
}

ASViewPager *new_ASViewPager_init() {
  J2OBJC_NEW_IMPL(ASViewPager, init)
}

ASViewPager *create_ASViewPager_init() {
  J2OBJC_CREATE_IMPL(ASViewPager, init)
}

void ASViewPager_removeNonDecorViews(ASViewPager *self) {
  for (jint i = 0; i < [self getChildCount]; i++) {
    ADView *child = [self getChildAtWithInt:i];
    ASViewPager_LayoutParams *lp = (ASViewPager_LayoutParams *) cast_chk([((ADView *) nil_chk(child)) getLayoutParams], [ASViewPager_LayoutParams class]);
    if (!((ASViewPager_LayoutParams *) nil_chk(lp))->isDecor_) {
      [self removeViewAtWithInt:i];
      i--;
    }
  }
}

jint ASViewPager_getClientWidth(ASViewPager *self) {
  return [self getMeasuredWidth] - [self getPaddingLeft] - [self getPaddingRight];
}

void ASViewPager_sortChildDrawingOrder(ASViewPager *self) {
  if (self->mDrawingOrder_ != ASViewPager_DRAW_ORDER_DEFAULT) {
    if (self->mDrawingOrderedChildren_ == nil) {
      self->mDrawingOrderedChildren_ = new_JavaUtilArrayList_init();
    }
    else {
      [self->mDrawingOrderedChildren_ clear];
    }
    jint childCount = [self getChildCount];
    for (jint i = 0; i < childCount; i++) {
      ADView *child = [self getChildAtWithInt:i];
      [((JavaUtilArrayList *) nil_chk(self->mDrawingOrderedChildren_)) addWithId:child];
    }
    JavaUtilCollections_sortWithJavaUtilList_withJavaUtilComparator_(self->mDrawingOrderedChildren_, ASViewPager_sPositionComparator);
  }
}

void ASViewPager_calculatePageOffsetsWithASViewPager_ItemInfo_withInt_withASViewPager_ItemInfo_(ASViewPager *self, ASViewPager_ItemInfo *curItem, jint curIndex, ASViewPager_ItemInfo *oldCurInfo) {
  jint N = [((ASPagerAdapter *) nil_chk(self->mAdapter_)) getCount];
  jint width = ASViewPager_getClientWidth(self);
  jfloat marginOffset = width > 0 ? (jfloat) self->mPageMargin_ / width : 0;
  if (oldCurInfo != nil) {
    jint oldCurPosition = oldCurInfo->position_;
    if (oldCurPosition < ((ASViewPager_ItemInfo *) nil_chk(curItem))->position_) {
      jint itemIndex = 0;
      ASViewPager_ItemInfo *ii = nil;
      jfloat offset = oldCurInfo->offset_ + oldCurInfo->widthFactor_ + marginOffset;
      for (jint pos = oldCurPosition + 1; pos <= curItem->position_ && itemIndex < [((JavaUtilArrayList *) nil_chk(self->mItems_)) size]; pos++) {
        ii = [((JavaUtilArrayList *) nil_chk(self->mItems_)) getWithInt:itemIndex];
        while (pos > ((ASViewPager_ItemInfo *) nil_chk(ii))->position_ && itemIndex < [self->mItems_ size] - 1) {
          itemIndex++;
          ii = [self->mItems_ getWithInt:itemIndex];
        }
        while (pos < ii->position_) {
          JrePlusAssignFloatF(&offset, [((ASPagerAdapter *) nil_chk(self->mAdapter_)) getPageWidthWithInt:pos] + marginOffset);
          pos++;
        }
        ii->offset_ = offset;
        JrePlusAssignFloatF(&offset, ii->widthFactor_ + marginOffset);
      }
    }
    else if (oldCurPosition > curItem->position_) {
      jint itemIndex = [((JavaUtilArrayList *) nil_chk(self->mItems_)) size] - 1;
      ASViewPager_ItemInfo *ii = nil;
      jfloat offset = oldCurInfo->offset_;
      for (jint pos = oldCurPosition - 1; pos >= curItem->position_ && itemIndex >= 0; pos--) {
        ii = [self->mItems_ getWithInt:itemIndex];
        while (pos < ((ASViewPager_ItemInfo *) nil_chk(ii))->position_ && itemIndex > 0) {
          itemIndex--;
          ii = [self->mItems_ getWithInt:itemIndex];
        }
        while (pos > ii->position_) {
          JreMinusAssignFloatF(&offset, [((ASPagerAdapter *) nil_chk(self->mAdapter_)) getPageWidthWithInt:pos] + marginOffset);
          pos--;
        }
        JreMinusAssignFloatF(&offset, ii->widthFactor_ + marginOffset);
        ii->offset_ = offset;
      }
    }
  }
  jint itemCount = [((JavaUtilArrayList *) nil_chk(self->mItems_)) size];
  jfloat offset = ((ASViewPager_ItemInfo *) nil_chk(curItem))->offset_;
  jint pos = curItem->position_ - 1;
  self->mFirstOffset_ = curItem->position_ == 0 ? curItem->offset_ : -JavaLangFloat_MAX_VALUE;
  self->mLastOffset_ = curItem->position_ == N - 1 ? curItem->offset_ + curItem->widthFactor_ - 1 : JavaLangFloat_MAX_VALUE;
  for (jint i = curIndex - 1; i >= 0; i--, pos--) {
    ASViewPager_ItemInfo *ii = [self->mItems_ getWithInt:i];
    while (pos > ((ASViewPager_ItemInfo *) nil_chk(ii))->position_) {
      JreMinusAssignFloatF(&offset, [((ASPagerAdapter *) nil_chk(self->mAdapter_)) getPageWidthWithInt:pos--] + marginOffset);
    }
    JreMinusAssignFloatF(&offset, ii->widthFactor_ + marginOffset);
    ii->offset_ = offset;
    if (ii->position_ == 0) self->mFirstOffset_ = offset;
  }
  offset = curItem->offset_ + curItem->widthFactor_ + marginOffset;
  pos = curItem->position_ + 1;
  for (jint i = curIndex + 1; i < itemCount; i++, pos++) {
    ASViewPager_ItemInfo *ii = [self->mItems_ getWithInt:i];
    while (pos < ((ASViewPager_ItemInfo *) nil_chk(ii))->position_) {
      JrePlusAssignFloatF(&offset, [((ASPagerAdapter *) nil_chk(self->mAdapter_)) getPageWidthWithInt:pos++] + marginOffset);
    }
    if (ii->position_ == N - 1) {
      self->mLastOffset_ = offset + ii->widthFactor_ - 1;
    }
    ii->offset_ = offset;
    JrePlusAssignFloatF(&offset, ii->widthFactor_ + marginOffset);
  }
}

void ASViewPager_recomputeScrollPositionWithInt_withInt_withInt_withInt_(ASViewPager *self, jint width, jint oldWidth, jint margin, jint oldMargin) {
  if (oldWidth > 0 && ![((JavaUtilArrayList *) nil_chk(self->mItems_)) isEmpty]) {
    {
      jint widthWithMargin = width - [self getPaddingLeft] - [self getPaddingRight] + margin;
      jint oldWidthWithMargin = oldWidth - [self getPaddingLeft] - [self getPaddingRight] + oldMargin;
      jint xpos = [self getScrollX];
      jfloat pageOffset = (jfloat) xpos / oldWidthWithMargin;
      jint newOffsetPixels = JreFpToInt((pageOffset * widthWithMargin));
      [self scrollToWithInt:newOffsetPixels withInt:[self getScrollY]];
    }
  }
  else {
    ASViewPager_ItemInfo *ii = [self infoForPositionWithInt:self->mCurItem_];
    jfloat scrollOffset = ii != nil ? JavaLangMath_minWithFloat_withFloat_(ii->offset_, self->mLastOffset_) : 0;
    jint scrollPos = JreFpToInt((scrollOffset * (width - [self getPaddingLeft] - [self getPaddingRight])));
    if (scrollPos != [self getScrollX]) {
      ASViewPager_completeScrollWithBoolean_(self, false);
      [self scrollToWithInt:scrollPos withInt:[self getScrollY]];
    }
  }
}

void ASViewPager_dispatchOnPageScrolledWithInt_withFloat_withInt_(ASViewPager *self, jint position, jfloat offset, jint offsetPixels) {
  if (self->mOnPageChangeListener_ != nil) {
    [self->mOnPageChangeListener_ onPageScrolledWithInt:position withFloat:offset withInt:offsetPixels];
  }
  if (self->mOnPageChangeListeners_ != nil) {
    for (jint i = 0, z = [self->mOnPageChangeListeners_ size]; i < z; i++) {
      id<ASViewPager_OnPageChangeListener> listener = [((id<JavaUtilList>) nil_chk(self->mOnPageChangeListeners_)) getWithInt:i];
      if (listener != nil) {
        [listener onPageScrolledWithInt:position withFloat:offset withInt:offsetPixels];
      }
    }
  }
  if (self->mInternalPageChangeListener_ != nil) {
    [self->mInternalPageChangeListener_ onPageScrolledWithInt:position withFloat:offset withInt:offsetPixels];
  }
}

void ASViewPager_dispatchOnPageSelectedWithInt_(ASViewPager *self, jint position) {
  if (self->mOnPageChangeListener_ != nil) {
    [self->mOnPageChangeListener_ onPageSelectedWithInt:position];
  }
  if (self->mOnPageChangeListeners_ != nil) {
    for (jint i = 0, z = [self->mOnPageChangeListeners_ size]; i < z; i++) {
      id<ASViewPager_OnPageChangeListener> listener = [((id<JavaUtilList>) nil_chk(self->mOnPageChangeListeners_)) getWithInt:i];
      if (listener != nil) {
        [listener onPageSelectedWithInt:position];
      }
    }
  }
  if (self->mInternalPageChangeListener_ != nil) {
    [self->mInternalPageChangeListener_ onPageSelectedWithInt:position];
  }
}

jboolean ASViewPager_performDragWithFloat_withFloat_(ASViewPager *self, jfloat x, jfloat y) {
  jboolean needsInvalidate = false;
  jfloat dX = self->mLastMotionX_ - x;
  self->mLastMotionX_ = x;
  jfloat releaseConsumed = ASViewPager_releaseHorizontalGlowWithFloat_withFloat_(self, dX, y);
  jfloat deltaX = dX - releaseConsumed;
  if (releaseConsumed != 0) {
    needsInvalidate = true;
  }
  if (JavaLangMath_absWithFloat_(deltaX) < 0.0001f) {
    return needsInvalidate;
  }
  jfloat oldScrollX = [self getScrollX];
  jfloat scrollX = oldScrollX + deltaX;
  jint width = ASViewPager_getClientWidth(self);
  jfloat leftBound = width * self->mFirstOffset_;
  jfloat rightBound = width * self->mLastOffset_;
  jboolean leftAbsolute = true;
  jboolean rightAbsolute = true;
  ASViewPager_ItemInfo *firstItem = [((JavaUtilArrayList *) nil_chk(self->mItems_)) getWithInt:0];
  ASViewPager_ItemInfo *lastItem = [self->mItems_ getWithInt:[self->mItems_ size] - 1];
  if (((ASViewPager_ItemInfo *) nil_chk(firstItem))->position_ != 0) {
    leftAbsolute = false;
    leftBound = firstItem->offset_ * width;
  }
  if (((ASViewPager_ItemInfo *) nil_chk(lastItem))->position_ != [((ASPagerAdapter *) nil_chk(self->mAdapter_)) getCount] - 1) {
    rightAbsolute = false;
    rightBound = lastItem->offset_ * width;
  }
  if (scrollX < leftBound) {
    if (leftAbsolute) {
      jfloat over = leftBound - scrollX;
      needsInvalidate = true;
    }
    scrollX = leftBound;
  }
  else if (scrollX > rightBound) {
    if (rightAbsolute) {
      jfloat over = scrollX - rightBound;
      needsInvalidate = true;
    }
    scrollX = rightBound;
  }
  JrePlusAssignFloatF(&self->mLastMotionX_, scrollX - JreFpToInt(scrollX));
  [self scrollToWithInt:JreFpToInt(scrollX) withInt:[self getScrollY]];
  [self pageScrolledWithInt:JreFpToInt(scrollX)];
  return needsInvalidate;
}

ASViewPager_ItemInfo *ASViewPager_infoForCurrentScrollPosition(ASViewPager *self) {
  jint width = ASViewPager_getClientWidth(self);
  jfloat scrollOffset = width > 0 ? (jfloat) [self getScrollX] / width : 0;
  jfloat marginOffset = width > 0 ? (jfloat) self->mPageMargin_ / width : 0;
  jint lastPos = -1;
  jfloat lastOffset = 0.f;
  jfloat lastWidth = 0.f;
  jboolean first = true;
  ASViewPager_ItemInfo *lastItem = nil;
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(self->mItems_)) size]; i++) {
    ASViewPager_ItemInfo *ii = [self->mItems_ getWithInt:i];
    jfloat offset;
    if (!first && ((ASViewPager_ItemInfo *) nil_chk(ii))->position_ != lastPos + 1) {
      ii = self->mTempItem_;
      ((ASViewPager_ItemInfo *) nil_chk(ii))->offset_ = lastOffset + lastWidth + marginOffset;
      ii->position_ = lastPos + 1;
      ii->widthFactor_ = [((ASPagerAdapter *) nil_chk(self->mAdapter_)) getPageWidthWithInt:ii->position_];
      i--;
    }
    offset = ((ASViewPager_ItemInfo *) nil_chk(ii))->offset_;
    jfloat leftBound = offset;
    jfloat rightBound = offset + ii->widthFactor_ + marginOffset;
    if (first || scrollOffset >= leftBound) {
      if (scrollOffset < rightBound || i == [self->mItems_ size] - 1) {
        return ii;
      }
    }
    else {
      return lastItem;
    }
    first = false;
    lastPos = ii->position_;
    lastOffset = offset;
    lastWidth = ii->widthFactor_;
    lastItem = ii;
  }
  return lastItem;
}

jint ASViewPager_determineTargetPageWithInt_withFloat_withInt_withInt_(ASViewPager *self, jint currentPage, jfloat pageOffset, jint velocity, jint deltaX) {
  jint targetPage;
  if (JavaLangMath_absWithInt_(deltaX) > self->mFlingDistance_ && JavaLangMath_absWithInt_(velocity) > self->mMinimumVelocity_) {
    targetPage = velocity > 0 ? currentPage : currentPage + 1;
  }
  else {
    jfloat truncator = currentPage >= self->mCurItem_ ? 0.4f : 0.6f;
    targetPage = currentPage + JreFpToInt((pageOffset + truncator));
  }
  if ([((JavaUtilArrayList *) nil_chk(self->mItems_)) size] > 0) {
    ASViewPager_ItemInfo *firstItem = [self->mItems_ getWithInt:0];
    ASViewPager_ItemInfo *lastItem = [self->mItems_ getWithInt:[self->mItems_ size] - 1];
    targetPage = JavaLangMath_maxWithInt_withInt_(((ASViewPager_ItemInfo *) nil_chk(firstItem))->position_, JavaLangMath_minWithInt_withInt_(targetPage, ((ASViewPager_ItemInfo *) nil_chk(lastItem))->position_));
  }
  return targetPage;
}

void ASViewPager_endDrag(ASViewPager *self) {
  self->mIsBeingDragged_ = false;
  self->mIsUnableToDrag_ = false;
  if (self->mVelocityTracker_ != nil) {
    self->mVelocityTracker_ = nil;
  }
}

ADRect *ASViewPager_getChildRectInPagerCoordinatesWithADRect_withADView_(ASViewPager *self, ADRect *outRect, ADView *child) {
  if (outRect == nil) {
    outRect = new_ADRect_init();
  }
  if (child == nil) {
    [outRect setWithInt:0 withInt:0 withInt:0 withInt:0];
    return outRect;
  }
  outRect->left_ = [child getLeft];
  outRect->right_ = [child getRight];
  outRect->top_ = [child getTop];
  outRect->bottom_ = [child getBottom];
  id<ADViewParent> parent = [child getParent];
  while ([parent isKindOfClass:[ADViewGroup class]] && parent != self) {
    ADViewGroup *group = (ADViewGroup *) cast_chk(parent, [ADViewGroup class]);
    outRect->left_ += [((ADViewGroup *) nil_chk(group)) getLeft];
    outRect->right_ += [group getRight];
    outRect->top_ += [group getTop];
    outRect->bottom_ += [group getBottom];
    parent = [group getParent];
  }
  return outRect;
}

void ASViewPager_completeScrollWithBoolean_(ASViewPager *self, jboolean postEvents) {
}

void ASViewPager_setScrollingCacheEnabledWithBoolean_(ASViewPager *self, jboolean b) {
}

void ASViewPager_setChildrenDrawingOrderEnabledWithBoolean_(ASViewPager *self, jboolean hasTransformer) {
}

jfloat ASViewPager_releaseHorizontalGlowWithFloat_withFloat_(ASViewPager *self, jfloat dX, jfloat y) {
  return 0;
}

jboolean ASViewPager_isDecorViewWithADView_(ASViewPager *self, ADView *child) {
  return [ASViewPager_IDecorView_class_() isInstance:child];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewPager)

@implementation ASViewPager_ItemInfo

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASViewPager_ItemInfo_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "object_", "LNSObject;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "position_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "scrolling_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "widthFactor_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "offset_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASViewPager;" };
  static const J2ObjcClassInfo _ASViewPager_ItemInfo = { "ItemInfo", "androidx.viewpager.widget", ptrTable, methods, fields, 7, 0x8, 1, 5, 0, -1, -1, -1, -1 };
  return &_ASViewPager_ItemInfo;
}

@end

void ASViewPager_ItemInfo_init(ASViewPager_ItemInfo *self) {
  NSObject_init(self);
}

ASViewPager_ItemInfo *new_ASViewPager_ItemInfo_init() {
  J2OBJC_NEW_IMPL(ASViewPager_ItemInfo, init)
}

ASViewPager_ItemInfo *create_ASViewPager_ItemInfo_init() {
  J2OBJC_CREATE_IMPL(ASViewPager_ItemInfo, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewPager_ItemInfo)

@implementation ASViewPager_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASViewPager_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)compareWithId:(ASViewPager_ItemInfo *)lhs
               withId:(ASViewPager_ItemInfo *)rhs {
  return ((ASViewPager_ItemInfo *) nil_chk(lhs))->position_ - ((ASViewPager_ItemInfo *) nil_chk(rhs))->position_;
}

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(compareWithId:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "compare", "LASViewPager_ItemInfo;LASViewPager_ItemInfo;", "LASViewPager;", "Ljava/lang/Object;Ljava/util/Comparator<Landroidx/viewpager/widget/ViewPager$ItemInfo;>;" };
  static const J2ObjcClassInfo _ASViewPager_1 = { "", "androidx.viewpager.widget", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 2, -1, -1, 3, -1 };
  return &_ASViewPager_1;
}

@end

void ASViewPager_1_init(ASViewPager_1 *self) {
  NSObject_init(self);
}

ASViewPager_1 *new_ASViewPager_1_init() {
  J2OBJC_NEW_IMPL(ASViewPager_1, init)
}

ASViewPager_1 *create_ASViewPager_1_init() {
  J2OBJC_CREATE_IMPL(ASViewPager_1, init)
}

@implementation ASViewPager_OnPageChangeListener

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 4, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(onPageScrolledWithInt:withFloat:withInt:);
  methods[1].selector = @selector(onPageSelectedWithInt:);
  methods[2].selector = @selector(onPageScrollStateChangedWithInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onPageScrolled", "IFI", "onPageSelected", "I", "onPageScrollStateChanged", "LASViewPager;" };
  static const J2ObjcClassInfo _ASViewPager_OnPageChangeListener = { "OnPageChangeListener", "androidx.viewpager.widget", ptrTable, methods, NULL, 7, 0x609, 3, 0, 5, -1, -1, -1, -1 };
  return &_ASViewPager_OnPageChangeListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ASViewPager_OnPageChangeListener)

@implementation ASViewPager_PageTransformer

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(transformPageWithADView:withFloat:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "transformPage", "LADView;F", "LASViewPager;" };
  static const J2ObjcClassInfo _ASViewPager_PageTransformer = { "PageTransformer", "androidx.viewpager.widget", ptrTable, methods, NULL, 7, 0x609, 1, 0, 2, -1, -1, -1, -1 };
  return &_ASViewPager_PageTransformer;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ASViewPager_PageTransformer)

@implementation ASViewPager_OnAdapterChangeListener

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(onAdapterChangedWithASViewPager:withASPagerAdapter:withASPagerAdapter:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onAdapterChanged", "LASViewPager;LASPagerAdapter;LASPagerAdapter;", "LASViewPager;" };
  static const J2ObjcClassInfo _ASViewPager_OnAdapterChangeListener = { "OnAdapterChangeListener", "androidx.viewpager.widget", ptrTable, methods, NULL, 7, 0x609, 1, 0, 2, -1, -1, -1, -1 };
  return &_ASViewPager_OnAdapterChangeListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ASViewPager_OnAdapterChangeListener)

@implementation ASViewPager_PagerObserver

- (instancetype)initWithASViewPager:(ASViewPager *)outer$ {
  ASViewPager_PagerObserver_initWithASViewPager_(self, outer$);
  return self;
}

- (void)onChanged {
  [this$0_ dataSetChanged];
}

- (void)onInvalidated {
  [this$0_ dataSetChanged];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASViewPager:);
  methods[1].selector = @selector(onChanged);
  methods[2].selector = @selector(onInvalidated);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASViewPager;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASViewPager;" };
  static const J2ObjcClassInfo _ASViewPager_PagerObserver = { "PagerObserver", "androidx.viewpager.widget", ptrTable, methods, fields, 7, 0x2, 3, 1, 0, -1, -1, -1, -1 };
  return &_ASViewPager_PagerObserver;
}

@end

void ASViewPager_PagerObserver_initWithASViewPager_(ASViewPager_PagerObserver *self, ASViewPager *outer$) {
  self->this$0_ = outer$;
  ADDataSetObserver_init(self);
}

ASViewPager_PagerObserver *new_ASViewPager_PagerObserver_initWithASViewPager_(ASViewPager *outer$) {
  J2OBJC_NEW_IMPL(ASViewPager_PagerObserver, initWithASViewPager_, outer$)
}

ASViewPager_PagerObserver *create_ASViewPager_PagerObserver_initWithASViewPager_(ASViewPager *outer$) {
  J2OBJC_CREATE_IMPL(ASViewPager_PagerObserver, initWithASViewPager_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewPager_PagerObserver)

@implementation ASViewPager_LayoutParams

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASViewPager_LayoutParams_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "isDecor_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "gravity_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "widthFactor_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "needsMeasure_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "position_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "childIndex_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASViewPager;" };
  static const J2ObjcClassInfo _ASViewPager_LayoutParams = { "LayoutParams", "androidx.viewpager.widget", ptrTable, methods, fields, 7, 0x9, 1, 6, 0, -1, -1, -1, -1 };
  return &_ASViewPager_LayoutParams;
}

@end

void ASViewPager_LayoutParams_init(ASViewPager_LayoutParams *self) {
  ADViewGroup_LayoutParams_initWithInt_withInt_(self, ADViewGroup_LayoutParams_MATCH_PARENT, ADViewGroup_LayoutParams_MATCH_PARENT);
  self->widthFactor_ = 0.f;
}

ASViewPager_LayoutParams *new_ASViewPager_LayoutParams_init() {
  J2OBJC_NEW_IMPL(ASViewPager_LayoutParams, init)
}

ASViewPager_LayoutParams *create_ASViewPager_LayoutParams_init() {
  J2OBJC_CREATE_IMPL(ASViewPager_LayoutParams, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewPager_LayoutParams)

@implementation ASViewPager_ViewPositionComparator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASViewPager_ViewPositionComparator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)compareWithId:(ADView *)lhs
               withId:(ADView *)rhs {
  ASViewPager_LayoutParams *llp = (ASViewPager_LayoutParams *) cast_chk([((ADView *) nil_chk(lhs)) getLayoutParams], [ASViewPager_LayoutParams class]);
  ASViewPager_LayoutParams *rlp = (ASViewPager_LayoutParams *) cast_chk([((ADView *) nil_chk(rhs)) getLayoutParams], [ASViewPager_LayoutParams class]);
  if (((ASViewPager_LayoutParams *) nil_chk(llp))->isDecor_ != ((ASViewPager_LayoutParams *) nil_chk(rlp))->isDecor_) {
    return llp->isDecor_ ? 1 : -1;
  }
  return llp->position_ - rlp->position_;
}

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(compareWithId:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "compare", "LADView;LADView;", "LASViewPager;", "Ljava/lang/Object;Ljava/util/Comparator<Lr/android/view/View;>;" };
  static const J2ObjcClassInfo _ASViewPager_ViewPositionComparator = { "ViewPositionComparator", "androidx.viewpager.widget", ptrTable, methods, NULL, 7, 0x8, 2, 0, 2, -1, -1, 3, -1 };
  return &_ASViewPager_ViewPositionComparator;
}

@end

void ASViewPager_ViewPositionComparator_init(ASViewPager_ViewPositionComparator *self) {
  NSObject_init(self);
}

ASViewPager_ViewPositionComparator *new_ASViewPager_ViewPositionComparator_init() {
  J2OBJC_NEW_IMPL(ASViewPager_ViewPositionComparator, init)
}

ASViewPager_ViewPositionComparator *create_ASViewPager_ViewPositionComparator_init() {
  J2OBJC_CREATE_IMPL(ASViewPager_ViewPositionComparator, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewPager_ViewPositionComparator)

@implementation ASViewPager_IDecorView

+ (const J2ObjcClassInfo *)__metadata {
  static const void *ptrTable[] = { "LASViewPager;" };
  static const J2ObjcClassInfo _ASViewPager_IDecorView = { "IDecorView", "androidx.viewpager.widget", ptrTable, NULL, NULL, 7, 0x609, 0, 0, 0, -1, -1, -1, -1 };
  return &_ASViewPager_IDecorView;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ASViewPager_IDecorView)
