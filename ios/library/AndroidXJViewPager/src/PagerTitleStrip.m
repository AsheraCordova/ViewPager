//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\AndroidXJViewPager\src\main\java\androidx\viewpager\widget\PagerTitleStrip.java
//

#define J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION 1




#include "ConverterFactory.h"
#include "DataSetObserver.h"
#include "Drawable.h"
#include "Gravity.h"
#include "HasWidgets.h"
#include "IConverter.h"
#include "IFragment.h"
#include "IWidget.h"
#include "J2ObjC_source.h"
#include "PagerAdapter.h"
#include "PagerTitleStrip.h"
#include "TextView.h"
#include "View.h"
#include "ViewGroup.h"
#include "ViewPager.h"
#include "ViewParent.h"
#include "WidgetFactory.h"
#include "java/lang/Boolean.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/ref/WeakReference.h"


@class ADXPagerTitleStrip_PageListener;


#pragma clang diagnostic error "-Wreturn-type"
#pragma clang diagnostic ignored "-Wswitch"


@interface ADXPagerTitleStrip () {
 @public
  int32_t mLastKnownCurrentPage_;
  int32_t mScaledTextSpacing_;
  int32_t mGravity_;
  bool mUpdatingText_;
  bool mUpdatingPositions_;
  ADXPagerTitleStrip_PageListener *mPageListener_;
  JavaLangRefWeakReference *mWatchingAdapter_;
  int32_t mNonPrimaryAlpha_;
}

@end

J2OBJC_FIELD_SETTER(ADXPagerTitleStrip, mPageListener_, ADXPagerTitleStrip_PageListener *)
J2OBJC_FIELD_SETTER(ADXPagerTitleStrip, mWatchingAdapter_, JavaLangRefWeakReference *)

inline float ADXPagerTitleStrip_get_SIDE_ALPHA(void);
#define ADXPagerTitleStrip_SIDE_ALPHA 0.6f
J2OBJC_STATIC_FIELD_CONSTANT(ADXPagerTitleStrip, SIDE_ALPHA, float)

inline int32_t ADXPagerTitleStrip_get_TEXT_SPACING(void);
#define ADXPagerTitleStrip_TEXT_SPACING 16
J2OBJC_STATIC_FIELD_CONSTANT(ADXPagerTitleStrip, TEXT_SPACING, int32_t)

@interface ADXPagerTitleStrip_PageListener : ADDataSetObserver < ADXViewPager_OnPageChangeListener, ADXViewPager_OnAdapterChangeListener > {
 @public
  ADXPagerTitleStrip *this$0_;
  int32_t mScrollState_;
}

- (instancetype)initWithADXPagerTitleStrip:(ADXPagerTitleStrip *)outer$;

- (void)onPageScrolledWithInt:(int32_t)position
                    withFloat:(float)positionOffset
                      withInt:(int32_t)positionOffsetPixels;

- (void)onPageSelectedWithInt:(int32_t)position;

- (void)onPageScrollStateChangedWithInt:(int32_t)state;

- (void)onAdapterChangedWithADXViewPager:(ADXViewPager *)viewPager
                     withADXPagerAdapter:(ADXPagerAdapter *)oldAdapter
                     withADXPagerAdapter:(ADXPagerAdapter *)newAdapter;

- (void)onChanged;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXPagerTitleStrip_PageListener)

__attribute__((unused)) static void ADXPagerTitleStrip_PageListener_initWithADXPagerTitleStrip_(ADXPagerTitleStrip_PageListener *self, ADXPagerTitleStrip *outer$);

__attribute__((unused)) static ADXPagerTitleStrip_PageListener *new_ADXPagerTitleStrip_PageListener_initWithADXPagerTitleStrip_(ADXPagerTitleStrip *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADXPagerTitleStrip_PageListener *create_ADXPagerTitleStrip_PageListener_initWithADXPagerTitleStrip_(ADXPagerTitleStrip *outer$);

J2OBJC_TYPE_LITERAL_HEADER(ADXPagerTitleStrip_PageListener)


@implementation ADXPagerTitleStrip

- (void)setTextSpacingWithInt:(int32_t)spacingPixels {
  mScaledTextSpacing_ = spacingPixels;
  [self requestLayout];
}

- (int32_t)getTextSpacing {
  return mScaledTextSpacing_;
}

- (void)setTextSizeWithInt:(int32_t)unit
                 withFloat:(float)size {
  [((ADTextView *) nil_chk(mPrevText_)) setMyAttributeWithNSString:@"textSize" withId:JavaLangFloat_valueOfWithFloat_(size)];
  [((ADTextView *) nil_chk(mCurrText_)) setMyAttributeWithNSString:@"textSize" withId:JavaLangFloat_valueOfWithFloat_(size)];
  [((ADTextView *) nil_chk(mNextText_)) setMyAttributeWithNSString:@"textSize" withId:JavaLangFloat_valueOfWithFloat_(size)];
}

- (void)setGravityWithInt:(int32_t)gravity {
  mGravity_ = gravity;
  [self requestLayout];
}

- (void)onAttachedToWindow {
  [super onAttachedToWindow];
  id<ADViewParent> parent = [self getParent];
  if (!([parent isKindOfClass:[ADXViewPager class]])) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"PagerTitleStrip must be a direct child of a ViewPager.");
  }
  ADXViewPager *pager = (ADXViewPager *) cast_chk(parent, [ADXViewPager class]);
  ADXPagerAdapter *adapter = [((ADXViewPager *) nil_chk(pager)) getAdapter];
  [pager setInternalPageChangeListenerWithADXViewPager_OnPageChangeListener:mPageListener_];
  [pager addOnAdapterChangeListenerWithADXViewPager_OnAdapterChangeListener:mPageListener_];
  JreStrongAssign(&mPager_, pager);
  [self updateAdapterWithADXPagerAdapter:mWatchingAdapter_ != nil ? [mWatchingAdapter_ get] : nil withADXPagerAdapter:adapter];
}

- (void)onDetachedFromWindow {
  [super onDetachedFromWindow];
  if (mPager_ != nil) {
    [self updateAdapterWithADXPagerAdapter:[mPager_ getAdapter] withADXPagerAdapter:nil];
    [((ADXViewPager *) nil_chk(mPager_)) setInternalPageChangeListenerWithADXViewPager_OnPageChangeListener:nil];
    [((ADXViewPager *) nil_chk(mPager_)) removeOnAdapterChangeListenerWithADXViewPager_OnAdapterChangeListener:mPageListener_];
    JreStrongAssign(&mPager_, nil);
  }
}

- (void)updateTextWithInt:(int32_t)currentItem
      withADXPagerAdapter:(ADXPagerAdapter *)adapter {
  int32_t itemCount = adapter != nil ? [adapter getCount] : 0;
  mUpdatingText_ = true;
  NSString *text = @"";
  if (currentItem >= 1 && adapter != nil) {
    text = (NSString *) cast_chk([adapter getPageTitleWithInt:currentItem - 1], [NSString class]);
  }
  [((ADTextView *) nil_chk(mPrevText_)) setTextWithNSString:text];
  [((ADTextView *) nil_chk(mCurrText_)) setTextWithNSString:adapter != nil && currentItem < itemCount ? (NSString *) cast_chk([adapter getPageTitleWithInt:currentItem], [NSString class]) : nil];
  text = @"";
  if (currentItem + 1 < itemCount && adapter != nil) {
    text = (NSString *) cast_chk([adapter getPageTitleWithInt:currentItem + 1], [NSString class]);
  }
  [((ADTextView *) nil_chk(mNextText_)) setTextWithNSString:text];
  int32_t width = [self getWidth] - [self getPaddingLeft] - [self getPaddingRight];
  int32_t maxWidth = JavaLangMath_maxWithInt_withInt_(0, JreFpToInt((width * 0.8f)));
  int32_t childWidthSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(maxWidth, ADView_MeasureSpec_AT_MOST);
  int32_t childHeight = [self getHeight] - [self getPaddingTop] - [self getPaddingBottom];
  int32_t maxHeight = JavaLangMath_maxWithInt_withInt_(0, childHeight);
  int32_t childHeightSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(maxHeight, ADView_MeasureSpec_AT_MOST);
  [((ADTextView *) nil_chk(mPrevText_)) measureWithInt:childWidthSpec withInt:childHeightSpec];
  [((ADTextView *) nil_chk(mCurrText_)) measureWithInt:childWidthSpec withInt:childHeightSpec];
  [((ADTextView *) nil_chk(mNextText_)) measureWithInt:childWidthSpec withInt:childHeightSpec];
  mLastKnownCurrentPage_ = currentItem;
  if (!mUpdatingPositions_) {
    [self updateTextPositionsWithInt:currentItem withFloat:mLastKnownPositionOffset_ withBoolean:false];
  }
  mUpdatingText_ = false;
}

- (void)requestLayout {
  if (!mUpdatingText_) {
    [super requestLayout];
  }
}

- (void)updateAdapterWithADXPagerAdapter:(ADXPagerAdapter *)oldAdapter
                     withADXPagerAdapter:(ADXPagerAdapter *)newAdapter {
  if (oldAdapter != nil) {
    [oldAdapter unregisterDataSetObserverWithADDataSetObserver:mPageListener_];
    JreStrongAssign(&mWatchingAdapter_, nil);
  }
  if (newAdapter != nil) {
    [newAdapter registerDataSetObserverWithADDataSetObserver:mPageListener_];
    JreStrongAssignAndConsume(&mWatchingAdapter_, new_JavaLangRefWeakReference_initWithId_(newAdapter));
  }
  if (mPager_ != nil) {
    mLastKnownCurrentPage_ = -1;
    mLastKnownPositionOffset_ = -1;
    [self updateTextWithInt:[mPager_ getCurrentItem] withADXPagerAdapter:newAdapter];
    [self requestLayout];
  }
}

- (void)updateTextPositionsWithInt:(int32_t)position
                         withFloat:(float)positionOffset
                       withBoolean:(bool)force {
  if (position != mLastKnownCurrentPage_) {
    [self updateTextWithInt:position withADXPagerAdapter:[((ADXViewPager *) nil_chk(mPager_)) getAdapter]];
  }
  else if (!force && positionOffset == mLastKnownPositionOffset_) {
    return;
  }
  mUpdatingPositions_ = true;
  int32_t prevWidth = [((ADTextView *) nil_chk(mPrevText_)) getMeasuredWidth];
  int32_t currWidth = [((ADTextView *) nil_chk(mCurrText_)) getMeasuredWidth];
  int32_t nextWidth = [((ADTextView *) nil_chk(mNextText_)) getMeasuredWidth];
  int32_t halfCurrWidth = JreIntDiv(currWidth, 2);
  int32_t stripWidth = [self getWidth];
  int32_t stripHeight = [self getHeight];
  int32_t paddingLeft = [self getPaddingLeft];
  int32_t paddingRight = [self getPaddingRight];
  int32_t paddingTop = [self getPaddingTop];
  int32_t paddingBottom = [self getPaddingBottom];
  int32_t textPaddedLeft = paddingLeft + halfCurrWidth;
  int32_t textPaddedRight = paddingRight + halfCurrWidth;
  int32_t contentWidth = stripWidth - textPaddedLeft - textPaddedRight;
  float currOffset = positionOffset + 0.5f;
  if (currOffset > 1.f) {
    JreMinusAssignFloatF(&currOffset, 1.f);
  }
  int32_t currCenter = stripWidth - textPaddedRight - JreFpToInt((contentWidth * currOffset));
  int32_t currLeft = currCenter - JreIntDiv(currWidth, 2);
  int32_t currRight = currLeft + currWidth;
  int32_t prevBaseline = [((ADTextView *) nil_chk(mPrevText_)) getBaseline];
  int32_t currBaseline = [((ADTextView *) nil_chk(mCurrText_)) getBaseline];
  int32_t nextBaseline = [((ADTextView *) nil_chk(mNextText_)) getBaseline];
  int32_t maxBaseline = JavaLangMath_maxWithInt_withInt_(JavaLangMath_maxWithInt_withInt_(prevBaseline, currBaseline), nextBaseline);
  int32_t prevTopOffset = maxBaseline - prevBaseline;
  int32_t currTopOffset = maxBaseline - currBaseline;
  int32_t nextTopOffset = maxBaseline - nextBaseline;
  int32_t alignedPrevHeight = prevTopOffset + [((ADTextView *) nil_chk(mPrevText_)) getMeasuredHeight];
  int32_t alignedCurrHeight = currTopOffset + [((ADTextView *) nil_chk(mCurrText_)) getMeasuredHeight];
  int32_t alignedNextHeight = nextTopOffset + [((ADTextView *) nil_chk(mNextText_)) getMeasuredHeight];
  int32_t maxTextHeight = JavaLangMath_maxWithInt_withInt_(JavaLangMath_maxWithInt_withInt_(alignedPrevHeight, alignedCurrHeight), alignedNextHeight);
  int32_t vgrav = mGravity_ & ADGravity_VERTICAL_GRAVITY_MASK;
  int32_t prevTop;
  int32_t currTop;
  int32_t nextTop;
  {
    int32_t paddedHeight;
    int32_t centeredTop;
    int32_t bottomGravTop;
    switch (vgrav) {
      default:
      case ADGravity_TOP:
      prevTop = paddingTop + prevTopOffset;
      currTop = paddingTop + currTopOffset;
      nextTop = paddingTop + nextTopOffset;
      break;
      case ADGravity_CENTER_VERTICAL:
      paddedHeight = stripHeight - paddingTop - paddingBottom;
      centeredTop = JreIntDiv((paddedHeight - maxTextHeight), 2);
      prevTop = centeredTop + prevTopOffset;
      currTop = centeredTop + currTopOffset;
      nextTop = centeredTop + nextTopOffset;
      break;
      case ADGravity_BOTTOM:
      bottomGravTop = stripHeight - paddingBottom - maxTextHeight;
      prevTop = bottomGravTop + prevTopOffset;
      currTop = bottomGravTop + currTopOffset;
      nextTop = bottomGravTop + nextTopOffset;
      break;
    }
  }
  [((ADTextView *) nil_chk(mCurrText_)) layoutWithInt:currLeft withInt:currTop withInt:currRight withInt:currTop + [mCurrText_ getMeasuredHeight]];
  int32_t prevLeft = JavaLangMath_minWithInt_withInt_(paddingLeft, currLeft - mScaledTextSpacing_ - prevWidth);
  [((ADTextView *) nil_chk(mPrevText_)) layoutWithInt:prevLeft withInt:prevTop withInt:prevLeft + prevWidth withInt:prevTop + [mPrevText_ getMeasuredHeight]];
  int32_t nextLeft = JavaLangMath_maxWithInt_withInt_(stripWidth - paddingRight - nextWidth, currRight + mScaledTextSpacing_);
  [((ADTextView *) nil_chk(mNextText_)) layoutWithInt:nextLeft withInt:nextTop withInt:nextLeft + nextWidth withInt:nextTop + [mNextText_ getMeasuredHeight]];
  mLastKnownPositionOffset_ = positionOffset;
  mUpdatingPositions_ = false;
}

- (void)onMeasureWithInt:(int32_t)widthMeasureSpec
                 withInt:(int32_t)heightMeasureSpec {
  int32_t widthMode = ADView_MeasureSpec_getModeWithInt_(widthMeasureSpec);
  if (widthMode != ADView_MeasureSpec_EXACTLY) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"Must measure with an exact width");
  }
  int32_t heightPadding = [self getPaddingTop] + [self getPaddingBottom];
  int32_t childHeightSpec = ADViewGroup_getChildMeasureSpecWithInt_withInt_withInt_(heightMeasureSpec, heightPadding, ADViewGroup_LayoutParams_WRAP_CONTENT);
  int32_t widthSize = ADView_MeasureSpec_getSizeWithInt_(widthMeasureSpec);
  int32_t widthPadding = JreFpToInt((widthSize * 0.2f));
  int32_t childWidthSpec = ADViewGroup_getChildMeasureSpecWithInt_withInt_withInt_(widthMeasureSpec, widthPadding, ADViewGroup_LayoutParams_WRAP_CONTENT);
  [((ADTextView *) nil_chk(mPrevText_)) measureWithInt:childWidthSpec withInt:childHeightSpec];
  [((ADTextView *) nil_chk(mCurrText_)) measureWithInt:childWidthSpec withInt:childHeightSpec];
  [((ADTextView *) nil_chk(mNextText_)) measureWithInt:childWidthSpec withInt:childHeightSpec];
  int32_t height;
  int32_t heightMode = ADView_MeasureSpec_getModeWithInt_(heightMeasureSpec);
  if (heightMode == ADView_MeasureSpec_EXACTLY) {
    height = ADView_MeasureSpec_getSizeWithInt_(heightMeasureSpec);
  }
  else {
    int32_t textHeight = [((ADTextView *) nil_chk(mCurrText_)) getMeasuredHeight];
    int32_t minHeight = [self getMinHeight];
    height = JavaLangMath_maxWithInt_withInt_(minHeight, textHeight + heightPadding);
  }
  int32_t childState = [((ADTextView *) nil_chk(mCurrText_)) getMeasuredState];
  int32_t measuredHeight = ADView_resolveSizeAndStateWithInt_withInt_withInt_(height, heightMeasureSpec, JreLShift32(childState, ADView_MEASURED_HEIGHT_STATE_SHIFT));
  [self setMeasuredDimensionWithInt:widthSize withInt:measuredHeight];
}

- (void)onLayoutWithBoolean:(bool)changed
                    withInt:(int32_t)l
                    withInt:(int32_t)t
                    withInt:(int32_t)r
                    withInt:(int32_t)b {
  if (mPager_ != nil) {
    float offset = mLastKnownPositionOffset_ >= 0 ? mLastKnownPositionOffset_ : 0;
    [self updateTextPositionsWithInt:mLastKnownCurrentPage_ withFloat:offset withBoolean:true];
  }
}

- (int32_t)getMinHeight {
  int32_t minHeight = 0;
  ADDrawable *bg = [self getBackground];
  if (bg != nil) {
    minHeight = [bg getIntrinsicHeight];
  }
  return minHeight;
}

- (instancetype)initWithASHasWidgets:(id<ASHasWidgets>)widget {
  ADXPagerTitleStrip_initWithASHasWidgets_(self, widget);
  return self;
}

- (void)init__WithASHasWidgets:(id<ASHasWidgets>)widget {
  JreStrongAssign(&mPrevText_, (ADTextView *) cast_chk([((id<ASIWidget>) nil_chk(ASWidgetFactory_createWidgetWithNSString_withNSString_withASHasWidgets_withBoolean_(@"TextView", @"PagerTitleStrip_TextView", widget, false))) asWidget], [ADTextView class]));
  JreStrongAssign(&mCurrText_, (ADTextView *) cast_chk([((id<ASIWidget>) nil_chk(ASWidgetFactory_createWidgetWithNSString_withNSString_withASHasWidgets_withBoolean_(@"TextView", @"PagerTitleStrip_TextView", widget, false))) asWidget], [ADTextView class]));
  JreStrongAssign(&mNextText_, (ADTextView *) cast_chk([((id<ASIWidget>) nil_chk(ASWidgetFactory_createWidgetWithNSString_withNSString_withASHasWidgets_withBoolean_(@"TextView", @"PagerTitleStrip_TextView", widget, false))) asWidget], [ADTextView class]));
  [((ADTextView *) nil_chk(mNextText_)) setMyAttributeWithNSString:@"alpha" withId:JavaLangFloat_valueOfWithFloat_(ADXPagerTitleStrip_SIDE_ALPHA)];
  [((ADTextView *) nil_chk(mPrevText_)) setMyAttributeWithNSString:@"alpha" withId:JavaLangFloat_valueOfWithFloat_(ADXPagerTitleStrip_SIDE_ALPHA)];
}

- (void)setTextColorWithId:(id)objValue {
  [((ADTextView *) nil_chk(mCurrText_)) setMyAttributeWithNSString:@"textColor" withId:objValue];
  [((ADTextView *) nil_chk(mNextText_)) setMyAttributeWithNSString:@"textColor" withId:objValue];
  [((ADTextView *) nil_chk(mPrevText_)) setMyAttributeWithNSString:@"textColor" withId:objValue];
}

- (void)setNonPrimaryAlphaWithFloat:(float)alpha {
  [((ADTextView *) nil_chk(mNextText_)) setMyAttributeWithNSString:@"alpha" withId:JavaLangFloat_valueOfWithFloat_(alpha)];
  [((ADTextView *) nil_chk(mPrevText_)) setMyAttributeWithNSString:@"alpha" withId:JavaLangFloat_valueOfWithFloat_(alpha)];
}

- (void)setTextAppearanceWithId:(id)objValue {
  [((ADTextView *) nil_chk(mCurrText_)) setMyAttributeWithNSString:@"textAppearance" withId:objValue];
  [((ADTextView *) nil_chk(mNextText_)) setMyAttributeWithNSString:@"textAppearance" withId:objValue];
  [((ADTextView *) nil_chk(mPrevText_)) setMyAttributeWithNSString:@"textAppearance" withId:objValue];
}

- (void)dealloc {
  RELEASE_(mPager_);
  RELEASE_(mPrevText_);
  RELEASE_(mCurrText_);
  RELEASE_(mNextText_);
  RELEASE_(mPageListener_);
  RELEASE_(mWatchingAdapter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 13, 14, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 18, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(setTextSpacingWithInt:);
  methods[1].selector = @selector(getTextSpacing);
  methods[2].selector = @selector(setTextSizeWithInt:withFloat:);
  methods[3].selector = @selector(setGravityWithInt:);
  methods[4].selector = @selector(onAttachedToWindow);
  methods[5].selector = @selector(onDetachedFromWindow);
  methods[6].selector = @selector(updateTextWithInt:withADXPagerAdapter:);
  methods[7].selector = @selector(requestLayout);
  methods[8].selector = @selector(updateAdapterWithADXPagerAdapter:withADXPagerAdapter:);
  methods[9].selector = @selector(updateTextPositionsWithInt:withFloat:withBoolean:);
  methods[10].selector = @selector(onMeasureWithInt:withInt:);
  methods[11].selector = @selector(onLayoutWithBoolean:withInt:withInt:withInt:withInt:);
  methods[12].selector = @selector(getMinHeight);
  methods[13].selector = @selector(initWithASHasWidgets:);
  methods[14].selector = @selector(init__WithASHasWidgets:);
  methods[15].selector = @selector(setTextColorWithId:);
  methods[16].selector = @selector(setNonPrimaryAlphaWithFloat:);
  methods[17].selector = @selector(setTextAppearanceWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mPager_", "LADXViewPager;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mPrevText_", "LADTextView;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mCurrText_", "LADTextView;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mNextText_", "LADTextView;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mLastKnownCurrentPage_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mLastKnownPositionOffset_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mScaledTextSpacing_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mGravity_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mUpdatingText_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mUpdatingPositions_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mPageListener_", "LADXPagerTitleStrip_PageListener;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mWatchingAdapter_", "LJavaLangRefWeakReference;", .constantValue.asLong = 0, 0x2, -1, -1, 22, -1 },
    { "SIDE_ALPHA", "F", .constantValue.asFloat = ADXPagerTitleStrip_SIDE_ALPHA, 0x1a, -1, -1, -1, -1 },
    { "TEXT_SPACING", "I", .constantValue.asInt = ADXPagerTitleStrip_TEXT_SPACING, 0x1a, -1, -1, -1, -1 },
    { "mNonPrimaryAlpha_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTextColor_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setTextSpacing", "I", "setTextSize", "IF", "setGravity", "updateText", "ILADXPagerAdapter;", "updateAdapter", "LADXPagerAdapter;LADXPagerAdapter;", "updateTextPositions", "IFZ", "onMeasure", "II", "onLayout", "ZIIII", "LASHasWidgets;", "init", "setTextColor", "LNSObject;", "setNonPrimaryAlpha", "F", "setTextAppearance", "Ljava/lang/ref/WeakReference<Landroidx/viewpager/widget/PagerAdapter;>;", "LADXPagerTitleStrip_PageListener;" };
  static const J2ObjcClassInfo _ADXPagerTitleStrip = { "PagerTitleStrip", "androidx.viewpager.widget", ptrTable, methods, fields, 7, 0x1, 18, 16, -1, 23, -1, -1, -1 };
  return &_ADXPagerTitleStrip;
}

@end

void ADXPagerTitleStrip_initWithASHasWidgets_(ADXPagerTitleStrip *self, id<ASHasWidgets> widget) {
  ADViewGroup_init(self);
  self->mLastKnownCurrentPage_ = -1;
  self->mLastKnownPositionOffset_ = -1;
  JreStrongAssignAndConsume(&self->mPageListener_, new_ADXPagerTitleStrip_PageListener_initWithADXPagerTitleStrip_(self));
  self->mGravity_ = ADGravity_BOTTOM;
  self->mScaledTextSpacing_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([((id<ASIConverter>) nil_chk(ASConverterFactory_getWithNSString_(@"dimension"))) convertFromWithId:@"16dp" withJavaUtilMap:nil withASIFragment:[((id<ASHasWidgets>) nil_chk(widget)) getFragment]], [JavaLangInteger class]))) intValue];
}

ADXPagerTitleStrip *new_ADXPagerTitleStrip_initWithASHasWidgets_(id<ASHasWidgets> widget) {
  J2OBJC_NEW_IMPL(ADXPagerTitleStrip, initWithASHasWidgets_, widget)
}

ADXPagerTitleStrip *create_ADXPagerTitleStrip_initWithASHasWidgets_(id<ASHasWidgets> widget) {
  J2OBJC_CREATE_IMPL(ADXPagerTitleStrip, initWithASHasWidgets_, widget)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXPagerTitleStrip)

J2OBJC_NAME_MAPPING(ADXPagerTitleStrip, "androidx.viewpager.widget", "ADX")

@implementation ADXPagerTitleStrip_PageListener

- (instancetype)initWithADXPagerTitleStrip:(ADXPagerTitleStrip *)outer$ {
  ADXPagerTitleStrip_PageListener_initWithADXPagerTitleStrip_(self, outer$);
  return self;
}

- (void)onPageScrolledWithInt:(int32_t)position
                    withFloat:(float)positionOffset
                      withInt:(int32_t)positionOffsetPixels {
  if (positionOffset > 0.5f) {
    position++;
  }
  [this$0_ updateTextPositionsWithInt:position withFloat:positionOffset withBoolean:false];
}

- (void)onPageSelectedWithInt:(int32_t)position {
  if (mScrollState_ == ADXViewPager_SCROLL_STATE_IDLE) {
    [this$0_ updateTextWithInt:[((ADXViewPager *) nil_chk(this$0_->mPager_)) getCurrentItem] withADXPagerAdapter:[((ADXViewPager *) nil_chk(this$0_->mPager_)) getAdapter]];
    float offset = this$0_->mLastKnownPositionOffset_ >= 0 ? this$0_->mLastKnownPositionOffset_ : 0;
    [this$0_ updateTextPositionsWithInt:[((ADXViewPager *) nil_chk(this$0_->mPager_)) getCurrentItem] withFloat:offset withBoolean:true];
  }
}

- (void)onPageScrollStateChangedWithInt:(int32_t)state {
  mScrollState_ = state;
}

- (void)onAdapterChangedWithADXViewPager:(ADXViewPager *)viewPager
                     withADXPagerAdapter:(ADXPagerAdapter *)oldAdapter
                     withADXPagerAdapter:(ADXPagerAdapter *)newAdapter {
  [this$0_ updateAdapterWithADXPagerAdapter:oldAdapter withADXPagerAdapter:newAdapter];
}

- (void)onChanged {
  [this$0_ updateTextWithInt:[((ADXViewPager *) nil_chk(this$0_->mPager_)) getCurrentItem] withADXPagerAdapter:[((ADXViewPager *) nil_chk(this$0_->mPager_)) getAdapter]];
  float offset = this$0_->mLastKnownPositionOffset_ >= 0 ? this$0_->mLastKnownPositionOffset_ : 0;
  [this$0_ updateTextPositionsWithInt:[((ADXViewPager *) nil_chk(this$0_->mPager_)) getCurrentItem] withFloat:offset withBoolean:true];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADXPagerTitleStrip:);
  methods[1].selector = @selector(onPageScrolledWithInt:withFloat:withInt:);
  methods[2].selector = @selector(onPageSelectedWithInt:);
  methods[3].selector = @selector(onPageScrollStateChangedWithInt:);
  methods[4].selector = @selector(onAdapterChangedWithADXViewPager:withADXPagerAdapter:withADXPagerAdapter:);
  methods[5].selector = @selector(onChanged);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LADXPagerTitleStrip;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "mScrollState_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADXPagerTitleStrip;", "onPageScrolled", "IFI", "onPageSelected", "I", "onPageScrollStateChanged", "onAdapterChanged", "LADXViewPager;LADXPagerAdapter;LADXPagerAdapter;" };
  static const J2ObjcClassInfo _ADXPagerTitleStrip_PageListener = { "PageListener", "androidx.viewpager.widget", ptrTable, methods, fields, 7, 0x2, 6, 2, 0, -1, -1, -1, -1 };
  return &_ADXPagerTitleStrip_PageListener;
}

@end

void ADXPagerTitleStrip_PageListener_initWithADXPagerTitleStrip_(ADXPagerTitleStrip_PageListener *self, ADXPagerTitleStrip *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  ADDataSetObserver_init(self);
}

ADXPagerTitleStrip_PageListener *new_ADXPagerTitleStrip_PageListener_initWithADXPagerTitleStrip_(ADXPagerTitleStrip *outer$) {
  J2OBJC_NEW_IMPL(ADXPagerTitleStrip_PageListener, initWithADXPagerTitleStrip_, outer$)
}

ADXPagerTitleStrip_PageListener *create_ADXPagerTitleStrip_PageListener_initWithADXPagerTitleStrip_(ADXPagerTitleStrip *outer$) {
  J2OBJC_CREATE_IMPL(ADXPagerTitleStrip_PageListener, initWithADXPagerTitleStrip_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXPagerTitleStrip_PageListener)
